---
import { Accordion, Aside } from "@components"
import { loadReferenceData, Version, Environment } from "@config/data/ccip/"
import { directoryToSupportedChain, getTitle, getChainIcon } from "@features/utils"
import ChainConfig from "./ChainConfig.astro"

type MainProps = {
  environment: Environment
  version: Version
}

const { environment, version } = Astro.props as MainProps

const chainsReferenceData = loadReferenceData({ environment, version }).chainsReferenceData

const sortedEntries = Object.entries(chainsReferenceData).sort(
  ([chainRefIdA, chainConfigA], [chainRefIdB, chainConfigB]) => {
    const chainTitleA = getTitle(directoryToSupportedChain(chainRefIdA)) || ""
    const chainTitleB = getTitle(directoryToSupportedChain(chainRefIdB)) || ""
    return chainTitleA.localeCompare(chainTitleB)
  }
)
---

<br />

{
  sortedEntries.map(([chainRefId, chainConfig], index) => {
    const chainKey = directoryToSupportedChain(chainRefId)
    const chainTitle = getTitle(chainKey)
    if (!chainTitle) throw Error(`Title not found for chain ${chainKey}`)
    const chainIcon = getChainIcon(chainKey)
    if (!chainIcon) throw Error(`Icon not found for chain ${chainKey}`)
    const id = chainKey.replace(/_/g, "-").toLowerCase()
    return (
      <>
        <Accordion title={chainTitle} contentReference={id}>
          <div slot="title" class="logo-title-container">
            <img src={chainIcon} class="logo-image" />
            <span>Lanes on {chainTitle}</span>
          </div>
          <ChainConfig
            chainConfig={chainConfig}
            chainTitle={chainTitle}
            sourceChain={chainKey}
            sourceChainRefId={chainRefId}
            environment={environment}
            version={version}
          />
        </Accordion>
      </>
    )
  })
}

<style>
  .logo-title-container {
    display: flex;
    align-items: center;
  }

  .logo-image {
    width: 24px;
    height: 24px;
    margin-right: 5px;
  }
</style>
