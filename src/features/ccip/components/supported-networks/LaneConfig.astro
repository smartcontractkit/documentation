---
import {
  loadReferenceData,
  Environment,
  Version,
  PoolType,
  type LaneConfig,
  determineTokenMechanism,
  TokenMechanism,
} from "@config/data/ccip/"
import { SupportedChain } from "@config"
import { Address, Aside, CopyText } from "@components"
import BigNumber from "bignumber.js"
import { utils } from "ethers"
import { getExplorer, getExplorerAddressUrl } from "@features/utils"
import { Tooltip } from "@features/common/Tooltip"
import { TokenExtraInfo } from "./types"
import TokenSearch from "./TokenSearch"

type ConfigProps = {
  laneConfig: LaneConfig
  sourceChain: SupportedChain // key in SupportedChain
  sourceChainRefId: string // id in reference directory
  destinationChainRefId: string // id in reference directory
  destinationChainSelector: string
  environment: Environment
  version: Version
}

const contactUrl = "https://chainlinkcommunity.typeform.com/ccip-form?typeform-source=docs.chain.link#ref_id=ccip_docs"
const {
  laneConfig,
  sourceChain,
  environment,
  sourceChainRefId,
  destinationChainRefId,
  version,
  destinationChainSelector,
} = Astro.props as ConfigProps
const { rateLimiterConfig, supportedTokens, onRamp } = laneConfig

const normalizeNumber = (bigNum: BigNumber, decimals: number = 18) => {
  const divisor = new BigNumber(10).pow(decimals)
  const normalized = bigNum.dividedBy(divisor)

  return normalized.toNumber()
}

const display = (bigNum: string, decimals: number = 18) => {
  const numberWithoutDecimals = normalizeNumber(new BigNumber(bigNum), decimals).toString()
  return utils.commify(numberWithoutDecimals)
}

const formatTime = (seconds: number) => {
  const minute = 60
  const hour = 3600 // 60*60

  if (seconds < minute) {
    return `${seconds} second${seconds > 1 ? "s" : ""}`
  } else if (seconds < hour && hour - seconds > 300) {
    // if the difference less than 5 minutes(300 seconds), round to hours
    const minutes = Math.round(seconds / minute)
    return `${minutes} minute${minutes > 1 ? "s" : ""}`
  } else {
    let hours = Math.floor(seconds / hour)
    let remainingSeconds = seconds % hour

    // Determine the nearest 5-minute interval
    let minutes = Math.round(remainingSeconds / minute / 5) * 5

    // Round up to the next hour if minutes are 60
    if (minutes === 60) {
      hours += 1
      minutes = 0
    }

    return `${hours}${
      minutes > 0
        ? ` hour${hours > 1 ? "s" : ""} and ${minutes} minute${minutes > 1 ? "s" : ""}`
        : ` hour${hours > 1 ? "s" : ""}`
    }`
  }
}

const displayRate = (capacity: string, rate: string, symbol: string, decimals: number = 18) => {
  const capacityNormalized = normalizeNumber(new BigNumber(capacity), decimals) // normalize capacity
  const rateNormalized = normalizeNumber(new BigNumber(rate), decimals) // normalize capacity

  const totalRefillTime = capacityNormalized / rateNormalized // in seconds
  const displayTime = `${formatTime(totalRefillTime)}`

  return {
    rateSecond: `${rateNormalized} ${symbol}/second`,
    maxThroughput: `Refills from 0 to ${utils.commify(capacityNormalized)} ${symbol} in ${displayTime}`,
  }
}

const explorerUrl = getExplorer(sourceChain)

if (!explorerUrl) throw Error(`Explorer url not found for ${sourceChain}`)

const onRampExplorerUrl = getExplorerAddressUrl(explorerUrl)(onRamp)

let tokensWithExtraInfo: TokenExtraInfo[] = []

const determineMechanism = (
  supportedToken: string,
  sourcePoolType: PoolType | undefined,
  destinationPoolType: PoolType | undefined
): string => {
  const mechanism = determineTokenMechanism(sourcePoolType, destinationPoolType)
  if (
    mechanism === TokenMechanism.NoPoolSourceChain ||
    mechanism === TokenMechanism.NoPoolDestinationChain ||
    mechanism === TokenMechanism.NoPoolsOnBothChains ||
    mechanism === TokenMechanism.Unsupported
  ) {
    console.error(`Error: ${mechanism} for token ${supportedToken} on ${sourceChainRefId} to ${destinationChainRefId}`)
    return ""
  }

  return mechanism
}

const tokensReferenceData = loadReferenceData({ environment, version }).tokensReferenceData
if (supportedTokens) {
  tokensWithExtraInfo = Object.entries(supportedTokens)
    .filter(([supportedToken]) => {
      const tokenData = tokensReferenceData[supportedToken]
      if (!tokenData || !tokenData[sourceChainRefId]) {
        console.error(`Data not found for supportedToken: ${supportedToken}, chainRefId: ${sourceChainRefId}`)
        return false
      }

      return !tokenData[sourceChainRefId].allowListEnabled
    })
    .map(([supportedToken, { rateLimiterConfig }]): TokenExtraInfo | null => {
      const tokenData = tokensReferenceData[supportedToken]
      const sourceData = tokenData[sourceChainRefId]
      const destinationData = tokenData[destinationChainRefId]

      if (!sourceData || !destinationData) {
        console.error(`Pool type not found for token: ${supportedToken}`)
        return null
      }

      const mechanism = determineMechanism(supportedToken, sourceData.poolType, destinationData.poolType)

      return {
        token: supportedToken,
        symbol: sourceData.symbol,
        address: sourceData.tokenAddress,
        rateLimiterConfig: rateLimiterConfig,
        decimals: sourceData.decimals,
        poolMechanism: mechanism,
      }
    })
    .filter((item): item is TokenExtraInfo => item !== null && item.token !== undefined)
    .sort((itemA, itemB) => itemA.token.localeCompare(itemB.token, undefined, { sensitivity: "base" }))
}
---

<table>
  <thead><tr><th>Parameter</th><th>Value</th></tr></thead>
  <tbody>
    <tr>
      <td>OnRamp address</td>
      <td
        ><Address
          contractUrl={onRampExplorerUrl}
          eventName="docs_product_interaction"
          additionalInfo={{
            product: "CCIP",
            action: "ccip_onRampAddress_copied",
            extraInfo1: sourceChain,
            extraInfo2: destinationChainRefId,
          }}
          client:only="preact"
        /></td
      >
    </tr>
    <tr>
      <td>Destination chain selector</td>
      <td
        ><CopyText
          text={destinationChainSelector}
          code
          eventName="docs_product_interaction"
          additionalInfo={{
            product: "CCIP",
            action: "ccip_destinationChainSelector_copied",
            extraInfo1: sourceChain,
            extraInfo2: destinationChainRefId,
          }}
          client:only="preact"
        /></td
      >
    </tr>
  </tbody>
</table>
<br />

{
  tokensWithExtraInfo.length > 0 ? (
    <>
      {rateLimiterConfig && rateLimiterConfig.isEnabled ? (
        <table>
          <>
            <thead>
              <tr>
                <>
                  <th>Aggregate Rate Limit</th>
                  <th>Value</th>
                </>
              </tr>
            </thead>
            <tbody>
              <>
                <tr>
                  <>
                    <td>
                      <Tooltip
                        tip="Maximum amount per transaction"
                        label="Capacity"
                        style={{ marginTop: "0" }}
                        client:load
                      />
                    </td>
                    <td>{display(rateLimiterConfig.capacity)} USD</td>
                  </>
                </tr>
                <tr>
                  <>
                    <td>
                      <Tooltip
                        tip="Rate at which available capacity is replenished"
                        label="Refill rate"
                        style={{ marginTop: "0" }}
                        client:load
                      />
                    </td>
                    <td>
                      {(() => {
                        const { rateSecond, maxThroughput } = displayRate(
                          rateLimiterConfig.capacity,
                          rateLimiterConfig.rate,
                          "USD"
                        )

                        return <Tooltip tip={maxThroughput} label={rateSecond} style={{ marginTop: "0" }} client:load />
                      })()}
                    </td>
                  </>
                </tr>
              </>
            </tbody>
          </>
        </table>
      ) : null}
      <>
        <p>
          <strong>Transferable tokens</strong>
        </p>
        <TokenSearch tokens={tokensWithExtraInfo} sourceChain={sourceChain} client:only="preact" />
      </>
    </>
  ) : (
    <Aside>
      No tokens have currently been listed on this lane. Token issuers may <a href={contactUrl}>contact us</a> to have
      their token listed.
    </Aside>
  )
}
