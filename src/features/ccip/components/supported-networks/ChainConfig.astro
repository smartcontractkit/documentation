---
import type { ChainConfig } from "@config/data/ccip/types"
import { loadReferenceData, Environment, Version } from "@config/data/ccip/"
import { Address, CopyText, Accordion } from "@components"
import { Tooltip } from "@features/common/Tooltip"
import {
  getTitle,
  getExplorer,
  getExplorerAddressUrl,
  getNativeCurrency,
  directoryToSupportedChain,
  getChainIcon,
  getTokenIconUrl,
  fallbackTokenIconUrl,
} from "@features/utils"
import LaneConfig from "./LaneConfig.astro"

type ConfigProps = {
  chainConfig: ChainConfig
  chainTitle: string
  sourceChainRefId: string // id in reference directory
  environment: Environment
  version: Version
}

const { chainConfig, chainTitle, environment, sourceChainRefId, version } = Astro.props as ConfigProps
const { router, chainSelector, feeTokens } = chainConfig
const sourceChainKey = directoryToSupportedChain(sourceChainRefId)
const sourceChainTitle = getTitle(sourceChainKey)
if (!sourceChainTitle) throw Error(`Title not found for chain ${sourceChainKey}`)
const sourceChainIcon = getChainIcon(sourceChainKey)
if (!sourceChainIcon) throw Error(`Icon not found for chain ${sourceChainKey}`)
const explorerUrl = getExplorer(sourceChainKey)
if (!explorerUrl) throw Error(`Explorer url not found for ${sourceChainKey}`)
const routerExplorerUrl = getExplorerAddressUrl(explorerUrl)(router)
const nativeCurrency = getNativeCurrency(sourceChainKey)
if (!nativeCurrency) throw Error(`Native currency not found for ${sourceChainKey}`)
// sort tokens - LINK first
feeTokens.sort((feeToken1, feeToken2) => {
  if (feeToken1 === "LINK") {
    return -1
  } else if (feeToken2 === "LINK") {
    return 1
  } else {
    return 0
  }
})

let tokensReferenceData
try {
  tokensReferenceData = loadReferenceData({ environment, version }).tokensReferenceData
} catch (error) {
  console.error(error)
  throw Error(`Error while loading CCIP reference data`)
}
const feeTokensWithAddresses = feeTokens.map((feeToken) => {
  if (!tokensReferenceData[feeToken]) throw Error(`Fee token ${feeToken} not defined`)
  if (!tokensReferenceData[feeToken][sourceChainRefId])
    throw Error(`Fee token ${feeToken} not defined for chain ${sourceChainRefId}`)
  const tokenAddress = tokensReferenceData[feeToken][sourceChainRefId].tokenAddress
  return {
    token: feeToken,
    address: tokenAddress,
  }
})

const nativeTokenHasAddress = feeTokensWithAddresses.some(
  (feeToken) => feeToken.token.toLowerCase() === nativeCurrency.symbol.toLowerCase()
)

const laneReferenceData = loadReferenceData({ environment, version }).lanesReferenceData[sourceChainRefId]

const sortedLaneEntries = Object.entries(laneReferenceData).sort(
  ([destinationChainRefIdA, laneConfigA], [destinationChainRefIdB, laneConfigB]) => {
    const destinationChainTitleA = getTitle(directoryToSupportedChain(destinationChainRefIdA)) || ""
    const destinationChainTitleB = getTitle(directoryToSupportedChain(destinationChainRefIdB)) || ""
    return destinationChainTitleA.localeCompare(destinationChainTitleB)
  }
)
---

<table>
  <thead><tr><th>Parameter</th><th>Value</th></tr></thead>
  <tbody>
    <tr>
      <td>Router address</td>
      <td
        ><Address
          contractUrl={routerExplorerUrl}
          eventName="docs_product_interaction"
          additionalInfo={{
            product: "CCIP",
            action: "routerAddress_copied",
            extraInfo1: sourceChainRefId,
          }}
          client:only="preact"
        /></td
      >
    </tr>
    <tr>
      <td><Tooltip tip="CCIP Blockchain identifier" label="Chain selector" style={{ marginTop: "0" }} client:load /></td
      >
      <td
        ><CopyText
          text={chainSelector}
          eventName="docs_product_interaction"
          additionalInfo={{
            product: "CCIP",
            action: "ccip_sourceChainSelector_copied",
            extraInfo1: sourceChainRefId,
          }}
          code
          client:only="preact"
        /></td
      >
    </tr>
    <tr>
      <td>Fee tokens</td>
      <td>
        <table>
          <tbody>
            {
              feeTokensWithAddresses.map((feeTokenWithAddress) => (
                <tr>
                  <td>
                    <img
                      width="16"
                      height="16"
                      src={`${getTokenIconUrl(feeTokenWithAddress.token)}`}
                      alt={`${feeTokenWithAddress.token} icon`}
                      onerror={`this.onerror=null; this.src='${fallbackTokenIconUrl}'`}
                    />{" "}
                    {feeTokenWithAddress.token}
                  </td>
                  <td>
                    <Address
                      contractUrl={getExplorerAddressUrl(explorerUrl)(feeTokenWithAddress.address)}
                      endLength={7}
                      eventName="docs_product_interaction"
                      additionalInfo={{
                        product: "CCIP",
                        action: "ccip_feeToken_copied",
                        extraInfo1: sourceChainRefId,
                        extraInfo2: feeTokenWithAddress.token,
                      }}
                      client:only="preact"
                    />
                  </td>
                </tr>
              ))
            }
            {
              !nativeTokenHasAddress && (
                <tr>
                  <td>
                    <img
                      width="16"
                      height="16"
                      src={`${getTokenIconUrl(nativeCurrency.symbol)}`}
                      alt={`${nativeCurrency.symbol} icon`}
                      onerror={`this.onerror=null; this.src='${fallbackTokenIconUrl}'`}
                    />{" "}
                    {nativeCurrency.symbol}
                  </td>
                  <td>Native gas token</td>
                </tr>
              )
            }
          </tbody>
        </table>
      </td>
    </tr>
  </tbody>
</table>
<br />

{
  sortedLaneEntries.map(([destinationChainRefId, laneConfig], index) => {
    const destinationChainKey = directoryToSupportedChain(destinationChainRefId)
    const destinationChainTitle = getTitle(destinationChainKey)
    if (!destinationChainTitle) throw Error(`Title not found for chain ${destinationChainKey}`)
    const destinationChainIcon = getChainIcon(destinationChainKey)
    if (!destinationChainIcon) throw Error(`Icon not found for chain ${destinationChainKey}`)
    const id = `${sourceChainKey}-${destinationChainKey}`.replace(/_/g, "-").toLowerCase()
    const destinationChainSelector = loadReferenceData({ environment, version }).chainsReferenceData[
      destinationChainRefId
    ].chainSelector
    if (!destinationChainSelector) throw Error(`Chain selector not found for chain ${destinationChainKey}`)

    return (
      <>
        <Accordion title={`From ${sourceChainTitle} to ${destinationChainTitle}`} contentReference={id}>
          <div slot="title" style="display: flex; align-items: center;">
            <div class="logo-title-container">
              <img src={sourceChainIcon} class="logo-image" />
              <span>{sourceChainTitle}</span>
            </div>
            <span class="arrow">➡️</span>
            <div class="logo-title-container">
              <img src={destinationChainIcon} class="logo-image" />
              <span>{destinationChainTitle}</span>
            </div>
          </div>
          <LaneConfig
            laneConfig={laneConfig}
            sourceChain={sourceChainKey}
            sourceChainRefId={sourceChainRefId}
            destinationChainRefId={destinationChainRefId}
            destinationChainSelector={destinationChainSelector}
            environment={environment}
            version={version}
          />
        </Accordion>
      </>
    )
  })
}

<style>
  .logo-title-container {
    display: flex;
    align-items: center;
  }

  .arrow {
    margin: 0 5px;
    font-size: 15px;
  }

  .logo-image {
    width: 24px;
    height: 24px;
    margin-right: 5px;
  }
</style>
