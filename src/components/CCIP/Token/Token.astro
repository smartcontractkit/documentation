---
import CcipDirectoryLayout from "~/layouts/CcipDirectoryLayout.astro"
import { getEntry, render } from "astro:content"
import {
  getAllNetworks,
  getAllSupportedTokens,
  getAllTokenLanes,
  getChainsOfToken,
  getSearchLanes,
  getTokenData,
  Version,
  Environment,
} from "~/config/data/ccip"
import ChainHero from "~/components/CCIP/ChainHero/ChainHero"
import Table from "~/components/CCIP/Tables/TokenChainsTable"
import {
  directoryToSupportedChain,
  getChainIcon,
  getChainTypeAndFamily,
  getExplorer,
  getTitle,
  getTokenIconUrl,
} from "~/features/utils"
import Drawer from "~/components/CCIP/Drawer/Drawer"
import { generateTokenStructuredData } from "~/utils/ccipStructuredData"
import StructuredData from "~/components/StructuredData.astro"

interface Props {
  token: string
  logo: string
  environment: Environment
}

const { token, logo, environment } = Astro.props as Props

const entry = await getEntry("ccip", "index")
if (!entry) {
  throw new Error('Could not find "ccip/index" doc. Check src/content/ccip/index.mdx!')
}

const { headings } = await render(entry)

const networks = getAllNetworks({ filter: environment })

const supportedTokens = getAllSupportedTokens({
  environment,
  version: Version.V1_2_0,
})

const tokens = Object.keys(supportedTokens).sort((a, b) => a.localeCompare(b, undefined, { sensitivity: "base" }))

const chainsOfToken = getChainsOfToken({ token, filter: environment })
const firstSupportedChain = chainsOfToken[0]

const allTokens = tokens.map((tokenId) => {
  const logoPath = getTokenIconUrl(tokenId) || ""
  return {
    id: tokenId,
    logo: logoPath,
    totalNetworks: chainsOfToken.length,
  }
})

const data = getTokenData({
  environment,
  version: Version.V1_2_0,
  tokenId: token,
})

const tokenLanes = getAllTokenLanes({
  environment,
  version: Version.V1_2_0,
  token,
})

const searchLanes = getSearchLanes({ environment })

// Generate dynamic metadata for this specific token
const environmentText = environment === Environment.Mainnet ? "Mainnet" : "Testnet"
const tokenMetadata = {
  title: `${token} Cross-Chain Token - CCIP ${environmentText} Networks`,
  description: `${token} token availability across CCIP ${environmentText} networks. View ${chainsOfToken.length} supported chains, pool types, rate limits, and cross-chain transfer mechanisms.`,
  image: logo,
  excerpt: `${token} cross-chain token CCIP ${environmentText.toLowerCase()} supported networks pool types rate limits transfer mechanisms blockchain interoperability`,
}

// Generate structured data for this token page
const tokenStructuredData = generateTokenStructuredData(token, environment, chainsOfToken.length, Astro.url.href)
---

<CcipDirectoryLayout
  frontmatter={{
    title: tokenMetadata.title,
    section: "ccip",
    metadata: {
      description: tokenMetadata.description,
      image: tokenMetadata.image,
      excerpt: tokenMetadata.excerpt,
    },
  }}
  {headings}
  environment={environment}
>
  <ChainHero
    chains={networks}
    tokens={allTokens}
    client:load
    lanes={searchLanes}
    token={{
      id: token,
      name: data[firstSupportedChain]?.name || "",
      logo: logo || "",
      symbol: data[firstSupportedChain]?.symbol ?? "",
    }}
    environment={environment}
  />

  <section class="layout">
    <div>
      <Table
        client:load
        environment={environment}
        networks={Object.keys(tokenLanes)
          .map((key) => {
            const supportedChain = directoryToSupportedChain(key || "")
            const title = getTitle(supportedChain) || ""
            const networkLogo = getChainIcon(supportedChain) || ""
            const explorer = getExplorer(supportedChain)
            if (!explorer) throw new Error(`Explorer not found for ${key}`)
            const { chainType } = getChainTypeAndFamily(supportedChain)

            return {
              name: title,
              key: key,
              logo: networkLogo,
              tokenId: token,
              tokenLogo: logo || "",
              tokenName: data[key]?.name || "",
              tokenSymbol: data[key]?.symbol ?? "",
              tokenDecimals: data[key]?.decimals ?? 0,
              tokenAddress: data[key]?.tokenAddress ?? "",
              tokenPoolType: data[key]?.poolType,
              tokenPoolAddress: data[key]?.poolAddress ?? "",
              explorer: explorer,
              chainType: chainType,
            }
          })
          .sort((a, b) => a.name.localeCompare(b.name))}
        lanes={tokenLanes}
        token={{
          id: token,
          name: data[firstSupportedChain]?.name || "",
          logo: logo || "",
          symbol: data[firstSupportedChain]?.symbol ?? "",
        }}
      />
    </div>
  </section>
</CcipDirectoryLayout>

<StructuredData data={tokenStructuredData} />

<style scoped="false">
  .layout {
    --doc-padding: var(--space-6x);
    margin: var(--space-8x) auto;
    padding: var(--doc-padding);
  }

  .layout h2 {
    color: var(--gray-900);
    font-size: 22px;
    line-height: var(--space-10x);
    padding-bottom: var(--space-4x);
    border-bottom: 1px solid var(--gray-200);
    margin-bottom: var(--space-6x);
  }

  .layout h2 span {
    color: var(--gray-400);
    font-weight: 600;
    letter-spacing: 0.5px;
  }

  .networks__grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: var(--space-8x);
  }

  .tokens__grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: var(--space-8x);
  }

  @media (min-width: 50em) {
    .layout {
      max-width: min(calc(1440px - 2 * var(--space-16x)), calc(100% - 2 * var(--space-16x)));
      padding: 0;
    }
  }
</style>
