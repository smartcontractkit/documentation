---
import CcipLayout from "~/layouts/CcipLayout.astro"
import { getEntry } from "astro:content"
import Hero from "~/components/CCIP/Hero/Hero"
import {
  Environment,
  getAllNetworks,
  getAllSupportedTokens,
  getChainsOfToken,
  getSearchLanes,
  Version,
} from "~/config/data/ccip"
import NetworkCard from "~/components/CCIP/Cards/NetworkCard"
import TokenCard from "~/components/CCIP/Cards/TokenCard"
import { getTokenIconUrl } from "~/features/utils"
import Drawer from "../Drawer/Drawer"
export type Props = {
  environment: Environment
}
const { environment } = Astro.props as Props

const entry = await getEntry("ccip", "index")
const { headings } = await entry.render()
const networks = getAllNetworks({ filter: environment })
const supportedTokens = getAllSupportedTokens({
  environment: environment,
  version: Version.V1_2_0,
})

const tokens = Object.keys(supportedTokens).sort((a, b) => a.localeCompare(b, undefined, { sensitivity: "base" }))

const allTokens = tokens.map((token) => {
  const logo = getTokenIconUrl(token) || ""
  return {
    name: token,
    logo,
    totalNetworks: getChainsOfToken({ token, filter: environment }).length,
  }
})

const searchLanes = getSearchLanes({ environment })
---

<CcipLayout frontmatter={entry.data} {headings} environment={environment}>
  <Drawer client:only="react" />
  <Hero chains={networks} tokens={allTokens} environment={environment} client:load lanes={searchLanes} />
  <section class="layout">
    <div>
      <div class="ccip-heading">
        <h2>Networks {environment} <span>({networks.length})</span></h2>
      </div>
      <div class="networks__grid">
        {
          networks.map((chain) => (
            <a href={`/ccip/supported-networks/${environment}/chain/${chain.chain}`}>
              <NetworkCard
                name={chain.name}
                totalLanes={chain.totalLanes}
                totalTokens={chain.totalTokens}
                logo={chain.logo}
              />
            </a>
          ))
        }
      </div>
    </div>
    <div>
      <div class="ccip-heading">
        <h2>Tokens <span>({allTokens.length})</span></h2>
        <a class="button secondary" href="/ccip/concepts/cross-chain-tokens">List my token</a>
      </div>

      <div class="tokens__grid">
        {
          allTokens.map((token) => (
            <TokenCard
              name={token.name}
              logo={token.logo}
              link={`/ccip/supported-networks/${environment}/token/${token.name}`}
            />
          ))
        }
      </div>
    </div>
  </section>
</CcipLayout>

<style>
  .layout {
    --gutter: var(--space-6x);
    --doc-padding: 2rem;
    /* margin-bottom: 0; */
    margin: var(--space-8x) auto;
    display: grid;
    grid-template-columns: 1fr;
    gap: var(--gutter);
    padding: var(--doc-padding);
  }

  .ccip-heading {
    display: flex;
    padding-bottom: var(--space-4x);
    border-bottom: 1px solid var(--gray-200);
    margin-bottom: var(--space-6x);
    justify-content: space-between;
  }

  .layout h2 {
    color: var(--gray-900);
    font-size: 22px;
    line-height: var(--space-10x);
    margin-bottom: 0px;
  }

  .layout h2 span {
    color: var(--gray-400);
    font-weight: 600;
    letter-spacing: 0.5px;
  }

  .networks__grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: var(--space-8x);
  }

  .tokens__grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: var(--space-8x);
  }

  @media (min-width: 50em) {
    .layout {
      max-width: 1440px;
    }
  }

  @media (min-width: 992px) {
    .layout {
      grid-template-columns: 1fr 1fr;
      gap: var(--space-24x);
    }

    .networks__grid {
      grid-template-columns: 1fr 1fr;
      gap: var(--space-6x);
    }

    .tokens__grid {
      grid-template-columns: 1fr 1fr 1fr 1fr;
      gap: var(--space-4x);
    }
  }
</style>
