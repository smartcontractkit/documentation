---
import CcipLayout from "~/layouts/CcipLayout.astro"
import { getEntry } from "astro:content"
import {
  Environment,
  getAllNetworkLanes,
  getAllNetworks,
  getSearchLanes,
  getTokensOfChain,
  Version,
} from "~/config/data/ccip"
import ChainHero from "~/components/CCIP/ChainHero/ChainHero"
import ChainTable from "~/components/CCIP/Tables/ChainTable"
import { getTokenIconUrl } from "~/features/utils"
import Drawer from "../Drawer/Drawer"
import ChainTokenGrid from "./ChainTokenGrid"

// TODO: Add type for network
const { environment, network } = Astro.props as { environment: Environment; network: any }

const entry = await getEntry("ccip", "index")
const { headings } = await entry.render()
const networks = getAllNetworks({ filter: environment })

const allTokens = getTokensOfChain({
  chain: network?.chain || "",
  filter: environment,
})
  .map((token) => {
    const logo = getTokenIconUrl(token) || ""
    return {
      id: token,
      logo,
      totalNetworks: networks.length, // Add totalNetworks property
    }
  })
  .sort((a, b) => a.id.localeCompare(b.id))

const lanes = await getAllNetworkLanes({
  environment: environment,
  version: Version.V1_2_0,
  chain: network?.chain || "",
  site: Astro.url.origin || "",
})

const searchLanes = getSearchLanes({ environment })
---

<CcipLayout
  frontmatter={{
    title: `CCIP Supported Networks - ${network.name}`,
    section: "ccip",
  }}
  {headings}
  environment={environment}
>
  <ChainHero
    chains={networks}
    tokens={allTokens}
    network={network}
    environment={environment}
    lanes={searchLanes}
    client:load
  />
  <section class="layout">
    <div>
      <ChainTable
        environment={environment}
        lanes={lanes}
        client:load
        explorer={network.explorer}
        sourceNetwork={{
          name: network.name,
          logo: network.logo,
          key: network.chain,
        }}
      />
    </div>
    <div>
      <div class="ccip-heading">
        <h2>Tokens <span>({allTokens.length})</span></h2>
        <a class="button secondary" href="/ccip/tutorials/token-manager#verifying-your-token">Add my token</a>
      </div>

      <ChainTokenGrid tokens={allTokens} network={network} client:only="react" environment={environment} />
    </div>
  </section>
</CcipLayout>

<style scoped="false">
  .layout {
    --gutter: var(--space-10x);
    --doc-padding: var(--space-6x);
    margin: var(--space-8x) auto;
    display: flex;
    flex-direction: column;
    gap: var(--gutter);
    padding: var(--doc-padding);
  }

  .ccip-heading {
    display: flex;
    padding-bottom: var(--space-4x);
    margin-bottom: var(--space-6x);
    justify-content: space-between;
  }

  .layout h2 {
    color: var(--gray-900);
    font-size: 22px;
    line-height: var(--space-10x);
    margin-bottom: 0px;
  }

  .layout h2 span {
    color: var(--gray-400);
    font-weight: 600;
    letter-spacing: 0.5px;
  }

  .networks__grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: var(--space-2x);
  }

  @media (min-width: 50em) {
    .layout {
      max-width: min(calc(1440px - 2 * var(--space-16x)), calc(100% - 2 * var(--space-16x)));
      padding: 0;
    }
  }

  @media (min-width: 992px) {
    .layout {
      display: grid;
      --doc-padding: var(--space-10x);
      padding-top: var(--doc-padding);
      padding-bottom: var(--doc-padding);
      grid-template-columns: 1fr 1fr;
      gap: var(--space-24x);
    }

    .networks__grid {
      grid-template-columns: 1fr 1fr;
      gap: var(--space-6x);
      min-height: 420px;
    }

    .ccip-heading {
      border-bottom: 1px solid var(--gray-200);
    }
  }
</style>
