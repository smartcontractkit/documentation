---
import changelogData from "../../public/changelog.json"
import { chainNames } from "./QuickLinks/data/productChainLinks"
import { marked } from "marked"

export type Props = {
  topic: string
}

export interface ChangelogEntry {
  category: string
  date: string
  description: string
  relatedNetworks?: string[]
  relatedTokens?: Array<
    | {
        assetName: string
        baseAsset: string
        quoteAsset?: string
        network?: string
        productTypeCode?: string
        url: string
        iconUrl: string
      }
    | string
  >
  newNetworks?: Array<{
    displayName: string
    network: string
    url: string
  }>
  title: string
  topic: string
}

function isValidNetwork(entry: unknown): entry is ChangelogEntry {
  try {
    if (!entry || typeof entry !== "object") {
      console.error("Invalid entry format:", entry)
      return false
    }

    const e = entry as Partial<ChangelogEntry>

    // Required fields validation
    const requiredFields = ["category", "date", "description", "title", "topic"] as const
    for (const field of requiredFields) {
      if (!(field in e)) {
        console.error(`Missing required field "${field}" in entry:`, e)
        return false
      }
    }

    if (e.newNetworks) {
      if (!Array.isArray(e.newNetworks)) {
        console.error(`Invalid type for field "newNetworks" in entry "${e.title}": expected array`)
        return false
      }

      for (const network of e.newNetworks) {
        if (!network.displayName || !network.network || !network.url) {
          console.error(`Invalid network entry in "${e.title}": missing required fields`)
          return false
        }
      }
    }

    if (e.relatedNetworks) {
      if (!Array.isArray(e.relatedNetworks)) {
        console.error(
          `Invalid type for field "relatedNetworks" in entry "${
            e.title
          }": expected array, received ${typeof e.relatedNetworks}`
        )
        return false
      }

      for (const network of e.relatedNetworks) {
        if (!(network in chainNames)) {
          console.error(
            `Invalid relatedNetwork "${network}" in entry "${e.title}". Must be one of: ${Object.keys(chainNames).join(
              ", "
            )}`
          )
          return false
        }
      }
    }

    if (e.relatedTokens) {
      if (!Array.isArray(e.relatedTokens)) {
        console.error(
          `Invalid type for field "relatedTokens" in entry "${
            e.title
          }": expected array, received ${typeof e.relatedTokens}`
        )
        return false
      }

      for (const token of e.relatedTokens) {
        if (typeof token !== "string" && typeof token !== "object") {
          console.error(`Invalid relatedToken format in entry "${e.title}". Must be either a string or an object.`)
          return false
        }

        if (typeof token === "object" && token !== null) {
          const requiredTokenFields = ["assetName", "baseAsset", "url", "iconUrl"]
          for (const field of requiredTokenFields) {
            if (!(field in token)) {
              console.error(`Missing required field "${field}" in token for entry "${e.title}"`)
              return false
            }
          }
        }
      }
    }

    return true
  } catch (error) {
    console.error("Error validating entry:", error)
    return false
  }
}

async function loadChangelogData(): Promise<ChangelogEntry[]> {
  try {
    if (!changelogData.data || !Array.isArray(changelogData.data)) {
      console.error("Changelog data is not in the expected format:", changelogData)
      return []
    }

    return changelogData.data.filter(isValidNetwork) as ChangelogEntry[]
  } catch (error) {
    console.error("Error loading changelog data:", error)
    return []
  }
}

const { topic } = Astro.props as Props

// Load and filter the changelog entries
const changelog = await loadChangelogData()
const entries = changelog.filter((entry) => entry.topic === topic)
---

{
  entries.length > 0 ? (
    entries.map((entry) => {
      const entryId = `${entry.date}-${entry.title.toLowerCase().replace(/[^a-z0-9]+/g, "-")}`
      return (
        <section>
          <h2 id={entryId}>
            <a href={`#${entryId}`}>
              {entry.date} - {entry.title}
            </a>
          </h2>
          <article set:html={marked.parse(entry.description)} />
          {entry.newNetworks && entry.newNetworks.length > 0 && (
            <div class="new-networks">
              <ul>
                {entry.newNetworks.map((network) => (
                  <li>
                    <a href={network.url} target="_blank" rel="noopener noreferrer">
                      {network.displayName}
                    </a>
                  </li>
                ))}
              </ul>
            </div>
          )}
          {entry.relatedTokens && entry.relatedTokens.length > 0 && (
            <div class="related-tokens">
              <ul>
                {entry.relatedTokens.map((token) => {
                  if (typeof token === "string") {
                    return <li>{token}</li>
                  } else {
                    return (
                      <li>
                        <a href={token.url} target="_blank" rel="noopener noreferrer">
                          {token.assetName} ({token.baseAsset}
                          {token.quoteAsset ? ` / ${token.quoteAsset}` : ""})
                        </a>
                      </li>
                    )
                  }
                })}
              </ul>
            </div>
          )}
        </section>
      )
    })
  ) : (
    <p class="no-entries">No release notes available for this section.</p>
  )
}

<style>
  section {
    margin-bottom: 2rem;
  }

  h2 {
    margin-bottom: 1rem;
  }

  .new-networks,
  .related-tokens {
    margin-top: 1rem;
  }

  .no-entries {
    color: #666;
    font-style: italic;
  }

  ul {
    margin-left: 1.5rem;
    margin-top: 0.5rem;
  }
</style>
