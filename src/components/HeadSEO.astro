---
import { Metadata, QuickstartsFrontmatter } from "src/content.config.ts"
import { SITE, OPEN_GRAPH, PAGE } from "../config"
import { detectApiReference } from "@components/VersionSelector/utils/versions"
import { extractVersionInfo } from "@components/VersionSelector/utils/extractVersionInfo"
import VersionSelectorHead from "@components/VersionSelector/base/VersionSelectorHead.astro"
import StructuredData from "./StructuredData.astro"
import { generateStructuredData, type VersionInfo } from "~/utils/structuredData"

export interface Props {
  metadata?: Metadata
  canonicalURL: URL | string
  quickstartFrontmatter?: QuickstartsFrontmatter
}

const { metadata, canonicalURL, quickstartFrontmatter } = Astro.props
const formattedContentTitle = metadata?.title
  ? `${metadata.title} | ${SITE.title}`
  : `${PAGE.titleFallback} | ${SITE.title}`
const description = metadata?.description ?? SITE.description
const excerpt = metadata?.excerpt ?? description

// Check that the metadata image property exists, else use OPEN_GRAPH.image.src
var canonicalImageSrc = OPEN_GRAPH.image.src
if (metadata?.image) {
  const imageUrl = new URL(metadata.image, Astro.site).toString()
  const checkImgExists = async (url: string) => {
    const res = await fetch(url, { method: "head" })
    return res.status != 404
  }
  // Check that the metadata image is a valid URL, else use OPEN_GRAPH.image.src
  if (await checkImgExists(imageUrl)) {
    canonicalImageSrc = imageUrl
  }
}

// Detect if this is an API reference page and get the product
const currentPage = new URL(Astro.request.url).pathname
const { isApiReference, product, isVersioned } = detectApiReference(currentPage)

// Extract version information for API reference pages
let versionInfo: VersionInfo | undefined = undefined
if (isApiReference && product && isVersioned) {
  const extractedVersionInfo = extractVersionInfo(product, currentPage)
  if (extractedVersionInfo) {
    versionInfo = extractedVersionInfo.toVersionInfo()
  }
}

// Generate structured data
const canonicalURLObj = typeof canonicalURL === "string" ? new URL(canonicalURL) : canonicalURL

// Use quickstart frontmatter if available, otherwise use regular metadata
const structuredDataObjects = quickstartFrontmatter
  ? generateStructuredData(quickstartFrontmatter, formattedContentTitle, canonicalURLObj, currentPage)
  : generateStructuredData(
      metadata,
      formattedContentTitle,
      canonicalURLObj,
      currentPage,
      metadata?.estimatedTime,
      versionInfo
    )
---

<!-- Page Metadata -->{/* Conditional canonical: Let VersionSelectorHead handle it for versioned pages */}
{!(isApiReference && product && isVersioned) && <link rel="canonical" href={canonicalURL} />}

<!-- Version-specific SEO tags for API reference pages -->{
  isApiReference && product && isVersioned && <VersionSelectorHead product={product} currentPath={currentPage} />
}

<!-- Primary Meta Tags -->
<meta name="description" content={description} />
<meta name="keywords" content={excerpt} />

<!-- OpenGraph Tags -->
<meta property="og:title" content={formattedContentTitle} />
<meta property="og:type" content="article" />
<meta property="og:url" content={canonicalURL} />
<meta property="og:locale" content={SITE.defaultLanguage} />
<meta property="og:image" content={canonicalImageSrc} />
<meta property="og:image:alt" content={OPEN_GRAPH.image.alt} />
<meta property="og:description" content={description} />
<meta property="og:site_name" content={SITE.title} />

<!-- Twitter Tags -->
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:site" content={OPEN_GRAPH.twitter} />
<meta name="twitter:title" content={formattedContentTitle} />
<meta name="twitter:description" content={description} />
<meta name="twitter:image" content={canonicalImageSrc} />
<meta name="twitter:image:alt" content={OPEN_GRAPH.image.alt} />

<!-- PWA Icons -->
<link href="/favicon.ico" rel="shortcut icon" type="image/x-icon" />
<link href="/images/logo.png" rel="apple-touch-icon" />

<!-- Structured Data (JSON-LD) -->
<StructuredData data={structuredDataObjects} />
