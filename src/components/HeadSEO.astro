---
import { Metadata } from "~/content/config"
import { SITE, OPEN_GRAPH, PAGE } from "../config"
export interface Props {
  metadata?: Metadata
  canonicalURL: URL | string
}
const { metadata, canonicalURL } = Astro.props
const formattedContentTitle = metadata?.title
  ? `${metadata.title} | ${SITE.title}`
  : `${PAGE.titleFallback} | ${SITE.title}`
const description = metadata?.description ?? SITE.description

// Check that the metadata image property exists, else use OPEN_GRAPH.image.src
var canonicalImageSrc = OPEN_GRAPH.image.src
if (metadata?.image) {
  const imageUrl = new URL(metadata.image, Astro.site).toString()
  const checkImgExists = async (url: string) => {
    const res = await fetch(url, { method: "head" })
    return res.status != 404
  }
  // Check that the metadata image is a valid URL, else use OPEN_GRAPH.image.src
  if (await checkImgExists(imageUrl)) {
    canonicalImageSrc = imageUrl
  }
}
---

<!-- Page Metadata -->
<link rel="canonical" href={canonicalURL} />

<!-- OpenGraph Tags -->
<meta property="og:title" content={formattedContentTitle} />
<meta property="og:type" content="article" />
<meta property="og:url" content={canonicalURL} />
<meta property="og:locale" content={SITE.defaultLanguage} />
<meta property="og:image" content={canonicalImageSrc} />
<meta property="og:image:alt" content={OPEN_GRAPH.image.alt} />
<meta name="description" property="og:description" content={description} />
<meta property="og:site_name" content={SITE.title} />

<!-- Twitter Tags -->
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:site" content={OPEN_GRAPH.twitter} />
<meta name="twitter:title" content={formattedContentTitle} />
<meta name="twitter:description" content={description} />
<meta name="twitter:image" content={canonicalImageSrc} />
<meta name="twitter:image:alt" content={OPEN_GRAPH.image.alt} />

<!-- PWA Icons -->
<link href="/favicon.ico" rel="shortcut icon" type="image/x-icon" />
<link href="/images/logo.png" rel="apple-touch-icon" />

<!--
  TODO: Add json+ld data, maybe https://schema.org/APIReference makes sense?
  Docs: https://developers.google.com/search/docs/advanced/structured-data/intro-structured-data
  https://www.npmjs.com/package/schema-dts seems like a great resource for implementing this.
  Even better, there's a React component that integrates with `schema-dts`: https://github.com/google/react-schemaorg
-->
