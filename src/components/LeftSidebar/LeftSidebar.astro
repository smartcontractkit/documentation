---
import { Sections } from "~/content/config"
import { SIDEBAR, MENU, SectionContent } from "../../config"
import { flattenChildren } from "../../scripts/flatten-children"
import ActiveIcon from "./ActiveIcon.astro"
export type Props = {
  currentPage: string
  section?: Sections
}
const { currentPage, section } = Astro.props

// SIDEBAR is a flat array. Group it by sections to properly render.
const getSidebarSections = (section?: Sections) => {
  if (!section) {
    return []
  } else if (section === "global") {
    return Object.keys(SIDEBAR).flatMap((parentSection) => {
      return SIDEBAR[parentSection].map((entry: any) => ({ ...entry, parentSection }))
    })
  }
  return SIDEBAR[section] ?? []
}

const sidebarSections = getSidebarSections(section)

// Remove slashes and params
const removeSlashes = (url: string) => {
  let sanitizedUrl = url
  sanitizedUrl = sanitizedUrl.split("?parent")[0]
  if (sanitizedUrl.charAt(0) == "/") sanitizedUrl = sanitizedUrl.substr(1)
  if (sanitizedUrl.charAt(sanitizedUrl.length - 1) == "/")
    sanitizedUrl = sanitizedUrl.substr(0, sanitizedUrl.length - 1)
  return sanitizedUrl
}

const isCurrentPageMatch = (sectionUrl: string, currentPage: string, highlightAsCurrent: string[] = []): boolean => {
  const normalizedSectionUrl = removeSlashes(sectionUrl)
  const normalizedCurrentPage = removeSlashes(currentPage.slice(1))

  if (normalizedCurrentPage === normalizedSectionUrl) {
    return true
  }

  if (highlightAsCurrent.some((url) => removeSlashes(url) === normalizedCurrentPage)) {
    return true
  }

  return false
}
---

<nav aria-labelledby="grid-left">
  <ul class="nav-groups" data-sticky>
    {
      sidebarSections.map((s: { parentSection: Sections; contents: SectionContent[]; section: Sections }) => (
        <li aria-hidden={section === "global"} class={s.parentSection ? `parent-${s.parentSection}` : ""}>
          <details
            open={
              !!flattenChildren(s.contents).filter((object) =>
                isCurrentPageMatch(object.url, currentPage, object.highlightAsCurrent)
              ).length
            }
          >
            <summary class="nav-group-title">{s.section}</summary>
            <ul class="nav-group-entries">
              {s.contents &&
                s.contents.map((child) => (
                  <>
                    <li>
                      <a
                        class="nav-link"
                        href={`${Astro.site?.pathname}${child.url}`}
                        aria-current={
                          isCurrentPageMatch(child.url, currentPage, child.highlightAsCurrent) ? "page" : "false"
                        }
                      >
                        <ActiveIcon />
                        {child.title}
                      </a>
                    </li>
                    {child.children &&
                      child.children.map((childItem) => (
                        <li>
                          <a
                            class="nav-link nested"
                            href={`${Astro.site?.pathname}${childItem.url}`}
                            aria-current={isCurrentPageMatch(childItem.url, currentPage) ? "page" : "false"}
                          >
                            <ActiveIcon />
                            {childItem.title}
                          </a>
                        </li>
                      ))}
                  </>
                ))}
            </ul>
          </details>
        </li>
      ))
    }
  </ul>
</nav>

<style>
  nav {
    padding-bottom: calc(2 * var(--doc-padding));
    width: 100%;
  }

  .nav-groups {
    padding: var(--doc-padding) var(--space-8x) var(--doc-padding) 0;
    max-height: 100vh;
    max-height: 100dvh;
    top: 0;
    overflow-y: auto;
    position: sticky;
  }

  .nav-groups li {
    list-style: none;
  }

  .nav-groups > li {
    padding-top: var(--space-2x);
  }

  .nav-groups > li:first-of-type {
    padding-top: 0;
  }

  .nav-groups > li[aria-hidden="true"] {
    display: none;
  }

  .nav-group-title {
    font-size: 16px;
    font-weight: 500;
    margin-bottom: var(--space-3x);
    color: var(--blue-800);
  }

  .nav-group-entries {
    margin-bottom: var(--space-2x);
  }

  details summary {
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: var(--space-2x);
  }

  details summary::after {
    content: url(https://smartcontract.imgix.net/icons/Caret.svg?auto=compress%2Cformat);
    width: var(--space-6x);
    height: var(--space-6x);
  }

  details[open] summary::after {
    transform: rotate(180deg);
  }

  .nav-link {
    display: flex;
    align-items: center;
    gap: var(--space-2x);
    line-height: 1.5;
    font-size: 14px;
    color: var(--gray-500, #858a95);
    padding: var(--space-2x) var(--space-6x) var(--space-2x) 0;
    transition: color 100ms ease-in;
  }

  .nav-link.active,
  .nav-link:hover,
  .nav-link:focus,
  .nav-link[aria-current="page"] {
    color: var(--blue-600, #375bd2);
  }

  .nav-link[aria-current="page"] {
    font-weight: 500;
  }
  :global(:root.theme-dark) .nav-link[aria-current="page"] {
    color: hsla(var(--color-base-white), 100%, 1);
  }

  .nav-link.nested {
    padding-left: var(--space-5x);
  }
</style>

<style is:inline>
  .nav-link svg {
    min-height: 12px;
    min-width: 12px;
    opacity: 0;
  }

  .nav-link[aria-current="page"] svg {
    opacity: 1;
  }
</style>

<script>
  const attachContentScripts = () => {
    const parentSection = new URLSearchParams(window.location.search).get("parent") || "global"
    if (parentSection) {
      for (let elem of document.querySelectorAll(`.parent-${parentSection}`)) {
        elem.setAttribute("aria-hidden", "false")
      }
    }
  }

  // Runs on initial navigation
  attachContentScripts()
  // Runs on view transitions navigation
  document.addEventListener("astro:after-swap", attachContentScripts)
</script>
