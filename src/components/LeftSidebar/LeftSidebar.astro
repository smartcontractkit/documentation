---
import { Sections } from "~/content.config"
import { SIDEBAR } from "../../config"
import type { SectionEntry, SectionContent } from "../../config"
import RecursiveSidebar from "./RecursiveSidebar.astro"
import styles from "./leftSidebar.module.css"

type SectionEntryWithParent = SectionEntry & { parentSection?: string }

export type Props = {
  currentPage: string
  section?: Sections
}

const { currentPage, section } = Astro.props

// Return whichever sections we need
function getSidebarSections(section?: Sections): SectionEntryWithParent[] {
  if (!section) {
    return []
  } else if (section === "global") {
    // Flatten all sidebar entries into one array
    return Object.entries(SIDEBAR).flatMap(([parentSection, entries]) => {
      return entries?.map((entry) => ({ ...entry, parentSection })) ?? []
    })
  }
  return SIDEBAR[section] ?? []
}

/**
 * Determines if a section should be expanded based on its contents
 */
function shouldExpandTopSection(contents: SectionEntry["contents"], currentPage: string): boolean {
  const normalizedCurrentPage = removeSlashes(currentPage.slice(1))

  // Helper function to check if an item or its children match the current page exactly
  function checkItem(item: SectionContent): boolean {
    // Check if current page matches this item exactly
    if (item.url) {
      const normalizedItemUrl = removeSlashes(item.url)

      // Direct match
      if (normalizedCurrentPage === normalizedItemUrl) {
        return true
      }

      // Check highlightAsCurrent array
      if (item.highlightAsCurrent?.some((url) => normalizedCurrentPage === removeSlashes(url))) {
        return true
      }
    }

    // Check children recursively for exact matches
    if (item.children) {
      return item.children.some(checkItem)
    }

    return false
  }

  // Check all items in the section for exact matches
  return contents.some(checkItem)
}

function removeSlashes(url: string): string {
  let sanitizedUrl = url
  sanitizedUrl = sanitizedUrl.split("?parent")[0]
  if (sanitizedUrl.charAt(0) == "/") sanitizedUrl = sanitizedUrl.substr(1)
  if (sanitizedUrl.charAt(sanitizedUrl.length - 1) == "/")
    sanitizedUrl = sanitizedUrl.substr(0, sanitizedUrl.length - 1)
  return sanitizedUrl
}

const sidebarSections = getSidebarSections(section)
---

<nav aria-labelledby="grid-left" class={styles.nav}>
  <ul class={styles.navGroups} data-sticky>
    {
      sidebarSections.map((group) => (
        <li aria-hidden={section === "global"} class={group.parentSection ? `parent-${group.parentSection}` : ""}>
          <details open={shouldExpandTopSection(group.contents, currentPage)}>
            <summary class={styles.navGroupTitle}>{group.section}</summary>
            <ul class={styles.navGroupEntries}>
              <RecursiveSidebar items={group.contents} currentPage={currentPage} />
            </ul>
          </details>
        </li>
      ))
    }
  </ul>
</nav>

<style is:global>
  .nav-link svg {
    min-height: 12px;
    min-width: 12px;
    opacity: 0;
    display: none;
  }

  .nav-link[aria-current="page"] svg {
    opacity: 0;
  }
</style>

<script>
  /**
   * Handles section visibility based on URL parameters
   * - Shows/hides sections based on the 'parent' query parameter
   * - Runs on initial load and after navigation
   */
  const attachContentScripts = () => {
    const parentSection = new URLSearchParams(window.location.search).get("parent") || "global"
    if (parentSection) {
      for (let elem of document.querySelectorAll(`.parent-${parentSection}`)) {
        elem.setAttribute("aria-hidden", "false")
      }
    }
  }

  // Runs on initial navigation
  attachContentScripts()
  // Runs on view transitions navigation
  document.addEventListener("astro:after-swap", attachContentScripts)
</script>
