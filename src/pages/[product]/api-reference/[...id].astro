---
import { getCollection, render } from "astro:content"
import type { CollectionEntry } from "astro:content"
import DocsLayout from "~/layouts/DocsLayout.astro"
import { VERSIONS, type Collection } from "@config/versions"

interface RouteParams {
  params: { product: Collection; id: string }
  props: { entry: CollectionEntry<Collection> }
}

export async function getStaticPaths(): Promise<RouteParams[]> {
  const paths: RouteParams[] = []
  const vmTypes = ["evm", "svm"] // VM type list

  // Handle standard API reference path structure
  function processStandardApiPaths(
    product: Collection,
    version: string,
    fileVersion: string,
    apiEntries: CollectionEntry<Collection>[],
    paths: RouteParams[]
  ) {
    // Find version index entry
    const indexEntry = apiEntries.find(
      (entry) =>
        entry.id === `api-reference/${fileVersion}/index.mdx` ||
        entry.id === `api-reference/${fileVersion}/index.md` ||
        entry.id === `api-reference/${fileVersion}`
    )

    if (!indexEntry) return

    // Add version index route
    paths.push({
      params: { product, id: version },
      props: { entry: indexEntry },
    })

    // Find and add all other docs in this version
    const versionDocs = apiEntries.filter(
      (doc) =>
        doc.id.startsWith(`api-reference/${fileVersion}/`) &&
        !doc.id.endsWith("/index.mdx") &&
        !doc.id.endsWith("/index.md") &&
        doc.id !== `api-reference/${fileVersion}`
    )

    for (const doc of versionDocs) {
      const docPath = doc.id.replace(`api-reference/${fileVersion}/`, "").replace(/\.(md|mdx)$/, "")

      paths.push({
        params: { product, id: `${version}/${docPath}` },
        props: { entry: doc },
      })
    }
  }

  // Handle extended path structure with VM types
  function processExtendedApiPaths(
    product: Collection,
    version: string,
    fileVersion: string,
    apiEntries: CollectionEntry<Collection>[],
    paths: RouteParams[],
    vmTypes: string[]
  ) {
    for (const vmType of vmTypes) {
      // Find version index entry for this VM type
      const indexEntry = apiEntries.find(
        (entry) =>
          entry.id === `api-reference/${vmType}/${fileVersion}/index.mdx` ||
          entry.id === `api-reference/${vmType}/${fileVersion}/index.md` ||
          entry.id === `api-reference/${vmType}/${fileVersion}`
      )

      if (!indexEntry) continue

      // Add VM-specific version index route
      paths.push({
        params: { product, id: `${vmType}/${version}` },
        props: { entry: indexEntry },
      })

      // Find and add all other docs for this VM type + version
      const versionDocs = apiEntries.filter(
        (doc) =>
          doc.id.startsWith(`api-reference/${vmType}/${fileVersion}/`) &&
          !doc.id.endsWith("/index.mdx") &&
          !doc.id.endsWith("/index.md") &&
          doc.id !== `api-reference/${vmType}/${fileVersion}`
      )

      for (const doc of versionDocs) {
        const docPath = doc.id.replace(`api-reference/${vmType}/${fileVersion}/`, "").replace(/\.(md|mdx)$/, "")

        paths.push({
          params: { product, id: `${vmType}/${version}/${docPath}` },
          props: { entry: doc },
        })
      }
    }
  }

  for (const [product, versions] of Object.entries(VERSIONS)) {
    const entries = await getCollection(product as Collection)

    // Get API reference entries
    const apiEntries = entries.filter(
      (entry) => entry.id.startsWith("api-reference/") || entry.id.startsWith("api-reference/")
    )

    for (const version of versions.ALL) {
      // Convert version with dots to filesystem version (e.g., v1.5.1 -> v151)
      const fileVersion = version.replace(/\./g, "")

      // Process standard API path structure
      processStandardApiPaths(product as Collection, version, fileVersion, apiEntries, paths)

      // Process extended path structure with VM types
      processExtendedApiPaths(product as Collection, version, fileVersion, apiEntries, paths, vmTypes)
    }
  }

  return paths
}

// Page component
interface Props {
  entry: CollectionEntry<Collection>
}

const props = Astro.props as Props
const { entry } = props

const sectionMap = {
  "data-feeds": "dataFeeds",
  "chainlink-automation": "automation",
  "chainlink-functions": "chainlinkFunctions",
  "chainlink-nodes": "nodeOperator",
  "data-streams": "dataStreams",
  "chainlink-local": "chainlinkLocal",
  ccip: "ccip",
  vrf: "vrf",
} as const

type SectionType =
  | "global"
  | "ccip"
  | "automation"
  | "chainlinkFunctions"
  | "nodeOperator"
  | "dataFeeds"
  | "dataStreams"
  | "legacy"
  | "vrf"
  | "chainlinkLocal"

const section = (sectionMap[entry.collection] || "global") as SectionType
const { Content, headings } = await render(entry)
---

<DocsLayout frontmatter={{ ...entry.data, section }} {headings}>
  <Content />
</DocsLayout>
