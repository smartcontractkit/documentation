---
import DocsLayout from "~/layouts/DocsLayout.astro"
import { getCollection, render } from "astro:content"

export async function getStaticPaths() {
  const ccipEntries = await getCollection("ccip")
  const pathMap = new Map()

  // Process all entries to build URL path mapping
  for (const entry of ccipEntries) {
    const urlPath = entry.id.replace(/\.(md|mdx)$/, "")

    // Skip directory entries
    if (urlPath.startsWith("directory/")) {
      continue
    }

    // Handle API reference version format conversion (if needed)
    if (urlPath.includes("/api-reference/") && urlPath.includes("/v")) {
      const parts = urlPath.split("/")
      const versionIndex = parts.findIndex((part) => part.startsWith("v") && /^v\d+$/.test(part))

      if (versionIndex !== -1) {
        const versionPart = parts[versionIndex]
        // Convert version format if needed (v150 â†’ v1.5.0)
        if (versionPart.length === 4) {
          const formattedVersion = `v${versionPart[1]}.${versionPart[2]}.${versionPart[3]}`
          parts[versionIndex] = formattedVersion
          pathMap.set(parts.join("/"), entry)
        } else {
          pathMap.set(urlPath, entry)
        }
      } else {
        pathMap.set(urlPath, entry)
      }
    } else {
      pathMap.set(urlPath, entry)
    }
  }

  // Generate static paths
  return Array.from(pathMap.entries()).map(([urlPath, entry]) => ({
    params: { id: urlPath },
    props: { entry },
  }))
}

interface Props {
  entry: Awaited<ReturnType<typeof getCollection<"ccip">>>[number]
}

const { entry } = Astro.props
const { Content, headings } = await render(entry)
---

<DocsLayout frontmatter={entry.data} {headings}>
  <Content />
</DocsLayout>
