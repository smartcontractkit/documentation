---
import CcipLayout from "~/layouts/CcipLayout.astro"
import { getEntry } from "astro:content"
import {
  Environment,
  getAllNetworkLanes,
  getAllNetworks,
  getAllSupportedTokens,
  getChainsOfToken,
  getTokensOfChain,
  Version,
} from "~/config/data/ccip"
import TokenCard from "~/components/CCIP/Cards/TokenCard"
import ChainHero from "~/components/CCIP/ChainHero/ChainHero"
import Table from "~/components/CCIP/Tables/ChainTable"
import { getTokenIconUrl } from "~/features/utils"

export async function getStaticPaths() {
  const networks = getAllNetworks({ filter: "mainnet" })
  const pages = networks.map(({ chain }) => ({ chain }))

  return pages.map(({ chain }) => {
    return {
      params: { chain },
      props: {
        network: networks.find((network) => network.chain === chain),
      },
    }
  })
}

const entry = await getEntry("ccip", "index")
const { headings } = await entry.render()
const networks = getAllNetworks({ filter: "mainnet" })
const supportedTokens = getAllSupportedTokens({
  environment: Environment.Mainnet,
  version: Version.V1_2_0,
})

const tokens = Object.keys(supportedTokens).sort((a, b) => a.localeCompare(b, undefined, { sensitivity: "base" }))

const { network } = Astro.props

const allTokens = getTokensOfChain({
  chain: network?.chain || "",
  filter: "mainnet",
}).map((token) => {
  const logo = getTokenIconUrl(token)
  return {
    name: token,
    logo,
  }
})

const lanes = getAllNetworkLanes({
  environment: Environment.Mainnet,
  version: Version.V1_2_0,
  chain: network?.chain || "",
})
---

<CcipLayout frontmatter={entry.data} {headings}>
  <ChainHero chains={networks} tokens={allTokens} client:load network={network} />
  <section class="layout">
    <div>
      <h2>Networks <span>({lanes.length})</span></h2>

      <Table lanes={lanes} />
    </div>
    <div>
      <h2>Tokens <span>({allTokens.length})</span></h2>
      <div class="tokens__grid">
        {allTokens.map((token) => <TokenCard name={token.name} logo={token.logo} />)}
      </div>
    </div>
  </section>
</CcipLayout>

<style scoped="false">
  .layout {
    --gutter: var(--space-6x);
    --doc-padding: 2rem;
    /* margin-bottom: 0; */
    margin: var(--space-8x) auto;
    display: grid;
    grid-template-columns: 1fr;
    gap: var(--gutter);
    padding: var(--doc-padding);
  }

  .layout h2 {
    color: var(--gray-900);
    font-size: 22px;
  }

  .layout h2 span {
    color: var(--gray-400);
    font-weight: 600;
    letter-spacing: 0.5px;
  }

  .networks__grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: var(--space-8x);
  }

  .tokens__grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: var(--space-8x);
  }

  @media (min-width: 50em) {
    .layout {
      max-width: 1440px;
    }
  }

  @media (min-width: 992px) {
    .layout {
      grid-template-columns: 1fr 1fr;
      gap: var(--space-24x);
    }

    .networks__grid {
      grid-template-columns: 1fr 1fr;
      gap: var(--space-6x);
    }

    .tokens__grid {
      grid-template-columns: 1fr 1fr 1fr;
      gap: var(--space-6x);
    }
  }
</style>
