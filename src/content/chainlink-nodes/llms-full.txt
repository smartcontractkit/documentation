# https://docs.chain.link/chainlink-nodes llms-full.txt

## Chainlink Nodes Overview

Chainlink CCIP is now officially live on Solana. [View lanes and tokens.](https://docs.chain.link/ccip/directory/mainnet/chain/solana-mainnet?utm_medium=referral&utm_source=chainlink-docs&utm_campaign=solana-ccip)

On this page

# [Chainlink Nodes](https://docs.chain.link/chainlink-nodes\#overview)

Operating a Chainlink node allows you to be part of the Chainlink Network, helping developers build hybrid smart
contracts, giving them access to real-world data and services. Learn more about Chainlink nodes with our
step-by-step tutorials and documentation:

![](https://uploads-ssl.webflow.com/5e444500cbc42eeb5198206f/5e7898724c71bddf6749df17_DeFi2.svg)

### Set Up a Chainlink Node

Install and Run your own node on a local machine or remote server.

[Learn More ![Right arrow](https://docs.chain.link/images/card-icons/navigation-arrow-right.svg)](https://docs.chain.link/chainlink-nodes/v1/running-a-chainlink-node)

![](https://uploads-ssl.webflow.com/5e444500cbc42eeb5198206f/5e7898724c71bd62c149df16_Example.svg)

### Fulfill Your First Job Request

Deploy an Oracle contract and make job requests to your node.

[Learn More ![Right arrow](https://docs.chain.link/images/card-icons/navigation-arrow-right.svg)](https://docs.chain.link/chainlink-nodes/v1/fulfilling-requests)

![](https://uploads-ssl.webflow.com/5e444500cbc42eeb5198206f/5e7894ddbc6262c7a18da684_RequestSmall.svg)

### Add External Adapters to Your Node

Bring high-quality data and premium web APIs to contract developers.

[Learn More ![Right arrow](https://docs.chain.link/images/card-icons/navigation-arrow-right.svg)](https://docs.chain.link/chainlink-nodes/external-adapters/node-operators)

![](https://docs.chain.link/images/card-icons/5f96ab4b4db522072b7ff30c_book-bookmark.svg)

## New to Chainlink and Smart Contracts?

Learn the basics in the Getting Started Guide. Build your first smart contract on Ethereum.

[Getting Started Guide](https://docs.chain.link/getting-started/conceptual-overview/)

## Get the latest Chainlink content straight to your inbox.

Email Address

[iframe](https://td.doubleclick.net/td/rul/346357746?random=1748840198005&cv=11&fst=1748840198005&fmt=3&bg=ffffff&guid=ON&async=1&gcl_ctr=1&gtm=45be55s2v891173849z8847174275za200zb847174275&gcd=13l3l3l3l1l1&dma=0&tag_exp=101509157~102938614~103116026~103200004~103233427~103252644~103252646~103351866~103351868~104481633~104481635~104559073~104559075~104612245~104612247~103308613&ptag_exp=101509157~103116026~103200004~103233427~103252644~103252646~103351866~103351868~104481633~104481635~104559073~104559075~104612245~104612247&u_w=1280&u_h=1024&url=https%3A%2F%2Fdocs.chain.link%2Fchainlink-nodes&_ng=1&label=_duuCKn_k4cYEPL_k6UB&hn=www.googleadservices.com&frm=0&tiba=Chainlink%20Nodes%20%7C%20Chainlink%20Documentation&value=0&bttype=purchase&npa=0&pscdl=noapi&auid=439106528.1748840198&uaa=x86&uab=64&uafvl=Google%2520Chrome%3B137.0.7151.55%7CChromium%3B137.0.7151.55%7CNot%252FA)Brand%3B24.0.0.0&uamb=0&uam=&uap=Linux%20x86_64&uapv=6.6.72&uaw=0&ec_mode=a&fledge=1&capi=1&_tu=Cg&em=tv.1&ct_cookie_present=0)

## Chainlink Operator Contracts
[iframe](https://www.googletagmanager.com/ns.html?id=GTM-N6DQ47T)

Chainlink CCIP is now officially live on Solana. [View lanes and tokens.](https://docs.chain.link/ccip/directory/mainnet/chain/solana-mainnet?utm_medium=referral&utm_source=chainlink-docs&utm_campaign=solana-ccip)

On this page

# [Operator](https://docs.chain.link/chainlink-nodes/contracts/operator\#overview)

Oracles must deploy an onchain contract to handle requests made through the LINK token (Read [Basic Request Model](https://docs.chain.link/architecture-overview/architecture-request-model) to learn more).

When the _Basic Request_ model was introduced, node operators had to deploy the legacy [Oracle contract](https://github.com/smartcontractkit/chainlink/blob/contracts-v1.0.0/contracts/src/v0.4/Oracle.sol). However, these come with some limitations, and soon, we introduced [operator contracts](https://github.com/smartcontractkit/chainlink/blob/contracts-v1.3.0/contracts/src/v0.8/operatorforwarder/Operator.sol).

In addition to replacing oracle contracts, operator contracts come with additional features that add more security and flexibility for node operators.

## [Features](https://docs.chain.link/chainlink-nodes/contracts/operator\#features)

### [Multi-word response](https://docs.chain.link/chainlink-nodes/contracts/operator\#multi-word-response)

In the EVM architecture, a word is made up of 32 bytes. One limitation of the [Oracle.sol](https://github.com/smartcontractkit/chainlink/blob/contracts-v1.0.0/contracts/src/v0.4/Oracle.sol) contract is that it limits responses to requests to 32 bytes.

[Operator.sol](https://github.com/smartcontractkit/chainlink/blob/contracts-v1.3.0/contracts/src/v0.8/operatorforwarder/Operator.sol) doesn't have the same limitation as it supports a response made of multiple EVM words.

### [Factory deployment](https://docs.chain.link/chainlink-nodes/contracts/operator\#factory-deployment)

To deploy an _Oracle_ contract, each node operator has to manually compile and deploy [Oracle.sol](https://github.com/smartcontractkit/chainlink/blob/contracts-v1.0.0/contracts/src/v0.4/Oracle.sol).
The vast number of Solidity versions and steps involved in verifying the contract made it difficult for a client to verify that the deployed contract had not been tampered with.
To fix this, node operators can use a [factory](https://docs.chain.link/chainlink-nodes/contracts/operatorfactory) to deploy an instance of the _operator_ contract. Moreover, the factory exposes a getter for clients to check if it deployed a specific _operator_ contract address.

### [Distributing funds to multiple addresses](https://docs.chain.link/chainlink-nodes/contracts/operator\#distributing-funds-to-multiple-addresses)

A common pain point of node operators is keeping their addresses funded. _Operator_'s `distributeFunds` method allows node operators to fund multiple addresses in a single transaction.

### [Flexibility and security](https://docs.chain.link/chainlink-nodes/contracts/operator\#flexibility-and-security)

By using multiple externally-owned accounts (EOAs) on Chainlink nodes and [forwarder](https://docs.chain.link/chainlink-nodes/contracts/forwarder) contracts, node operators can set up different transaction-sending strategies.

As discussed in the [forwarder](https://docs.chain.link/chainlink-nodes/contracts/forwarder) contracts page:

- Chainlink nodes' EOAs are hot wallets that fulfill requests.
- These EOAs can be associated with one or multiple [forwarder](https://docs.chain.link/chainlink-nodes/contracts/forwarder) contracts. The forwarder's owner must whitelist them to call the [forward](https://docs.chain.link/chainlink-nodes/contracts/forwarder#forward) function. One operator contract owns one or multiple forwarder contracts.
- Node operators manage their forwarder contracts through operator contracts. They use a secure wallet such as hardware or a multisig wallet as the operator's owner account.

## [API reference](https://docs.chain.link/chainlink-nodes/contracts/operator\#api-reference)

The operator contract inherits [AuthorizedReceiver](https://github.com/smartcontractkit/chainlink/blob/contracts-v1.3.0/contracts/src/v0.8/operatorforwarder/AuthorizedReceiver.sol) and [ConfirmedOwnerWithProposal](https://github.com/smartcontractkit/chainlink/blob/contracts-v1.3.0/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol). Read [AuthorizedReceiver](https://docs.chain.link/chainlink-nodes/contracts/receiver) and [ConfirmedOwnerWithProposal](https://docs.chain.link/chainlink-nodes/contracts/ownership) API references.

### [Methods](https://docs.chain.link/chainlink-nodes/contracts/operator\#methods)

#### [oracleRequest](https://docs.chain.link/chainlink-nodes/contracts/operator\#oraclerequest)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```solidity
function oracleRequest(address sender, uint256 payment, bytes32 specId, address callbackAddress, bytes4 callbackFunctionId, uint256 nonce, uint256 dataVersion, bytes data) external

```

Creates the Chainlink request. This is backwards compatible API with [Oracle.sol contracts](https://github.com/smartcontractkit/chainlink/blob/contracts-v1.0.0/contracts/src/v0.4/Oracle.sol), but the behavior changes because `callbackAddress` is assumed to be the same as the request sender.

##### [Parameters](https://docs.chain.link/chainlink-nodes/contracts/operator\#parameters)

| Name | Type | Description |
| --- | --- | --- |
| sender | address | The sender of the request |
| payment | uint256 | The amount of payment given (specified in wei) |
| specId | bytes32 | The Job Specification ID |
| callbackAddress | address | The consumer of the request |
| callbackFunctionId | bytes4 | The callback function ID for the response |
| nonce | uint256 | The nonce sent by the requester |
| dataVersion | uint256 | The specified data version |
| data | bytes | The extra request parameters |

#### [operatorRequest](https://docs.chain.link/chainlink-nodes/contracts/operator\#operatorrequest)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```solidity
function operatorRequest(address sender, uint256 payment, bytes32 specId, bytes4 callbackFunctionId, uint256 nonce, uint256 dataVersion, bytes data) external

```

Creates the Chainlink request. Stores the hash of the params as the onchain commitment for the request. Emits [OracleRequest](https://docs.chain.link/chainlink-nodes/contracts/operator#oraclerequest-1) event for the Chainlink node to detect.

##### [Parameters](https://docs.chain.link/chainlink-nodes/contracts/operator\#parameters-1)

| Name | Type | Description |
| --- | --- | --- |
| sender | address | The sender of the request |
| payment | uint256 | The amount of payment given (specified in wei) |
| specId | bytes32 | The Job Specification ID |
| callbackFunctionId | bytes4 | The callback function ID for the response |
| nonce | uint256 | The nonce sent by the requester |
| dataVersion | uint256 | The specified data version |
| data | bytes | The extra request parameters |

#### [fulfillOracleRequest](https://docs.chain.link/chainlink-nodes/contracts/operator\#fulfilloraclerequest)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```solidity
function fulfillOracleRequest(bytes32 requestId, uint256 payment, address callbackAddress, bytes4 callbackFunctionId, uint256 expiration, bytes32 data) external returns (bool)

```

Called by the Chainlink node to fulfill requests. Given params must hash back to the commitment stored from `oracleRequest`. Will call the callback address' callback function without bubbling up error checking in a `require` so that the node can get paid. Emits [OracleResponse](https://docs.chain.link/chainlink-nodes/contracts/operator#oracleresponse) event.

##### [Parameters](https://docs.chain.link/chainlink-nodes/contracts/operator\#parameters-2)

| Name | Type | Description |
| --- | --- | --- |
| requestId | bytes32 | The fulfillment request ID that must match the requester's |
| payment | uint256 | The payment amount that will be released for the oracle (specified in wei) |
| callbackAddress | address | The callback address to call for fulfillment |
| callbackFunctionId | bytes4 | The callback function ID to use for fulfillment |
| expiration | uint256 | The expiration that the node should respond by before the requester can cancel |
| data | bytes32 | The data to return to the consuming contract |

##### [Return values](https://docs.chain.link/chainlink-nodes/contracts/operator\#return-values)

| Name | Type | Description |
| --- | --- | --- |
|  | bool | Status if the external call was successful |

#### [fulfillOracleRequest2](https://docs.chain.link/chainlink-nodes/contracts/operator\#fulfilloraclerequest2)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```solidity
function fulfillOracleRequest2(bytes32 requestId, uint256 payment, address callbackAddress, bytes4 callbackFunctionId, uint256 expiration, bytes data) external returns (bool)

```

Called by the Chainlink node to fulfill requests with multi-word support. Given params must hash back to the commitment stored from `oracleRequest`. Will call the callback address' callback function without bubbling up error checking in a `require` so that the node can get paid. Emits [OracleResponse](https://docs.chain.link/chainlink-nodes/contracts/operator#oracleresponse) event.

##### [Parameters](https://docs.chain.link/chainlink-nodes/contracts/operator\#parameters-3)

| Name | Type | Description |
| --- | --- | --- |
| requestId | bytes32 | The fulfillment request ID that must match the requester's |
| payment | uint256 | The payment amount that will be released for the oracle (specified in wei) |
| callbackAddress | address | The callback address to call for fulfillment |
| callbackFunctionId | bytes4 | The callback function ID to use for fulfillment |
| expiration | uint256 | The expiration that the node should respond by before the requester can cancel |
| data | bytes | The data to return to the consuming contract |

##### [Return values](https://docs.chain.link/chainlink-nodes/contracts/operator\#return-values-1)

| Name | Type | Description |
| --- | --- | --- |
|  | bool | Status if the external call was successful |

#### [transferOwnableContracts](https://docs.chain.link/chainlink-nodes/contracts/operator\#transferownablecontracts)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```solidity
function transferOwnableContracts(address[] ownable, address newOwner) external

```

Transfer the ownership of ownable contracts. This is primarily intended for authorized forwarders but could possibly be extended to work with future contracts.

##### [Parameters](https://docs.chain.link/chainlink-nodes/contracts/operator\#parameters-4)

| Name | Type | Description |
| --- | --- | --- |
| ownable | address\[\] | list of addresses to transfer |
| newOwner | address | address to transfer ownership to |

#### [acceptOwnableContracts](https://docs.chain.link/chainlink-nodes/contracts/operator\#acceptownablecontracts)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```solidity
function acceptOwnableContracts(address[] ownable) public

```

Accept the ownership of an ownable contract. This is primarily intended for authorized forwarders but could possibly be extended to work with future contracts. Emits [OwnableContractAccepted](https://docs.chain.link/chainlink-nodes/contracts/operator#ownablecontractaccepted) event.

_Must be the pending owner on the contract_

##### [Parameters](https://docs.chain.link/chainlink-nodes/contracts/operator\#parameters-5)

| Name | Type | Description |
| --- | --- | --- |
| ownable | address\[\] | list of addresses of Ownable contracts to accept |

#### [setAuthorizedSendersOn](https://docs.chain.link/chainlink-nodes/contracts/operator\#setauthorizedsenderson)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```solidity
function setAuthorizedSendersOn(address[] targets, address[] senders) public

```

Sets the fulfillment permission for `senders` on `targets`. Emits [TargetsUpdatedAuthorizedSenders](https://docs.chain.link/chainlink-nodes/contracts/operator#targetsupdatedauthorizedsenders) event.

##### [Parameters](https://docs.chain.link/chainlink-nodes/contracts/operator\#parameters-6)

| Name | Type | Description |
| --- | --- | --- |
| targets | address\[\] | The addresses to set permissions on |
| senders | address\[\] | The addresses that are allowed to send updates |

#### [acceptAuthorizedReceivers](https://docs.chain.link/chainlink-nodes/contracts/operator\#acceptauthorizedreceivers)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```solidity
function acceptAuthorizedReceivers(address[] targets, address[] senders) external

```

Accepts ownership of ownable contracts and then immediately sets the authorized sender list on each of the newly owned contracts. This is primarily intended for authorized forwarders but could possibly be extended to work with future contracts.

##### [Parameters](https://docs.chain.link/chainlink-nodes/contracts/operator\#parameters-7)

| Name | Type | Description |
| --- | --- | --- |
| targets | address\[\] | The addresses to set permissions on |
| senders | address\[\] | The addresses that are allowed to send updates |

#### [withdraw](https://docs.chain.link/chainlink-nodes/contracts/operator\#withdraw)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```solidity
function withdraw(address recipient, uint256 amount) external

```

Allows the node operator to withdraw earned LINK to a given address `recipient`.

_The owner of the contract can be another wallet and does not have to be a Chainlink node_

##### [Parameters](https://docs.chain.link/chainlink-nodes/contracts/operator\#parameters-8)

| Name | Type | Description |
| --- | --- | --- |
| recipient | address | The address to send the LINK token to |
| amount | uint256 | The amount to send (specified in wei) |

#### [withdrawable](https://docs.chain.link/chainlink-nodes/contracts/operator\#withdrawable)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```solidity
function withdrawable() external view returns (uint256)

```

Displays the amount of LINK that is available for the node operator to withdraw.

_We use `1` in place of 0 in storage_

##### [Return values](https://docs.chain.link/chainlink-nodes/contracts/operator\#return-values-2)

| Name | Type | Description |
| --- | --- | --- |
|  | uint256 | The amount of withdrawable LINK on the contract |

#### [ownerForward](https://docs.chain.link/chainlink-nodes/contracts/operator\#ownerforward)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```solidity
function ownerForward(address to, bytes data) external

```

Forward a call to another contract.

_Only callable by the owner_

##### [Parameters](https://docs.chain.link/chainlink-nodes/contracts/operator\#parameters-9)

| Name | Type | Description |
| --- | --- | --- |
| to | address | address |
| data | bytes | to forward |

#### [ownerTransferAndCall](https://docs.chain.link/chainlink-nodes/contracts/operator\#ownertransferandcall)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```solidity
function ownerTransferAndCall(address to, uint256 value, bytes data) external returns (bool success)

```

Interact with other LinkTokenReceiver contracts by calling transferAndCall.

##### [Parameters](https://docs.chain.link/chainlink-nodes/contracts/operator\#parameters-10)

| Name | Type | Description |
| --- | --- | --- |
| to | address | The address to transfer to. |
| value | uint256 | The amount to be transferred. |
| data | bytes | The extra data to be passed to the receiving contract. |

##### [Return values](https://docs.chain.link/chainlink-nodes/contracts/operator\#return-values-3)

| Name | Type | Description |
| --- | --- | --- |
| success | bool | bool |

#### [distributeFunds](https://docs.chain.link/chainlink-nodes/contracts/operator\#distributefunds)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```solidity
function distributeFunds(address payable[] receivers, uint256[] amounts) external payable

```

Distribute funds to multiple addresses using ETH sent to this payable function.

Array length must be equal, ETH sent must equal the sum of amounts. A malicious receiver could cause the distribution to revert, in which case it is expected that the address is removed from the list.

##### [Parameters](https://docs.chain.link/chainlink-nodes/contracts/operator\#parameters-11)

| Name | Type | Description |
| --- | --- | --- |
| receivers | address payable\[\] | list of addresses |
| amounts | uint256\[\] | list of amounts |

#### [cancelOracleRequest](https://docs.chain.link/chainlink-nodes/contracts/operator\#canceloraclerequest)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```solidity
function cancelOracleRequest(bytes32 requestId, uint256 payment, bytes4 callbackFunc, uint256 expiration) external

```

Allows recipient to cancel requests sent to this oracle contract. Will transfer the LINK sent for the request back to the recipient address. Given params must hash to a commitment stored on the contract in order for the request to be valid. Emits [CancelOracleRequest](https://docs.chain.link/chainlink-nodes/contracts/operator#canceloraclerequest-1) event.

##### [Parameters](https://docs.chain.link/chainlink-nodes/contracts/operator\#parameters-12)

| Name | Type | Description |
| --- | --- | --- |
| requestId | bytes32 | The request ID |
| payment | uint256 | The amount of payment given (specified in wei) |
| callbackFunc | bytes4 | The requester's specified callback function selector |
| expiration | uint256 | The time of the expiration for the request |

#### [cancelOracleRequestByRequester](https://docs.chain.link/chainlink-nodes/contracts/operator\#canceloraclerequestbyrequester)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```solidity
function cancelOracleRequestByRequester(uint256 nonce, uint256 payment, bytes4 callbackFunc, uint256 expiration) external

```

Allows requester to cancel requests sent to this oracle contract. Will transfer the LINK sent for the request back to the recipient address. Given params must hash to a commitment stored on the contract in order for the request to be valid. Emits [CancelOracleRequest](https://docs.chain.link/chainlink-nodes/contracts/operator#canceloraclerequest-1) event.

##### [Parameters](https://docs.chain.link/chainlink-nodes/contracts/operator\#parameters-13)

| Name | Type | Description |
| --- | --- | --- |
| nonce | uint256 | The nonce used to generate the request ID |
| payment | uint256 | The amount of payment given (specified in wei) |
| callbackFunc | bytes4 | The requester's specified callback function selector |
| expiration | uint256 | The time of the expiration for the request |

#### [getChainlinkToken](https://docs.chain.link/chainlink-nodes/contracts/operator\#getchainlinktoken)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```solidity
function getChainlinkToken() public view returns (address)

```

Returns the address of the LINK token

This is the public implementation for chainlinkTokenAddress, which is
an internal method of the ChainlinkClient contract.

### [Events](https://docs.chain.link/chainlink-nodes/contracts/operator\#events)

#### [OracleRequest](https://docs.chain.link/chainlink-nodes/contracts/operator\#oraclerequest-1)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```solidity
event OracleRequest(bytes32 specId, address requester, bytes32 requestId, uint256 payment, address callbackAddr, bytes4 callbackFunctionId, uint256 cancelExpiration, uint256 dataVersion, bytes data)

```

#### [CancelOracleRequest](https://docs.chain.link/chainlink-nodes/contracts/operator\#canceloraclerequest-1)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```solidity
event CancelOracleRequest(bytes32 requestId)

```

#### [OracleResponse](https://docs.chain.link/chainlink-nodes/contracts/operator\#oracleresponse)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```solidity
event OracleResponse(bytes32 requestId)

```

#### [OwnableContractAccepted](https://docs.chain.link/chainlink-nodes/contracts/operator\#ownablecontractaccepted)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```solidity
event OwnableContractAccepted(address acceptedContract)

```

#### [TargetsUpdatedAuthorizedSenders](https://docs.chain.link/chainlink-nodes/contracts/operator\#targetsupdatedauthorizedsenders)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```solidity
event TargetsUpdatedAuthorizedSenders(address[] targets, address[] senders, address changedBy)

```

## Get the latest Chainlink content straight to your inbox.

Email Address

[iframe](https://td.doubleclick.net/td/rul/346357746?random=1748840198047&cv=11&fst=1748840198047&fmt=3&bg=ffffff&guid=ON&async=1&gcl_ctr=1&gtm=45be55s2v891173849z8847174275za200zb847174275&gcd=13l3l3l3l1l1&dma=0&tag_exp=101509157~102938614~103116026~103200004~103233427~103252644~103252646~103351866~103351868~104481633~104481635~104559073~104559075~104612245~104612247~103308614&ptag_exp=101509157~103116026~103200004~103233427~103252644~103252646~103351866~103351868~104481633~104481635~104559073~104559075~104612245~104612247&u_w=1280&u_h=1024&url=https%3A%2F%2Fdocs.chain.link%2Fchainlink-nodes%2Fcontracts%2Foperator&_ng=1&label=_duuCKn_k4cYEPL_k6UB&hn=www.googleadservices.com&frm=0&tiba=Operator%20%7C%20Chainlink%20Documentation&value=0&bttype=purchase&npa=0&pscdl=noapi&auid=597450807.1748840198&uaa=x86&uab=64&uafvl=Google%2520Chrome%3B137.0.7151.55%7CChromium%3B137.0.7151.55%7CNot%252FA)Brand%3B24.0.0.0&uamb=0&uam=&uap=Linux%20x86_64&uapv=6.6.72&uaw=0&ec_mode=a&fledge=1&capi=1&_tu=Cg&em=tv.1&ct_cookie_present=0)

## Chainlink Operator Factory
[iframe](https://www.googletagmanager.com/ns.html?id=GTM-N6DQ47T)

Chainlink CCIP is now officially live on Solana. [View lanes and tokens.](https://docs.chain.link/ccip/directory/mainnet/chain/solana-mainnet?utm_medium=referral&utm_source=chainlink-docs&utm_campaign=solana-ccip)

On this page

# [Operator Factory](https://docs.chain.link/chainlink-nodes/contracts/operatorfactory\#overview)

The [factory](https://www.youtube.com/watch?v=Q1zZo4O_Ong) design pattern is a well know programming pattern: Rather than compiling and creating instances of a contract yourself, the _factory_ does it for you.
As explained in the [operator guide](https://docs.chain.link/chainlink-nodes/contracts/operator), the `OperatorFactory` contract comes with these benefits:

- Node operators do not need to manually compile and deploy [operator](https://docs.chain.link/chainlink-nodes/contracts/operator) or/and [forwarder](https://docs.chain.link/chainlink-nodes/contracts/forwarder) contracts. They can deploy them directly from the factory. See the [deploynewoperator](https://docs.chain.link/chainlink-nodes/contracts/operatorfactory#deploynewoperator), [deploynewforwarder](https://docs.chain.link/chainlink-nodes/contracts/operatorfactory#deploynewforwarder), and [deploynewoperatorandforwarder](https://docs.chain.link/chainlink-nodes/contracts/operatorfactory#deploynewoperatorandforwarder) functions.
- Clients can verify if the factory deployed a given contract. See the [created](https://docs.chain.link/chainlink-nodes/contracts/operatorfactory#created) function.

## [API Reference](https://docs.chain.link/chainlink-nodes/contracts/operatorfactory\#api-reference)

### [Methods](https://docs.chain.link/chainlink-nodes/contracts/operatorfactory\#methods)

#### [typeAndVersion](https://docs.chain.link/chainlink-nodes/contracts/operatorfactory\#typeandversion)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```solidity
function typeAndVersion() external pure virtual returns (string)

```

The type and version of this contract.

##### [Return values](https://docs.chain.link/chainlink-nodes/contracts/operatorfactory\#return-values)

| Name | Type | Description |
| --- | --- | --- |
|  | string | Type and version string |

#### [deployNewOperator](https://docs.chain.link/chainlink-nodes/contracts/operatorfactory\#deploynewoperator)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```solidity
function deployNewOperator() external returns (address)

```

Creates a new operator contract with the msg.sender as owner. Emits `OperatorCreated` event.

#### [deployNewOperatorAndForwarder](https://docs.chain.link/chainlink-nodes/contracts/operatorfactory\#deploynewoperatorandforwarder)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```solidity
function deployNewOperatorAndForwarder() external returns (address, address)

```

Creates a new operator contract with the msg.sender as the owner and a new forwarder with the operator as the owner. Emits:

- [OperatorCreated](https://docs.chain.link/chainlink-nodes/contracts/operatorfactory#operatorcreated) event.
- [AuthorizedForwarderCreated](https://docs.chain.link/chainlink-nodes/contracts/operatorfactory#authorizedforwardercreated) event.

#### [deployNewForwarder](https://docs.chain.link/chainlink-nodes/contracts/operatorfactory\#deploynewforwarder)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```solidity
function deployNewForwarder() external returns (address)

```

Creates a new forwarder contract with the msg.sender as owner. Emits [AuthorizedForwarderCreated](https://docs.chain.link/chainlink-nodes/contracts/operatorfactory#authorizedforwardercreated) event.

#### [deployNewForwarderAndTransferOwnership](https://docs.chain.link/chainlink-nodes/contracts/operatorfactory\#deploynewforwarderandtransferownership)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```solidity
function deployNewForwarderAndTransferOwnership(address to, bytes message) external returns (address)

```

Creates a new forwarder contract with the msg.sender as owner. Emits [AuthorizedForwarderCreated](https://docs.chain.link/chainlink-nodes/contracts/operatorfactory#authorizedforwardercreated) event.

#### [created](https://docs.chain.link/chainlink-nodes/contracts/operatorfactory\#created)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```solidity
function created(address query) external view returns (bool)

```

Indicates whether this factory deployed an address.

### [Events](https://docs.chain.link/chainlink-nodes/contracts/operatorfactory\#events)

#### [OperatorCreated](https://docs.chain.link/chainlink-nodes/contracts/operatorfactory\#operatorcreated)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```solidity
event OperatorCreated(address operator, address owner, address sender)

```

#### [AuthorizedForwarderCreated](https://docs.chain.link/chainlink-nodes/contracts/operatorfactory\#authorizedforwardercreated)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```solidity
event AuthorizedForwarderCreated(address forwarder, address owner, address sender)

```

## Get the latest Chainlink content straight to your inbox.

Email Address

[iframe](https://td.doubleclick.net/td/rul/346357746?random=1748840197919&cv=11&fst=1748840197919&fmt=3&bg=ffffff&guid=ON&async=1&gcl_ctr=1&gtm=45be55s2v891173849z8847174275za200zb847174275&gcd=13l3l3l3l1l1&dma=0&tag_exp=101509157~103116026~103200004~103233427~103252644~103252646~103351869~103351871~104481633~104481635~104559073~104559075~104612245~104612247~103308613&ptag_exp=101509157~103116026~103200004~103233427~103252644~103252646~103351869~103351871~104481633~104481635~104559073~104559075~104612245~104612247&u_w=1280&u_h=1024&url=https%3A%2F%2Fdocs.chain.link%2Fchainlink-nodes%2Fcontracts%2Foperatorfactory&_ng=1&label=_duuCKn_k4cYEPL_k6UB&hn=www.googleadservices.com&frm=0&tiba=Operator%20Factory%20%7C%20Chainlink%20Documentation&value=0&bttype=purchase&npa=0&pscdl=noapi&auid=773730390.1748840198&uaa=x86&uab=64&uafvl=Google%2520Chrome%3B137.0.7151.55%7CChromium%3B137.0.7151.55%7CNot%252FA)Brand%3B24.0.0.0&uamb=0&uam=&uap=Linux%20x86_64&uapv=6.6.72&uaw=0&ec_mode=a&fledge=1&capi=1&_tu=Cg&em=tv.1&ct_cookie_present=0)

## Chainlink Node Requirements
[iframe](https://www.googletagmanager.com/ns.html?id=GTM-N6DQ47T)

Chainlink CCIP is now officially live on Solana. [View lanes and tokens.](https://docs.chain.link/ccip/directory/mainnet/chain/solana-mainnet?utm_medium=referral&utm_source=chainlink-docs&utm_campaign=solana-ccip)

On this page

# [Requirements](https://docs.chain.link/chainlink-nodes/resources/requirements\#overview)

## [Hardware](https://docs.chain.link/chainlink-nodes/resources/requirements\#hardware)

The requirements for running a Chainlink node scale with the as the number of jobs that your node services. CPUs with the x86 architecture is recommended for production environments, but you can use Apple M1 systems for development if you run the Chainlink node in Docker.

- Minimum: At least **2 CPU cores** and **4 GB of RAM** will allow you to get a node running for testing and basic development.
- Recommended: For nodes in a production environment with over 100 jobs, you will need at least **4 CPU cores** and **8GB of RAM**.

If you run your PostgreSQL database locally, you will need additional hardware. To support more than 100 jobs, your database server will need at least **4 cores**, **16 GB of RAM**, and **100 GB of storage**.

If you run your node on AWS or another cloud platform, use a VM instance type with dedicated core time. [Burstable Performance Instances](https://aws.amazon.com/ec2/instance-types/#Burstable_Performance_Instances) and VM instances with shared cores often have a limited number of [CPU credits](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-credits-baseline-concepts.html), which do not perform well for Chainlink nodes that require consistent performance.

## [Software](https://docs.chain.link/chainlink-nodes/resources/requirements\#software)

Chainlink nodes have the following software dependencies:

- Operating System: Linux, MacOS, or the [WSL](https://learn.microsoft.com/en-us/windows/wsl/about) (Windows Subsystem for Linux)

  - For production environments, Linux is recommended.
- Docker: Although it is possible to [build Chainlink nodes from source](https://github.com/smartcontractkit/chainlink), the best practice is to use the [Chainlink Docker Images](https://hub.docker.com/r/smartcontract/chainlink/tags) without `-root`.
- [PostgreSQL](https://wiki.postgresql.org/wiki/Detailed_installation_guides) versions `>= 12` (Version 12 and later).

  - If you use a database as a service, your database host must provide access to logs.
  - If you run the database on a separate system, [secure the TCP/IP connection with SSL](https://www.postgresql.org/docs/15/ssl-tcp.html).

## [Blockchain connectivity](https://docs.chain.link/chainlink-nodes/resources/requirements\#blockchain-connectivity)

Chainlink nodes require a fully-synced network client so that they can run onchain transactions and interact with deployed contracts. For Ethereum, see the list of [supported clients](https://github.com/smartcontractkit/chainlink#ethereum-execution-client-requirements). Other L1s, L2s, and side-chains use different clients. See your network's documentation to learn how to run a client for your specific network.

The client must meet the following requirements:

- You can use a provider like Alchemy or Infura, but running your own client can provide lower latency and greater decentralization.
- Run your Chainlink nodes on their own separate VM or system. Hardware and storage requirements for these clients will change over time, so you will likely need to scale their capacity separately from the system where you run your Chainlink nodes.
- The client must provide both HTTP and WebSocket connections secured with SSL. Most providers give you `https://` and `wss://` connections by default. If you run your own client, you must create a reverse proxy for your client using a web server like [Nginx](https://www.nginx.com/). The web server handles the SSL encryption and forwards the connection to your client.

See [Running Ethereum Clients](https://docs.chain.link/chainlink-nodes/resources/run-an-ethereum-client) for more details.

## Get the latest Chainlink content straight to your inbox.

Email Address

[iframe](https://td.doubleclick.net/td/rul/346357746?random=1748840198295&cv=11&fst=1748840198295&fmt=3&bg=ffffff&guid=ON&async=1&gcl_ctr=1&gtm=45be55s2v891173849z8847174275za200zb847174275&gcd=13l3l3l3l1l1&dma=0&tag_exp=101509157~103116026~103200004~103233427~103252644~103252646~103351869~103351871~104481633~104481635~104559073~104559075~104612245~104612247&ptag_exp=101509157~102938614~103116026~103200004~103233427~103252644~103252646~103351869~103351871~104481633~104481635~104559073~104559075~104612245~104612247&u_w=1280&u_h=1024&url=https%3A%2F%2Fdocs.chain.link%2Fchainlink-nodes%2Fresources%2Frequirements&_ng=1&label=_duuCKn_k4cYEPL_k6UB&hn=www.googleadservices.com&frm=0&tiba=Requirements%20%7C%20Chainlink%20Documentation&value=0&bttype=purchase&npa=0&pscdl=noapi&auid=310880166.1748840198&uaa=x86&uab=64&uafvl=Google%2520Chrome%3B137.0.7151.55%7CChromium%3B137.0.7151.55%7CNot%252FA)Brand%3B24.0.0.0&uamb=0&uam=&uap=Linux%20x86_64&uapv=6.6.72&uaw=0&ec_mode=a&fledge=1&capi=1&_tu=Cg&em=tv.1&ct_cookie_present=0)

## Chainlink Node Management
[iframe](https://www.googletagmanager.com/ns.html?id=GTM-N6DQ47T)

Chainlink CCIP is now officially live on Solana. [View lanes and tokens.](https://docs.chain.link/ccip/directory/mainnet/chain/solana-mainnet?utm_medium=referral&utm_source=chainlink-docs&utm_campaign=solana-ccip)

On this page

# [Miscellaneous](https://docs.chain.link/chainlink-nodes/resources/miscellaneous\#overview)

## [Execute Commands Running Docker](https://docs.chain.link/chainlink-nodes/resources/miscellaneous\#execute-commands-running-docker)

In order to interact with the node's CLI commands, you need to be authenticated. This means that you need to access a shell within the Chainlink node's running container first. You can obtain the running container's `NAME` by running:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
docker ps

```

The output will look similar to:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```plaintext
CONTAINER ID        IMAGE                     COMMAND                  CREATED             STATUS              PORTS                              NAMES
436882efd51d        smartcontract/chainlink   "./chainlink-launche…"   33 minutes ago      Up 21 minutes       6688/tcp, 0.0.0.0:6688->6688/tcp   chainlink

```

The last item, `chainlink`, is the name of the running container (using `--name chainlink` in your `docker run` command will give you a common name). Accessing a shell for this container is accomplished by running:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
docker exec -it chainlink /bin/bash

```

This changes the prompt to something similar to:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
root@436882efd51d:~#

```

You can now log in by running:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
chainlink admin login

```

You will be prompted to enter your API Email and Password, and if successful, the prompt will simply appear again. You can check that you are authenticated by running:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
chainlink jobs list

```

If no jobs have been added, you will receive the following output, otherwise, the list of added jobs will be returned:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```plaintext
╔ Jobs
╬════╬════════════╬════════════╬═══════╬
║ ID ║ CREATED AT ║ INITIATORS ║ TASKS ║
╬════╬════════════╬════════════╬═══════╬

```

## [Transfer funds from node wallet.](https://docs.chain.link/chainlink-nodes/resources/miscellaneous\#transfer-funds-from-node-wallet)

To transfer funds from the node wallet to another address, use the following CLI command:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
chainlink txs create <amount> <your-cl-node-address> <send-to-address>

```

This method is the preferred way to interact with your node wallet. Using other methods to manually interact with the node wallet can cause nonce issues.

## [Change your API password](https://docs.chain.link/chainlink-nodes/resources/miscellaneous\#change-your-api-password)

In order to change your password, you first need to log into the CLI by running:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
chainlink admin login

```

Use your API email and old password in order to authenticate.

Then run the following in order to update the password:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
chainlink admin chpass

```

It will ask for your old password first, then ask for the new password and a confirmation.

Once complete, you should see a message "Password updated."

## [Multi-user and Role Based Access Control (RBAC)](https://docs.chain.link/chainlink-nodes/resources/miscellaneous\#multi-user-and-role-based-access-control-rbac)

See the [Roles and Access Control](https://docs.chain.link/chainlink-nodes/v1/roles-and-access) page.

## [Key management](https://docs.chain.link/chainlink-nodes/resources/miscellaneous\#key-management)

In this section, ensure you log into the CLI by executing the following command:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
chainlink admin login

```

Authenticate using your API email and password.

### [List ETH keys](https://docs.chain.link/chainlink-nodes/resources/miscellaneous\#list-eth-keys)

To list available Ethereum accounts along with their ETH & LINK balances, nonces, and other metadata, execute the following command:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
chainlink keys eth list

```

Example:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```text
🔑 ETH keys
-------------------------------------------------------------------------------------------------
Address:           0x2d4f5FBD00E5A4fD53D162cE7EDFdb5b7664C542
EVM Chain ID:      11155111
Next Nonce:        0
ETH:               0.000000000000000000
LINK:              0
Disabled:          false
Created:           2023-04-26 08:12:51.340348 +0000 UTC
Updated:           2023-04-26 08:12:51.340348 +0000 UTC

```

### [Create a new ETH Key](https://docs.chain.link/chainlink-nodes/resources/miscellaneous\#create-a-new-eth-key)

To create a key in the node's keystore alongside the existing keys, run the following command:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
chainlink keys eth create

```

Example:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```text
ETH key created.

🔑 New key
-------------------------------------------------------------------------------------------------
Address:           0xd31961E1f62A2FaB824AC3C1A7a332daF8B11eE0
EVM Chain ID:      11155111
Next Nonce:        0
ETH:               0.000000000000000000
LINK:              0
Disabled:          false
Created:           2023-04-26 08:28:36.52974 +0000 UTC
Updated:           2023-04-26 08:28:36.52974 +0000 UTC
Max Gas Price Wei: 115792089237316195423570985008687907853269984665640564039457584007913129639935

```

### [Export an ETH key](https://docs.chain.link/chainlink-nodes/resources/miscellaneous\#export-an-eth-key)

To export an Ethereum key to a JSON file, run the following command:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
chainlink keys eth export [address] [command options]

```

where:

- `address`: The EVM account address for which you want to export the private key.

- Options:
  - `--newpassword FILE, -p FILE FILE`: A file containing the password to encrypt the key.
  - `--output value, -o value`: The path where the JSON file will be saved.

Example:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```text
chainlink keys eth export 0xd31961E1f62A2FaB824AC3C1A7a332daF8B11eE0 --newpassword .chainlink/pass --output privatekey.json

🔑 Exported ETH key 0xd31961E1f62A2FaB824AC3C1A7a332daF8B11eE0 to privatekey.json

```

### [Delete an ETH key](https://docs.chain.link/chainlink-nodes/resources/miscellaneous\#delete-an-eth-key)

To remove an Ethereum key, run the following command:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
chainlink keys eth delete [address] [command options]

```

where:

- `address`: The EVM account address that you want to remove.

- Options:
  - `--yes, -y`: Skip the confirmation prompt.

Example:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```text
$ chainlink keys eth delete 0xd31961E1f62A2FaB824AC3C1A7a332daF8B11eE0 --yes
Deleted ETH key: 0xd31961E1f62A2FaB824AC3C1A7a332daF8B11eE0

```

### [Import an ETH key](https://docs.chain.link/chainlink-nodes/resources/miscellaneous\#import-an-eth-key)

To import an Ethereum key from a JSON file, run the following command:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
chainlink keys eth import [JSON file] [command options]

```

where:

- `JSON file`: The path where the JSON file containing the ETH key is saved.

- Options:
  - `--oldpassword FILE, -p FILE`: FILE containing the password used to encrypt the key in the JSON file.
  - `--evmChainID value`: Chain ID for the key. If left blank, default chain will be used.

Example:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```text
$ chainlink keys eth import privatekey.json --oldpassword .chainlink/pass
🔑 Imported ETH key
-------------------------------------------------------------
Address:           0xd31961E1f62A2FaB824AC3C1A7a332daF8B11eE0
EVM Chain ID:      11155111
Next Nonce:        0
ETH:               0.000000000000000000
LINK:              0
Disabled:          false
Created:           2023-04-26 08:51:02.04186 +0000 UTC
Updated:           2023-04-26 08:51:02.04186 +0000 UTC
Max Gas Price Wei: <nil>

```

## [Full example in detached mode](https://docs.chain.link/chainlink-nodes/resources/miscellaneous\#full-example-in-detached-mode)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
cd ~/.chainlink-sepolia && docker run --restart=always  -p 6688:6688 -d --name sepolia-primary -v ~/.chainlink-sepolia:/chainlink -it --env-file=.env smartcontract/chainlink:1.0.0 node start -p /chainlink/.password

```

## What's next

- [\> Security and Operation Best Practices](https://docs.chain.link/chainlink-nodes/resources/best-security-practices)

## Get the latest Chainlink content straight to your inbox.

Email Address

[iframe](https://td.doubleclick.net/td/rul/346357746?random=1748840197974&cv=11&fst=1748840197974&fmt=3&bg=ffffff&guid=ON&async=1&gcl_ctr=1&gtm=45be55s2v891173849z8847174275za200zb847174275&gcd=13l3l3l3l1l1&dma=0&tag_exp=101509157~103116026~103200004~103233427~103252644~103252646~103351869~103351871~104481633~104481635~104559073~104559075~104612245~104612247&ptag_exp=101509157~103116026~103200004~103233427~103252644~103252646~103351869~103351871~104481633~104481635~104559073~104559075~104612245~104612247&u_w=1280&u_h=1024&url=https%3A%2F%2Fdocs.chain.link%2Fchainlink-nodes%2Fresources%2Fmiscellaneous&_ng=1&label=_duuCKn_k4cYEPL_k6UB&hn=www.googleadservices.com&frm=0&tiba=Miscellaneous%20%7C%20Chainlink%20Documentation&value=0&bttype=purchase&npa=0&pscdl=noapi&auid=508814149.1748840198&uaa=x86&uab=64&uafvl=Google%2520Chrome%3B137.0.7151.55%7CChromium%3B137.0.7151.55%7CNot%252FA)Brand%3B24.0.0.0&uamb=0&uam=&uap=Linux%20x86_64&uapv=6.6.72&uaw=0&ec_mode=a&fledge=1&capi=1&_tu=Cg&em=tv.1&ct_cookie_present=0)

## Configuring Chainlink Nodes
[iframe](https://www.googletagmanager.com/ns.html?id=GTM-N6DQ47T)

Chainlink CCIP is now officially live on Solana. [View lanes and tokens.](https://docs.chain.link/ccip/directory/mainnet/chain/solana-mainnet?utm_medium=referral&utm_source=chainlink-docs&utm_campaign=solana-ccip)

On this page

# [Configuring Nodes](https://docs.chain.link/chainlink-nodes/configuring-nodes\#overview)

Starting with Chainlink v2.0.0, TOML configuration is the only supported configuration method. You can switch to TOML format using the [Chainlink v1.13.0 image](https://hub.docker.com/r/smartcontract/chainlink/tags). After your Chainlink node is running stable on v1.13.0, you can continue to use the TOML config on future images where support for `.env` configs are no longer supported.

You can see the available config options on the [Node Config](https://docs.chain.link/chainlink-nodes/v1/node-config) and [Node Secrets](https://docs.chain.link/chainlink-nodes/v1/secrets-config) pages.

## [Migrating from environment variables to TOML](https://docs.chain.link/chainlink-nodes/configuring-nodes\#migrating-from-environment-variables-to-toml)

Before you begin, update your Chainlink Node to v1.13.0 and ensure that it operates as expected. This is the last version that supports environment variable configuration, and the best version to use for TOML migration before you update the node to future versions.

### [Export your current config](https://docs.chain.link/chainlink-nodes/configuring-nodes\#export-your-current-config)

You can generate the `config.toml` file using the `chainlink config dump` command. This guide shows you how to do this for a Chainlink node running in a Docker container:

1. Open an interactive shell inside the Docker container that runs your node:



![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)



```shell
docker exec -it chainlink bash

```

2. Log in to the Chainlink CLI with an account that has admin access:



![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)



```shell
chainlink admin login

```

3. Export the current config to a `config.toml` file:



![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)



```shell
chainlink config dump > config.toml

```

4. Log out of the Chainlink CLI and close the shell on the Docker container.



![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)



```shell
chainlink admin logout && exit

```

5. Change to the directory where your .env file is located. This is the directory that you mount to Docker when you run the node. You will create your `config.toml` and `secrets.toml` files here so Docker can provide them to your node container.



![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)



```shell
cd ~/.chainlink

```

6. Write the config file from the container to your host:



![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)



```shell
docker exec -it chainlink cat /home/chainlink/config.toml > ./config.toml

```

7. Create a `secrets.toml` file with the minimum required secrets, which are `[Database]` and `[Password]`.

If you are working on a test node, you can use `?sslmode=disable` in the database `URL`. You might also need [`AllowSimplePasswords = true`](https://docs.chain.link/chainlink-nodes/v1/secrets-config#allowsimplepasswords) in the `[Database]` section so you can start the node, but you should make the database password sufficiently complex as a best practice:



![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)



```shell
echo "[Database]
URL = 'postgresql://user:pass@localhost:5432/dbname'

[Password]
Keystore = 'keystore_pass'" > ./secrets.toml

```

8. Edit the `secrets.toml` file to include the secrets you need for your specific Chainlink node. See the [Node Secrets](https://docs.chain.link/chainlink-nodes/v1/secrets-config) page for a full list of available options.


### [Validate the configuration](https://docs.chain.link/chainlink-nodes/configuring-nodes\#validate-the-configuration)

After you have the `config.toml` file and the `secrets.toml` files on the host system, you can validate these files using a temporary Docker container.

1. Validate the configuration by running the `config validate` command in the Docker container. This command changes to `node validate` when you upgrade your node to version `2.0.0` or later.



![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)



```shell
docker run --platform linux/x86_64/v8 --name chainlink-config-validator -v ~/.chainlink:/chainlink -it --rm smartcontract/chainlink:1.13.0 -config /chainlink/config.toml -secrets /chainlink/secrets.toml config validate

```



You will likely see some invalid config errors. For example:



![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)



```shell
Invalid configuration: EVM.3.Nodes: missing: must have at least one node

```

2. Edit the `config.toml` and `secrets.toml` files to manually correct any errors. See the [Node Config](https://docs.chain.link/chainlink-nodes/v1/node-config) and [Node Secrets](https://docs.chain.link/chainlink-nodes/v1/secrets-config) pages to learn which settings are valid. For the error in this example, an EVM chain was configured with no nodes. Removing this from the config made the config valid:



![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)



```plaintext
[[EVM]]
ChainID = '421613'
Enabled = false
Nodes = []

```

3. Run the `config validate` command again and make additional changes until you have a valid config message:



![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)



```shell
Valid configuration.

```


### [Restart your Chainlink node using the TOML config](https://docs.chain.link/chainlink-nodes/configuring-nodes\#restart-your-chainlink-node-using-the-toml-config)

With your valid config and secrets files, you can migrate your Chainlink node to use the new config.

1. Stop your existing Chainlink node:



![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)



```shell
docker stop chainlink

```

2. Make a Postgres [database snapshot](https://www.postgresql.org/docs/current/backup-dump.html) so you can restore your previous Chainlink node if necessary.

3. Start a new Chainlink node Docker container named using the new `config.toml` and `secrets.toml` files. This example uses `chainlink-toml` as the container name:



![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)



```shell
docker run --platform linux/x86_64/v8 --name chainlink-toml  -v ~/.chainlink:/chainlink -it -p 6688:6688 --add-host=host.docker.internal:host-gateway smartcontract/chainlink:1.13.0 -config /chainlink/config.toml -secrets /chainlink/secrets.toml node start

```


Test your node to verify that it works as intended. If you are using a VPS, open an [SSH tunnel](https://www.howtogeek.com/168145/how-to-use-ssh-tunneling/) using `ssh -i $KEY $USER@$REMOTE-IP -L 6688:localhost:6688 -N`. Connect to the Operator UI in your browser at `localhost:6688`.

## [Using multiple config files](https://docs.chain.link/chainlink-nodes/configuring-nodes\#using-multiple-config-files)

You can use multiple config and secrets files. The config settings from each file are applied in the order that you specify when you run your node. Duplicated fields override values specified in earlier config files. This allows you to create a common config that applies to many nodes with specific configs for nodes that need unique configuration settings. Specifying multiple secrets files is invalid.

To specify multiple config files, add additional `-config` flags to the `docker run` command:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
docker run --platform linux/x86_64/v8 --name chainlink -v ~/.chainlink:/chainlink -it -p 6688:6688 --add-host=host.docker.internal:host-gateway smartcontract/chainlink:1.13.0 -config /chainlink/config.toml -config /chainlink/config2.toml -config /chainlink/config3.toml -secrets /chainlink/secrets.toml node start

```

## Get the latest Chainlink content straight to your inbox.

Email Address

[iframe](https://td.doubleclick.net/td/rul/346357746?random=1748840198337&cv=11&fst=1748840198337&fmt=3&bg=ffffff&guid=ON&async=1&gcl_ctr=1&gtm=45be55s2v891173849z8847174275za200zb847174275&gcd=13l3l3l3l1l1&dma=0&tag_exp=101509157~103116026~103200004~103233427~103252644~103252646~103351866~103351868~104481633~104481635~104559073~104559075~104612245~104612247&ptag_exp=101509157~103116026~103200004~103233427~103252644~103252646~103351869~103351871~104481633~104481635~104559073~104559075~104612245~104612247&u_w=1280&u_h=1024&url=https%3A%2F%2Fdocs.chain.link%2Fchainlink-nodes%2Fconfiguring-nodes&_ng=1&label=_duuCKn_k4cYEPL_k6UB&hn=www.googleadservices.com&frm=0&tiba=Configuring%20Nodes%20%7C%20Chainlink%20Documentation&value=0&bttype=purchase&npa=0&pscdl=noapi&auid=963740275.1748840198&uaa=x86&uab=64&uafvl=Google%2520Chrome%3B137.0.7151.55%7CChromium%3B137.0.7151.55%7CNot%252FA)Brand%3B24.0.0.0&uamb=0&uam=&uap=Linux%20x86_64&uapv=6.6.72&uaw=0&ec_mode=a&fledge=1&capi=1&_tu=Cg&em=tv.1&ct_cookie_present=0)

## Chainlink Ownership
[iframe](https://www.googletagmanager.com/ns.html?id=GTM-N6DQ47T)

Chainlink CCIP is now officially live on Solana. [View lanes and tokens.](https://docs.chain.link/ccip/directory/mainnet/chain/solana-mainnet?utm_medium=referral&utm_source=chainlink-docs&utm_campaign=solana-ccip)

On this page

# [Ownership](https://docs.chain.link/chainlink-nodes/contracts/ownership\#overview)

[ConfirmedOwnerWithProposal](https://github.com/smartcontractkit/chainlink/blob/contracts-v1.3.0/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol) is inherited by [operator](https://docs.chain.link/chainlink-nodes/contracts/operator) and [forwarder](https://docs.chain.link/chainlink-nodes/contracts/forwarder) contracts. It contains helpers for basic contract ownership.

## [API reference](https://docs.chain.link/chainlink-nodes/contracts/ownership\#api-reference)

### [Methods](https://docs.chain.link/chainlink-nodes/contracts/ownership\#methods)

#### [transferOwnership](https://docs.chain.link/chainlink-nodes/contracts/ownership\#transferownership)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```solidity
function transferOwnership(address to) public

```

Allows an owner to begin transferring ownership to a new address.
Emits an [OwnershipTransferRequested](https://docs.chain.link/chainlink-nodes/contracts/ownership#ownershiptransferrequested) event.

#### [acceptOwnership](https://docs.chain.link/chainlink-nodes/contracts/ownership\#acceptownership)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```solidity
function acceptOwnership() external

```

Allows an ownership transfer to be completed by the recipient.
Emits an [OwnershipTransferred](https://docs.chain.link/chainlink-nodes/contracts/ownership#ownershiptransferred) event.

#### [owner](https://docs.chain.link/chainlink-nodes/contracts/ownership\#owner)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```solidity
function owner() public view returns (address)

```

Get the current owner.

### [Events](https://docs.chain.link/chainlink-nodes/contracts/ownership\#events)

#### [OwnershipTransferRequested](https://docs.chain.link/chainlink-nodes/contracts/ownership\#ownershiptransferrequested)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```solidity
event OwnershipTransferRequested(address from, address to)

```

#### [OwnershipTransferred](https://docs.chain.link/chainlink-nodes/contracts/ownership\#ownershiptransferred)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```solidity
event OwnershipTransferred(address from, address to)

```

## Get the latest Chainlink content straight to your inbox.

Email Address

[iframe](https://td.doubleclick.net/td/rul/346357746?random=1748840197971&cv=11&fst=1748840197971&fmt=3&bg=ffffff&guid=ON&async=1&gcl_ctr=1&gtm=45be55s2v891173849z8847174275za200zb847174275&gcd=13l3l3l3l1l1&dma=0&tag_exp=101509157~103116026~103200004~103233427~103252644~103252646~103351869~103351871~104481633~104481635~104559073~104559075~104612245~104612247&ptag_exp=101509157~102938614~103116026~103200004~103233427~103252644~103252646~103351866~103351868~104481633~104481635~104559073~104559075~104612245~104612247&u_w=1280&u_h=1024&url=https%3A%2F%2Fdocs.chain.link%2Fchainlink-nodes%2Fcontracts%2Fownership&_ng=1&label=_duuCKn_k4cYEPL_k6UB&hn=www.googleadservices.com&frm=0&tiba=Ownership%20%7C%20Chainlink%20Documentation&value=0&bttype=purchase&npa=0&pscdl=noapi&auid=1601614514.1748840198&uaa=x86&uab=64&uafvl=Google%2520Chrome%3B137.0.7151.55%7CChromium%3B137.0.7151.55%7CNot%252FA)Brand%3B24.0.0.0&uamb=0&uam=&uap=Linux%20x86_64&uapv=6.6.72&uaw=0&ec_mode=a&fledge=1&capi=1&_tu=Cg&em=tv.1&ct_cookie_present=0)

## Chainlink Nodes Updates
[![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/668fc81ede9557c0de8cf815_light-logo.svg)](https://dev.chain.link/)

![Search](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/650045e119dad0f3be8fbbf6_ic-search.svg)Ctrl + k

Chainlink CCIP is now officially live on Solana.

[View lanes and tokens.](https://docs.chain.link/ccip/directory/mainnet/chain/solana-mainnet?utm_medium=referral&utm_source=chainlink-docs&utm_campaign=solana-ccip)

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/677bd64de90ac466e358cda9_Close.svg)

Changelog

## Never miss an update

Mar 2024

Integration

May 25, 2025

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/67d408f515018b4332fe745d_Copy.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/679a10e9acfb8927f52912ba_share-icon.svg)

Copy URL

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/67d408f58f3bf29102bfb7b1_Tick.svg)

Copied

https://dev.chain.link/changelog/cross-chain-token-cct-standard-added-support-for-new-tokens-75b70

Show more

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/679b7a790dd66cac379ed4c4_show-more-arrow.svg)

CCIP

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)

### Cross-chain token (CCT) standard: Added support for new tokens

Newly supported tokens: 1XMM, BOLD, CHIKA, DAMN, FEED, LsETH, NEKO, PFVS, SolvBTC.JUP, WOW, deUSD, syrupUSDC, zBTC

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)

[One-XMM Token](https://docs.chain.link/ccip/directory/mainnet/token/1XMM)

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)

[BOLD Stablecoin](https://docs.chain.link/ccip/directory/mainnet/token/BOLD)

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)

[Chiikawa](https://docs.chain.link/ccip/directory/mainnet/token/CHIKA)

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)

[Sol Killer](https://docs.chain.link/ccip/directory/mainnet/token/DAMN)

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)

[FEED](https://docs.chain.link/ccip/directory/mainnet/token/FEED)

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)

[Liquid Staked ETH](https://docs.chain.link/ccip/directory/mainnet/token/LsETH)

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)

[Neko](https://docs.chain.link/ccip/directory/mainnet/token/NEKO)

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)

[Puffverse Token](https://docs.chain.link/ccip/directory/mainnet/token/PFVS)

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)

[SolvBTC Jupiter](https://docs.chain.link/ccip/directory/mainnet/token/SolvBTC.JUP)

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)

[WOW](https://docs.chain.link/ccip/directory/mainnet/token/WOW)

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)

[deUSD](https://docs.chain.link/ccip/directory/mainnet/token/deUSD)

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)

[Syrup USDC](https://docs.chain.link/ccip/directory/mainnet/token/syrupUSDC)

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)

[zBTC](https://docs.chain.link/ccip/directory/mainnet/token/zBTC)

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/66c5b67262fc6ac27b585fa4_Play%20btn.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)

BTC / USD

Ethereum

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/66c5b67262fc6ac27b585fa4_Play%20btn.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)

BTC / USD

Ethereum

Integration

May 25, 2025

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/67d408f515018b4332fe745d_Copy.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/679a10e9acfb8927f52912ba_share-icon.svg)

Copy URL

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/67d408f58f3bf29102bfb7b1_Tick.svg)

Copied

https://dev.chain.link/changelog/added-support-to-data-feeds-0d708

Show more

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/679b7a790dd66cac379ed4c4_show-more-arrow.svg)

![Aptos](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea35800ecddf726309c4e0_aptos.svg)

Aptos

![Arbitrum](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee4189eb_arbitrum.svg)

Arbitrum

![OP](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee418a08_optimism.svg)

OP

![Soneium](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee4189e8_soneium.svg)

Soneium

Sonic

+1

Data Feeds

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)

### Added support to Data Feeds

New Data Feeds available:

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea35800ecddf726309c4e0_aptos.svg)

[CAKE / USD](https://docs.chain.link/data-feeds/price-feeds/addresses?page=1&network=aptos&search=CAKE)

Aptos

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee4189eb_arbitrum.svg)

[USD1 / USD](https://data.chain.link/feeds/arbitrum/mainnet/usd1-usd)

Arbitrum

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee418a08_optimism.svg)

[USD1 / USD](https://data.chain.link/feeds/optimism/mainnet/usd1-usd)

OP

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee4189e8_soneium.svg)

[USD1 / USD](https://data.chain.link/feeds/soneium/soneium/usd1-usd)

Soneium

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee418a11_sonic.svg)

[USD1 / USD](https://data.chain.link/feeds/sonic/sonic/usd1-usd)

Sonic

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/66c5b67262fc6ac27b585fa4_Play%20btn.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)

BTC / USD

Ethereum

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/66c5b67262fc6ac27b585fa4_Play%20btn.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)

BTC / USD

Ethereum

Integration

May 25, 2025

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/67d408f515018b4332fe745d_Copy.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/679a10e9acfb8927f52912ba_share-icon.svg)

Copy URL

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/67d408f58f3bf29102bfb7b1_Tick.svg)

Copied

https://dev.chain.link/changelog/added-support-to-smartdata-911c6

Show more

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/679b7a790dd66cac379ed4c4_show-more-arrow.svg)

![Arbitrum](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee4189eb_arbitrum.svg)

Arbitrum

![Solana](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee418a02_solana.svg)

Solana

SmartData

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)

### Added support to SmartData

New SmartData Feeds available:

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee4189eb_arbitrum.svg)

[zBTC PoR](https://data.chain.link/feeds/arbitrum/mainnet/zbtc-por)

Arbitrum

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee418a02_solana.svg)

[zBTC PoR](https://docs.chain.link/data-feeds/smartdata/addresses?page=1&network=solana&search=zbtc)

Solana

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/66c5b67262fc6ac27b585fa4_Play%20btn.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)

BTC / USD

Ethereum

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/66c5b67262fc6ac27b585fa4_Play%20btn.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)

BTC / USD

Ethereum

Integration

May 22, 2025

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/67d408f515018b4332fe745d_Copy.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/679a10e9acfb8927f52912ba_share-icon.svg)

Copy URL

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/67d408f58f3bf29102bfb7b1_Tick.svg)

Copied

https://dev.chain.link/changelog/ccip-on-opbnb

Show more

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/679b7a790dd66cac379ed4c4_show-more-arrow.svg)

![opBNB](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee418a0e_opbnb.svg)

opBNB

CCIP

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)

### CCIP on opBNB

Chainlink CCIP expands support to new blockchains:

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee418a0e_opbnb.svg)

[opBNB Mainnet](https://docs.chain.link/ccip/directory/mainnet/chain/binance-smart-chain-mainnet-opbnb-1)

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee418a0e_opbnb.svg)

[opBNB Testnet](https://docs.chain.link/ccip/directory/testnet/chain/binance-smart-chain-testnet-opbnb-1)

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/66c5b67262fc6ac27b585fa4_Play%20btn.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)

BTC / USD

Ethereum

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/66c5b67262fc6ac27b585fa4_Play%20btn.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)

BTC / USD

Ethereum

Integration

May 21, 2025

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/67d408f515018b4332fe745d_Copy.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/679a10e9acfb8927f52912ba_share-icon.svg)

Copy URL

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/67d408f58f3bf29102bfb7b1_Tick.svg)

Copied

https://dev.chain.link/changelog/data-streams-on-bitlayer

Show more

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/679b7a790dd66cac379ed4c4_show-more-arrow.svg)

![Bitlayer](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea356f73d0dbdff5ed06c3_bitlayer.svg)

Bitlayer

Data Streams

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)

### Data Streams on Bitlayer

Chainlink Data Streams is available on Bitlayer. The verifier proxy addresses and stream IDs are available on the [Stream Addresses](https://docs.chain.link/data-streams/crypto-streams) page.

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/66c5b67262fc6ac27b585fa4_Play%20btn.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)

BTC / USD

Ethereum

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/66c5b67262fc6ac27b585fa4_Play%20btn.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)

BTC / USD

Ethereum

Integration

May 19, 2025

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/67d408f515018b4332fe745d_Copy.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/679a10e9acfb8927f52912ba_share-icon.svg)

Copy URL

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/67d408f58f3bf29102bfb7b1_Tick.svg)

Copied

https://dev.chain.link/changelog/functions-on-zksync

Show more

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/679b7a790dd66cac379ed4c4_show-more-arrow.svg)

![ZKsync](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee418a0b_zksync.svg)

ZKsync

Functions

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)

### Functions on ZkSync

Chainlink Functions is available on ZKSync Mainnet and Testnet. Visit the [Supported Networks](https://docs.chain.link/chainlink-functions/supported-networks#zksync) page for more information.

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/66c5b67262fc6ac27b585fa4_Play%20btn.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)

BTC / USD

Ethereum

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/66c5b67262fc6ac27b585fa4_Play%20btn.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)

BTC / USD

Ethereum

Integration

May 19, 2025

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/67d408f515018b4332fe745d_Copy.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/679a10e9acfb8927f52912ba_share-icon.svg)

Copy URL

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/67d408f58f3bf29102bfb7b1_Tick.svg)

Copied

https://dev.chain.link/changelog/cross-chain-token-cct-standard-added-support-for-new-tokens-202ee

Show more

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/679b7a790dd66cac379ed4c4_show-more-arrow.svg)

CCIP

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)

### Cross-chain token (CCT) standard: Added support for new tokens

Newly supported tokens: FLUID, NXPC, SXT, USD1, syrupUSDC, zBTC

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)

[Fluid](https://docs.chain.link/ccip/directory/mainnet/token/FLUID)

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)

[NXPC](https://docs.chain.link/ccip/directory/mainnet/token/NXPC)

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)

[Space and Time](https://docs.chain.link/ccip/directory/mainnet/token/SXT)

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)

[World Liberty Financial USD](https://docs.chain.link/ccip/directory/mainnet/token/USD1)

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)

[Syrup USDC](https://docs.chain.link/ccip/directory/mainnet/token/syrupUSDC)

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)

[zBTC](https://docs.chain.link/ccip/directory/mainnet/token/zBTC)

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/66c5b67262fc6ac27b585fa4_Play%20btn.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)

BTC / USD

Ethereum

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/66c5b67262fc6ac27b585fa4_Play%20btn.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)

BTC / USD

Ethereum

Integration

May 19, 2025

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/67d408f515018b4332fe745d_Copy.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/679a10e9acfb8927f52912ba_share-icon.svg)

Copy URL

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/67d408f58f3bf29102bfb7b1_Tick.svg)

Copied

https://dev.chain.link/changelog/ccip-v1-6-on-solana

Show more

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/679b7a790dd66cac379ed4c4_show-more-arrow.svg)

![Solana](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee418a02_solana.svg)

Solana

CCIP

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)

### CCIP v1.6 on Solana

- This release expands CCIP to non-EVMs, starting with Solana.
- Solana is now interoperable with 6 EVM chains: Ethereum, BNB, Arbitrum, Optimism, BASE and Sonic using an upgraded [CCIP v1.6 architecture](https://docs.chain.link/ccip/concepts/architecture).
- More lanes to/from Solana will be added in coming weeks.
- No change to any existing EVM Router addresses.
- Solana CCIP details can be seen on the [CCIP Directory](https://docs.chain.link/ccip/directory).

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee418a02_solana.svg)

[Solana Mainnet](https://docs.chain.link/ccip/directory/mainnet/chain/solana-mainnet)

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee418a02_solana.svg)

[Solana Devnet](https://docs.chain.link/ccip/directory/testnet/chain/solana-devnet)

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/66c5b67262fc6ac27b585fa4_Play%20btn.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)

BTC / USD

Ethereum

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/66c5b67262fc6ac27b585fa4_Play%20btn.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)

BTC / USD

Ethereum

Integration

May 18, 2025

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/67d408f515018b4332fe745d_Copy.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/679a10e9acfb8927f52912ba_share-icon.svg)

Copy URL

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/67d408f58f3bf29102bfb7b1_Tick.svg)

Copied

https://dev.chain.link/changelog/added-support-to-data-feeds-e073c

Show more

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/679b7a790dd66cac379ed4c4_show-more-arrow.svg)

![Base](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee4189e5_base.svg)

Base

![Celo](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/680b4d75d47187e7312b411f_celo.svg)

Celo

![Soneium](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee4189e8_soneium.svg)

Soneium

![Ronin](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea355c73d0dbdff5ecf52a_ronin.svg)

Ronin

Ethereum

Sonic

Linea

X Layer

Avalanche

OP

Mantle

Arbitrum

ZKsync

BNB Chain

Scroll

+11

Data Feeds

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)

### Added support to Data Feeds

New Data Feeds available:

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee4189e5_base.svg)

[AAVE / USD](https://data.chain.link/feeds/base/base/aave-usd)

Base

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee4189e5_base.svg)

[AMP / USD](https://data.chain.link/feeds/base/base/amp-usd)

Base

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/680b4d75d47187e7312b411f_celo.svg)

[AUD / USD](https://data.chain.link/feeds/celo/mainnet/aud-usd)

Celo

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee4189e5_base.svg)

[AVAIL / USD](https://data.chain.link/feeds/base/base/avail-usd)

Base

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee4189e5_base.svg)

[CAD / USD](https://data.chain.link/feeds/base/base/cad-usd)

Base

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/680b4d75d47187e7312b411f_celo.svg)

[CAD / USD](https://data.chain.link/feeds/celo/mainnet/cad-usd)

Celo

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee4189e8_soneium.svg)

[LINK / ETH](https://data.chain.link/feeds/soneium/soneium/link-eth)

Soneium

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea355c73d0dbdff5ecf52a_ronin.svg)

[LINK / RON](https://data.chain.link/feeds/ronin/ronin/link-ron)

Ronin

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3547e5dfd952ed6ee1e3_ethereum.svg)

[EURC / USD](https://data.chain.link/feeds/ethereum/mainnet/eurc-usd)

Ethereum

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee418a11_sonic.svg)

[EURC / USD](https://data.chain.link/feeds/sonic/sonic/eurc-usd)

Sonic

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea355df8f5d0cd2d2dff33_linea.svg)

[COMP / USD](https://data.chain.link/feeds/linea/mainnet/comp-usd)

Linea

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea355c73d0dbdff5ecf52a_ronin.svg)

[COMP / USD](https://data.chain.link/feeds/ronin/ronin/comp-usd)

Ronin

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee4189e5_base.svg)

[CUSDO / USD](https://data.chain.link/feeds/base/base/cusdo-usd)

Base

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee4189e5_base.svg)

[CTX / USD](https://data.chain.link/feeds/base/base/ctx-usd)

Base

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea356f73d0dbdff5ed06ea_xlayer.svg)

[DAI / USD](https://data.chain.link/feeds/xlayer/xlayer/dai-usd)

X Layer

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3547e5dfd952ed6ee1e3_ethereum.svg)

[DEUSD / USD](https://data.chain.link/feeds/ethereum/mainnet/deusd-usd)

Ethereum

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee418a14_avalanche.svg)

[DEUSD / USD](https://data.chain.link/feeds/avalanche/mainnet/deusd-usd)

Avalanche

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee418a08_optimism.svg)

[DEUSD / USD](https://data.chain.link/feeds/optimism/mainnet/deusd-usd)

OP

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee4189ff_mantle.svg)

[SUSDE / USD](https://data.chain.link/feeds/mantle/mantle/susde-usd)

Mantle

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee418a11_sonic.svg)

[EUR / USD](https://data.chain.link/feeds/sonic/sonic/eur-usd)

Sonic

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee4189ff_mantle.svg)

[FBTC / BTC](https://data.chain.link/feeds/mantle/mantle/fbtc-btc-exchange-rate)

Mantle

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3547e5dfd952ed6ee1e3_ethereum.svg)

[FRXUSD / USD](https://data.chain.link/feeds/ethereum/mainnet/frxusd-usd)

Ethereum

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee4189ff_mantle.svg)

[FBTC / USD](https://data.chain.link/feeds/mantle/mantle/calculated-fbtc-usd)

Mantle

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee418a08_optimism.svg)

[ANON / USD](https://data.chain.link/feeds/optimism/mainnet/anon-usd)

OP

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee4189e5_base.svg)

[ANON / USD](https://data.chain.link/feeds/base/base/anon-usd)

Base

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee4189eb_arbitrum.svg)

[HKD / USD](https://data.chain.link/feeds/arbitrum/mainnet/hkd-usd)

Arbitrum

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee4189eb_arbitrum.svg)

[RSETH / ETH](https://data.chain.link/feeds/arbitrum/mainnet/rseth-eth-exchange-rate)

Arbitrum

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee418a0b_zksync.svg)

[RSETH / ETH](https://data.chain.link/feeds/zksync/zksync/rseth-eth-exchange-rate)

ZKsync

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/680b4d75d47187e7312b411f_celo.svg)

[KRW / USD](https://data.chain.link/feeds/celo/mainnet/krw-usd)

Celo

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3556de2e22952a093869_bnb-chain.svg)

[LBTC / BTC](https://data.chain.link/feeds/bsc/mainnet/lbtc-btc)

BNB Chain

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee4189e8_soneium.svg)

[STETH / ETH](https://data.chain.link/feeds/soneium/soneium/steth-eth)

Soneium

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee418a14_avalanche.svg)

[WSTETH / USD](https://data.chain.link/feeds/avalanche/mainnet/wsteth-usd)

Avalanche

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3556de2e22952a093869_bnb-chain.svg)

[LISTA / USD](https://data.chain.link/feeds/bsc/mainnet/lista-usd)

BNB Chain

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee4189e5_base.svg)

[LBTC / USD](https://data.chain.link/feeds/base/base/lbtc-usd)

Base

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee4189e5_base.svg)

[MAG7.SSI / USD](https://data.chain.link/feeds/base/base/mag7.ssi-usd)

Base

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee4189ff_mantle.svg)

[mETH / USD](https://data.chain.link/feeds/mantle/mantle/calculated-meth-usd)

Mantle

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee4189ff_mantle.svg)

[METH / USD](https://data.chain.link/feeds/mantle/mantle/meth-eth)

Mantle

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee4189e5_base.svg)

[MXN / USD](https://data.chain.link/feeds/base/base/mxn-usd)

Base

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee4189e5_base.svg)

[MORPHO / USD](https://data.chain.link/feeds/base/base/morpho-usd)

Base

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee4189e5_base.svg)

[NZD / USD](https://data.chain.link/feeds/base/base/nzd-usd)

Base

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee4189e5_base.svg)

[NGN / USD](https://data.chain.link/feeds/base/base/ngn-usd)

Base

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3547e5dfd952ed6ee1e3_ethereum.svg)

[TRUMP / USD](https://data.chain.link/feeds/ethereum/mainnet/trump-usd)

Ethereum

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3547e5dfd952ed6ee1e3_ethereum.svg)

[OUSDT / USD](https://data.chain.link/feeds/ethereum/mainnet/ousdt-usd)

Ethereum

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee418a08_optimism.svg)

[OUSDT / USD](https://data.chain.link/feeds/optimism/mainnet/ousdt-usd)

OP

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee4189e5_base.svg)

[OUSDT / USD](https://data.chain.link/feeds/base/base/ousdt-usd)

Base

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee4189e8_soneium.svg)

[OUSDT / USD](https://data.chain.link/feeds/soneium/soneium/ousdt-usd)

Soneium

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee4189ff_mantle.svg)

[OUSDT / USD](https://data.chain.link/feeds/mantle/mantle/ousdt-usd)

Mantle

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea355c73d0dbdff5ecf52a_ronin.svg)

[OUSDT / USD](https://data.chain.link/feeds/ronin/ronin/ousdt-usd)

Ronin

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee418a11_sonic.svg)

[OS / S](https://data.chain.link/feeds/sonic/sonic/os-s)

Sonic

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3547e5dfd952ed6ee1e3_ethereum.svg)

[PHP / USD](https://data.chain.link/feeds/ethereum/mainnet/php-usd)

Ethereum

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/680b4d75d47187e7312b411f_celo.svg)

[GBP / USD](https://data.chain.link/feeds/celo/mainnet/gbp-usd)

Celo

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee4189e8_soneium.svg)

[PUFETH / ETH](https://data.chain.link/feeds/soneium/soneium/pufeth-eth)

Soneium

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee418a11_sonic.svg)

[PumpBTC / BTC](https://data.chain.link/feeds/sonic/sonic/pumpbtc-btc-exchange-rate)

Sonic

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3556de2e22952a093869_bnb-chain.svg)

[USR / USD](https://data.chain.link/feeds/bsc/mainnet/usr-usd)

BNB Chain

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee418a08_optimism.svg)

[USR / USD](https://data.chain.link/feeds/optimism/mainnet/usr-usd)

OP

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee4189eb_arbitrum.svg)

[wstUSR / stUSR](https://data.chain.link/feeds/arbitrum/mainnet/wstusr-stusr-exchange-rate)

Arbitrum

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee418a08_optimism.svg)

[wstUSR / stUSR](https://data.chain.link/feeds/optimism/mainnet/wstusr-stusr-exchange-rate)

OP

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee4189e5_base.svg)

[wstUSR / stUSR](https://data.chain.link/feeds/base/base/wstusr-stusr-exchange-rate)

Base

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee418a14_avalanche.svg)

[SHIB / USD](https://data.chain.link/feeds/avalanche/mainnet/shib-usd)

Avalanche

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee4189e8_soneium.svg)

[SolvBTC.BBN / SolvBTC](https://data.chain.link/feeds/soneium/soneium/solvbtc.bbn-solvbtc-exchange-rate)

Soneium

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee4189e5_base.svg)

[ZAR / USD](https://data.chain.link/feeds/base/base/zar-usd)

Base

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/680b4d75d47187e7312b411f_celo.svg)

[ZAR / USD](https://data.chain.link/feeds/celo/mainnet/zar-usd)

Celo

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3547e5dfd952ed6ee1e3_ethereum.svg)

[USD0++ / USD](https://data.chain.link/feeds/ethereum/mainnet/usd0++-usd)

Ethereum

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee4189eb_arbitrum.svg)

[sUSDS / sUSDS](https://data.chain.link/feeds/arbitrum/mainnet/susds-usds-exchange-rate)

Arbitrum

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee4189e5_base.svg)

[tETH / wstETH](https://data.chain.link/feeds/base/base/teth-wsteth-exchange-rate)

Base

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee4189e5_base.svg)

[TRY / USD](https://data.chain.link/feeds/base/base/try-usd)

Base

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee4189e5_base.svg)

[VVV / USD](https://data.chain.link/feeds/base/base/vvv-usd)

Base

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee4189e5_base.svg)

[VIRTUAL / USD](https://data.chain.link/feeds/base/base/virtual-usd)

Base

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3547e5dfd952ed6ee1e3_ethereum.svg)

[USD1 / USD](https://data.chain.link/feeds/ethereum/mainnet/usd1-usd)

Ethereum

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee4189e5_base.svg)

[WMTx / USD](https://data.chain.link/feeds/base/base/wmtx-usd)

Base

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee4189e8_soneium.svg)

[WSTETH / ETH](https://data.chain.link/feeds/soneium/soneium/wsteth-eth)

Soneium

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee4189eb_arbitrum.svg)

[ynETHx / ynETHx](https://data.chain.link/feeds/arbitrum/mainnet/ynethx-eth-exchange-rate)

Arbitrum

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee418a08_optimism.svg)

[ynETHx / ynETHx](https://data.chain.link/feeds/optimism/mainnet/ynethx-eth-exchange-rate)

OP

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee4189e5_base.svg)

[ynETHx / ynETHx](https://data.chain.link/feeds/base/base/ynethx-eth-exchange-rate)

Base

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee418a05_scroll.svg)

[ynETHx / ynETHx](https://data.chain.link/feeds/scroll/mainnet/ynethx-eth-exchange-rate)

Scroll

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/67ea3545ee6d9a87ee4189ff_mantle.svg)

[ynETHx / ynETHx](https://data.chain.link/feeds/mantle/mantle/ynethx-eth-exchange-rate)

Mantle

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/66c5b67262fc6ac27b585fa4_Play%20btn.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)

BTC / USD

Ethereum

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/66c5b67262fc6ac27b585fa4_Play%20btn.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)

BTC / USD

Ethereum

Integration

May 13, 2025

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/67d408f515018b4332fe745d_Copy.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/679a10e9acfb8927f52912ba_share-icon.svg)

Copy URL

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/67d408f58f3bf29102bfb7b1_Tick.svg)

Copied

https://dev.chain.link/changelog/ccip-on-new-blockchains-1cfc7

Show more

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/679b7a790dd66cac379ed4c4_show-more-arrow.svg)

![Rootstock](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/681aa4cf9b429a9dea307398_rootstock.svg)

Rootstock

CCIP

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)

### CCIP on new blockchains

Chainlink CCIP expands support to new blockchains:

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556ff/681aa4cf9b429a9dea307398_rootstock.svg)

[Rootstock Mainnet](https://docs.chain.link/ccip/directory/mainnet/chain/rootstock-mainnet)

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/66c5b67262fc6ac27b585fa4_Play%20btn.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)

BTC / USD

Ethereum

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/66c5b67262fc6ac27b585fa4_Play%20btn.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/678f76f95f2fbf3fef5e80bb_generic-token.svg)

BTC / USD

Ethereum

No updates found

We couldn’t find anything matching your filters.

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/650333f713f25a9ac4a3b26a_no-results-image.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/650333f7116c814e537a4044_combs.svg)

[Load more](https://dev.chain.link/changelog?bcc22d62_page=2)

Showing

10

of

10

updates

![Close icon](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/64cc2c23d8dbd707cdb55ad3_close-icon.svg)

Filter

Clear

Products

1

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/64cc2c23d8dbd707cdb557f2_faqs-arrow-down.svg)

Network

1

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/64cc2c23d8dbd707cdb557f2_faqs-arrow-down.svg)

Type

1

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/64cc2c23d8dbd707cdb557f2_faqs-arrow-down.svg)

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/655758e08e28e2e8d3d53e84_Back%20Arrow.svg)

Product

Clear

CCIP![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Data Feeds![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Data Streams![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

SmartData![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Functions![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Automation![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

VRF![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Nodes![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

General![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

[View Results](https://dev.chain.link/changelog?product=Nodes#)

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/655758e08e28e2e8d3d53e84_Back%20Arrow.svg)

Network

Clear

Abstract![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Apechain![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Aptos![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Arbitrum![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Astar![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Avalanche![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

B2![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

BNB Chain![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Base![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Berachain![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Bitlayer![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Blast![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Bob![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Botanix![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Celo![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Core![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Corn![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Cronos![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Cronos zkEVM![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Ethereum![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Fantom![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Fraxtal![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Gnosis Chain![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Harmony![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

HashKey Chain![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Hedera![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Hemi![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Hyperliquid![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Ink![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Lens![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Linea![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Lisk![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Mantle![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

MegaETH![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Merlin![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Metal L2![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Metis![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Mind Network![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Mint![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Mode![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Monad![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Moonbeam![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Moonriver![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Optimism![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Plume![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Polygon![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Polygon zkEVM![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Ronin![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Rootstock![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Scroll![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Sei Network![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Shibarium![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Solana![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Soneium![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Sonic![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Starknet![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Superseed![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Treasure![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Tron![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Unichain![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

World Chain![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

X Layer![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Zircuit![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Zora![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

opBNB![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

zkSync![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

[View Results](https://dev.chain.link/changelog?product=Nodes#)

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/655758e08e28e2e8d3d53e84_Back%20Arrow.svg)

Type

Clear

Blog![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Bug Fix![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Deprecation![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Feature![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Integration![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Release![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

Update![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665f0f8c8ee1c713b51a3070_check.svg)

[View Results](https://dev.chain.link/changelog?product=Nodes#)

Product

1

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665ef88f932568c410d03873_caret.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/67d3f3f0902d0da189a18223_close.svg)

Network

0

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665ef88f932568c410d03873_caret.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/67d3f3f0902d0da189a18223_close.svg)

Type

0

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665ef88f932568c410d03873_caret.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/67d3f3f0902d0da189a18223_close.svg)

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665ef88b6276ca947c49097f_filter.svg)

Filter by

1

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665ef88f932568c410d03873_caret.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)

![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/6662ed8d3c47d75511cf3513_search.svg)![](https://cdn.prod.website-files.com/64cc2c23d8dbd707cdb556d8/665a02630aabe65f06d1e63c_close.svg)

Thank you! Your submission has been received!

Oops! Something went wrong while submitting the form.

![](https://t.co/1/i/adsct?bci=4&dv=America%2FAdak%26en-US%2Cen%26Google%20Inc.%26Linux%20x86_64%26255%261280%261024%264%2624%261280%261024%260%26na&eci=3&event=%7B%7D&event_id=4e2da02d-e044-4446-919c-b00111a16b94&integration=gtm&p_id=Twitter&p_user_id=0&pl_id=5e39851a-a5d0-4a00-86c1-deef2667fc8f&tw_document_href=https%3A%2F%2Fdev.chain.link%2Fchangelog%3Fproduct%3DNodes&tw_iframe_status=0&txn_id=oel4g&type=javascript&version=2.3.33)![](https://analytics.twitter.com/1/i/adsct?bci=4&dv=America%2FAdak%26en-US%2Cen%26Google%20Inc.%26Linux%20x86_64%26255%261280%261024%264%2624%261280%261024%260%26na&eci=3&event=%7B%7D&event_id=4e2da02d-e044-4446-919c-b00111a16b94&integration=gtm&p_id=Twitter&p_user_id=0&pl_id=5e39851a-a5d0-4a00-86c1-deef2667fc8f&tw_document_href=https%3A%2F%2Fdev.chain.link%2Fchangelog%3Fproduct%3DNodes&tw_iframe_status=0&txn_id=oel4g&type=javascript&version=2.3.33)

## Chainlink Forwarder Overview
[iframe](https://www.googletagmanager.com/ns.html?id=GTM-N6DQ47T)

Chainlink CCIP is now officially live on Solana. [View lanes and tokens.](https://docs.chain.link/ccip/directory/mainnet/chain/solana-mainnet?utm_medium=referral&utm_source=chainlink-docs&utm_campaign=solana-ccip)

On this page

# [Forwarder](https://docs.chain.link/chainlink-nodes/contracts/forwarder\#overview)

In the EVM world, [externally-owned account](https://ethereum.org/en/developers/docs/accounts/) transactions are confirmed sequentially. Chainlink nodes that use a single externally-owned account (EOA) per chain face several important challenges:

- Transactions are broadcast through a single FIFO queue, so the throughput is limited to a single lane. Low throughput is terrible for the overall user experience because concurrent clients must wait to have their requests fulfilled. When more clients make requests, the longer it takes for requests to be fulfilled.
- Transactions are not executed by priority. For example, consider a situation where there are two transactions in a row. The first transaction is a fulfillment of an API request to get the winner of the FIFA world cup 2022, and the second transaction is an _ETH/USD_ price feed update used by multiple DeFi protocols. Relying on a single EOA forces the second transaction to be confirmed only after the first transaction is fulfilled. The first transaction is not as time-sensitive, but it is still fulfilled first.
- A stuck transaction will cause all the subsequent transactions to remain pending. For example, if a transaction becomes stuck because the gas price is not set high enough, that transaction must be bumped or canceled before subsequent transactions can be fulfilled.
- As a workaround, some node operators deploy multiple Chainlink nodes per chain. While this allows them to handle different types of requests separately (one node for price feeds and another to fulfill API requests), this comes with an overhead in infrastructure and maintenance costs.

To solve these challenges, we introduced two major features that will allow node operators to set up different transaction-sending strategies more securely while lowering their infrastructure costs:

- Chainlink nodes support multiple EOAs.
- [Forwarder](https://github.com/smartcontractkit/chainlink/blob/contracts-v1.3.0/contracts/src/v0.8/operatorforwarder/AuthorizedForwarder.sol) contracts allow a node operator to manage multiple EOAs and make them look like a single address. If you use a web2 analogy, forwarder contracts act like a reverse proxy server where the user is served by the same address and does not see which server the traffic is coming from. To do so, nodes call the [forward](https://docs.chain.link/chainlink-nodes/contracts/forwarder#forward) function on the forwarder contract.

Combining multiple EOAs and forwarder contracts allows greater flexibility and security in terms of design:

- Node operators can expand horizontally using multiple EOAs. They can deploy one or multiple forwarder contracts for these EOAs. The combination of EOAs and forwarders offers a lot of flexibility for setting up different pipelines for handling transactions.
- Node operators can support different job types (OCR, VRF, API request..Etc) on the same node, which reduces maintenance and infrastructure costs.
- Security-wise, forwarder contracts distinguish between owner accounts and authorized sender accounts. Authorized senders are hot wallets such as the EOAs of a Chainlink node. If a node is compromised, the owner is responsible for changing the authorized senders list.
- Node operators do not need to manually compile and deploy [operator](https://docs.chain.link/chainlink-nodes/contracts/operator) and [forwarder](https://docs.chain.link/chainlink-nodes/contracts/forwarder) contracts. They can deploy them directly from the [operator factory](https://docs.chain.link/chainlink-nodes/contracts/operatorfactory) by calling the [deploynewoperatorandforwarder](https://docs.chain.link/chainlink-nodes/contracts/operatorfactory#deploynewoperatorandforwarder) function. From a design perspective, the owner of a forwarder contract is an [operator](https://docs.chain.link/chainlink-nodes/contracts/operator) contract. The owner of the operator contract is usually a more secure address with keys stored in a hardware wallet or protected by a multisig. Node operators can manage a set of forwarder contracts through an operator contract.

## [API Reference](https://docs.chain.link/chainlink-nodes/contracts/forwarder\#api-reference)

The forwarder contract inherits [AuthorizedReceiver.sol](https://github.com/smartcontractkit/chainlink/blob/contracts-v1.3.0/contracts/src/v0.8/operatorforwarder/AuthorizedReceiver.sol) and [ConfirmedOwnerWithProposal.sol](https://github.com/smartcontractkit/chainlink/blob/contracts-v1.3.0/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol). Read the [Receiver](https://docs.chain.link/chainlink-nodes/contracts/receiver) and [Ownership](https://docs.chain.link/chainlink-nodes/contracts/ownership) API references to learn more.

### [Methods](https://docs.chain.link/chainlink-nodes/contracts/forwarder\#methods)

#### [typeAndVersion](https://docs.chain.link/chainlink-nodes/contracts/forwarder\#typeandversion)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```solidity
function typeAndVersion() external pure virtual returns (string)

```

The type and version of this contract.

##### [Return Values](https://docs.chain.link/chainlink-nodes/contracts/forwarder\#return-values)

| Name | Type | Description |
| --- | --- | --- |
|  | string | Type and version string |

#### [forward](https://docs.chain.link/chainlink-nodes/contracts/forwarder\#forward)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```solidity
function forward(address to, bytes data) external

```

Forward a call to another contract.

_Only callable by an authorized sender_

##### [Parameters](https://docs.chain.link/chainlink-nodes/contracts/forwarder\#parameters)

| Name | Type | Description |
| --- | --- | --- |
| to | address | address |
| data | bytes | to forward |

#### [ownerForward](https://docs.chain.link/chainlink-nodes/contracts/forwarder\#ownerforward)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```solidity
function ownerForward(address to, bytes data) external

```

Forward a call to another contract.

_Only callable by the owner_

##### [Parameters](https://docs.chain.link/chainlink-nodes/contracts/forwarder\#parameters-1)

| Name | Type | Description |
| --- | --- | --- |
| to | address | address |
| data | bytes | to forward |

#### [transferOwnershipWithMessage](https://docs.chain.link/chainlink-nodes/contracts/forwarder\#transferownershipwithmessage)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```solidity
function transferOwnershipWithMessage(address to, bytes message) external

```

Transfer ownership with instructions for recipient.Emit [OwnershipTransferRequestedWithMessage](https://docs.chain.link/chainlink-nodes/contracts/forwarder#ownershiptransferrequestedwithmessage) event.

##### [Parameters](https://docs.chain.link/chainlink-nodes/contracts/forwarder\#parameters-2)

| Name | Type | Description |
| --- | --- | --- |
| to | address | address proposed recipient of ownership |
| message | bytes | instructions for recipient upon accepting ownership |

### [Events](https://docs.chain.link/chainlink-nodes/contracts/forwarder\#events)

#### [OwnershipTransferRequestedWithMessage](https://docs.chain.link/chainlink-nodes/contracts/forwarder\#ownershiptransferrequestedwithmessage)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```solidity
event OwnershipTransferRequestedWithMessage(address from, address to, bytes message)

```

## Get the latest Chainlink content straight to your inbox.

Email Address

[iframe](https://td.doubleclick.net/td/rul/346357746?random=1748840198077&cv=11&fst=1748840198077&fmt=3&bg=ffffff&guid=ON&async=1&gcl_ctr=1&gtm=45be55s2v891173849z8847174275za200zb847174275&gcd=13l3l3l3l1l1&dma=0&tag_exp=101509157~103116026~103200004~103233427~103252644~103252646~103351869~103351871~104481633~104481635~104559073~104559075~104612245~104612247&ptag_exp=101509157~103116026~103200004~103233427~103252644~103252646~103351866~103351868~104481633~104481635~104559073~104559075~104612245~104612247&u_w=1280&u_h=1024&url=https%3A%2F%2Fdocs.chain.link%2Fchainlink-nodes%2Fcontracts%2Fforwarder&_ng=1&label=_duuCKn_k4cYEPL_k6UB&hn=www.googleadservices.com&frm=0&tiba=Forwarder%20%7C%20Chainlink%20Documentation&value=0&bttype=purchase&npa=0&pscdl=noapi&auid=1825046013.1748840198&uaa=x86&uab=64&uafvl=Google%2520Chrome%3B137.0.7151.55%7CChromium%3B137.0.7151.55%7CNot%252FA)Brand%3B24.0.0.0&uamb=0&uam=&uap=Linux%20x86_64&uapv=6.6.72&uaw=0&ec_mode=a&fledge=1&capi=1&_tu=Cg&em=tv.1&ct_cookie_present=0)

## Chainlink Receiver Contract
[iframe](https://www.googletagmanager.com/ns.html?id=GTM-N6DQ47T)

Chainlink CCIP is now officially live on Solana. [View lanes and tokens.](https://docs.chain.link/ccip/directory/mainnet/chain/solana-mainnet?utm_medium=referral&utm_source=chainlink-docs&utm_campaign=solana-ccip)

On this page

# [Receiver](https://docs.chain.link/chainlink-nodes/contracts/receiver\#overview)

[AuthorizedReceiver](https://github.com/smartcontractkit/chainlink/blob/contracts-v1.3.0/contracts/src/v0.8/operatorforwarder/AuthorizedReceiver.sol) is an abstract contract inherited by [operator](https://docs.chain.link/chainlink-nodes/contracts/operator) and [forwarder](https://docs.chain.link/chainlink-nodes/contracts/forwarder) contracts.

## [API reference](https://docs.chain.link/chainlink-nodes/contracts/receiver\#api-reference)

### [Methods](https://docs.chain.link/chainlink-nodes/contracts/receiver\#methods)

#### [setAuthorizedSenders](https://docs.chain.link/chainlink-nodes/contracts/receiver\#setauthorizedsenders)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```solidity
function setAuthorizedSenders(address[] senders) external

```

Sets the fulfillment permission for a given node. Use `true` to allow, `false` to disallow.
Emits an [AuthorizedSendersChanged](https://docs.chain.link/chainlink-nodes/contracts/receiver#authorizedsenderschanged) event.

##### [Parameters](https://docs.chain.link/chainlink-nodes/contracts/receiver\#parameters)

| Name | Type | Description |
| --- | --- | --- |
| senders | address\[\] | The addresses of the authorized Chainlink node |

#### [getAuthorizedSenders](https://docs.chain.link/chainlink-nodes/contracts/receiver\#getauthorizedsenders)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```solidity
function getAuthorizedSenders() external view returns (address[])

```

Retrieve a list of authorized senders.

##### [Return values](https://docs.chain.link/chainlink-nodes/contracts/receiver\#return-values)

| Name | Type | Description |
| --- | --- | --- |
|  | address\[\] | array of addresses |

#### [isAuthorizedSender](https://docs.chain.link/chainlink-nodes/contracts/receiver\#isauthorizedsender)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```solidity
function isAuthorizedSender(address sender) public view returns (bool)

```

Use this to check if a node is authorized to fulfill requests.

##### [Parameters](https://docs.chain.link/chainlink-nodes/contracts/receiver\#parameters-1)

| Name | Type | Description |
| --- | --- | --- |
| sender | address | The address of the Chainlink node |

##### [Return values](https://docs.chain.link/chainlink-nodes/contracts/receiver\#return-values-1)

| Name | Type | Description |
| --- | --- | --- |
|  | bool | The authorization status of the node |

### [Events](https://docs.chain.link/chainlink-nodes/contracts/receiver\#events)

#### [AuthorizedSendersChanged](https://docs.chain.link/chainlink-nodes/contracts/receiver\#authorizedsenderschanged)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```solidity
event AuthorizedSendersChanged(address[] senders, address changedBy)

```

## Get the latest Chainlink content straight to your inbox.

Email Address

[iframe](https://td.doubleclick.net/td/rul/346357746?random=1748840198089&cv=11&fst=1748840198089&fmt=3&bg=ffffff&guid=ON&async=1&gcl_ctr=1&gtm=45be55s2v891173849z8847174275za200zb847174275&gcd=13l3l3l3l1l1&dma=0&tag_exp=101509157~103116026~103200004~103233427~103252644~103252646~103351866~103351868~104481633~104481635~104559073~104559075~104612245~104612247~103308615&ptag_exp=101509157~103116026~103200004~103233427~103252644~103252646~103351866~103351868~104481633~104481635~104559073~104559075~104612245~104612247&u_w=1280&u_h=1024&url=https%3A%2F%2Fdocs.chain.link%2Fchainlink-nodes%2Fcontracts%2Freceiver&_ng=1&label=_duuCKn_k4cYEPL_k6UB&hn=www.googleadservices.com&frm=0&tiba=Receiver%20%7C%20Chainlink%20Documentation&value=0&bttype=purchase&npa=0&pscdl=noapi&auid=341056732.1748840198&uaa=x86&uab=64&uafvl=Google%2520Chrome%3B137.0.7151.55%7CChromium%3B137.0.7151.55%7CNot%252FA)Brand%3B24.0.0.0&uamb=0&uam=&uap=Linux%20x86_64&uapv=6.6.72&uaw=0&ec_mode=a&fledge=1&capi=1&_tu=Cg&em=tv.1&ct_cookie_present=0)

## Chainlink Contract Addresses
[iframe](https://www.googletagmanager.com/ns.html?id=GTM-N6DQ47T)

Chainlink CCIP is now officially live on Solana. [View lanes and tokens.](https://docs.chain.link/ccip/directory/mainnet/chain/solana-mainnet?utm_medium=referral&utm_source=chainlink-docs&utm_campaign=solana-ccip)

On this page

# [Contract addresses](https://docs.chain.link/chainlink-nodes/contracts/addresses\#overview)

This page lists the [operator factory](https://docs.chain.link/chainlink-nodes/contracts/operatorfactory) addresses for different networks.

## [Ethereum](https://docs.chain.link/chainlink-nodes/contracts/addresses\#ethereum)

### [Mainnet](https://docs.chain.link/chainlink-nodes/contracts/addresses\#mainnet)

[0x3E64Cd889482443324F91bFA9c84fE72A511f48A](https://etherscan.io/address/0x3E64Cd889482443324F91bFA9c84fE72A511f48A "0x3E64Cd889482443324F91bFA9c84fE72A511f48A")![Copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

### [Sepolia](https://docs.chain.link/chainlink-nodes/contracts/addresses\#sepolia)

[0x447Fd5eC2D383091C22B8549cb231a3bAD6d3fAf](https://sepolia.etherscan.io/address/0x447Fd5eC2D383091C22B8549cb231a3bAD6d3fAf "0x447Fd5eC2D383091C22B8549cb231a3bAD6d3fAf")![Copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

## Get the latest Chainlink content straight to your inbox.

Email Address

## Chainlink Forwarder Tutorial
[iframe](https://www.googletagmanager.com/ns.html?id=GTM-N6DQ47T)

Chainlink CCIP is now officially live on Solana. [View lanes and tokens.](https://docs.chain.link/ccip/directory/mainnet/chain/solana-mainnet?utm_medium=referral&utm_source=chainlink-docs&utm_campaign=solana-ccip)

On this page

# [Forwarder tutorial](https://docs.chain.link/chainlink-nodes/v1/using-forwarder\#overview)

![](https://docs.chain.link/images/chainlink-nodes/node-operators/forwarder/forwarder-directrequest-example.webp)

In this tutorial, you will configure your Chainlink node with a simple transaction-sending strategy on the Sepolia testnet:

- Your node has two externally owned accounts (EOA).
- Your node has two [direct request](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-jobs/#direct-request-jobs) jobs. One job returns _uint256_, and the other returns _string_.
- Each job uses a different EOA.
- You use a [forwarder](https://docs.chain.link/chainlink-nodes/contracts/forwarder) contract to fulfill requests with two EOAs that look like a single address.

## [Check your Chainlink node is running](https://docs.chain.link/chainlink-nodes/v1/using-forwarder\#check-your-chainlink-node-is-running)

On your terminal, check that your Chainlink node is running:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
 docker ps -a -f name=chainlink

 CONTAINER ID   IMAGE                            COMMAND               CREATED         STATUS                   PORTS                    NAMES
 feff39f340d6   smartcontract/chainlink:1.12.0   "chainlink local n"   4 minutes ago   Up 4 minutes (healthy)   0.0.0.0:6688->6688/tcp   chainlink

```

Your Chainlink Operator Interface is accessible on [http://localhost:6688](http://localhost:6688/). If using a VPS, you can create a [SSH tunnel](https://www.howtogeek.com/168145/how-to-use-ssh-tunneling/) to your node for `6688:localhost:6688` to enable connectivity to the GUI. Typically this is done with `ssh -i $KEY $USER@$REMOTE-IP -L 6688:localhost:6688 -N`. A SSH tunnel is recommended over opening up ports specific to the Chainlink node to be public facing. See the [Security and Operation Best Practices](https://docs.chain.link/chainlink-nodes/resources/best-security-practices) page for more details on how to secure your node.

If you don't have a running Chainlink node, follow the [Running a Chainlink Node Locally](https://docs.chain.link/chainlink-nodes/v1/running-a-chainlink-node) guide.

## [Set up multiple EOAs](https://docs.chain.link/chainlink-nodes/v1/using-forwarder\#set-up-multiple-eoas)

1. Access the shell of your Chainlink node container:



![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)



```shell
docker exec -it chainlink /bin/bash

```





![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)



```shell
chainlink@1d095e4ceb09:~$

```

2. You can now log in by running:



![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)



```shell
chainlink admin login

```



You will be prompted to enter your API email and password. If successful, the prompt will appear again.

3. Check the number of available EOA:



![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)



```shell
chainlink keys eth list

```



You should see one EOA:



![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)



```shell
🔑 ETH keys
   -------------------------------------------------------------------------------------------------
Address:           0x71a1Eb6534054E75F0D6fD0A3B0A336228DD5cFc
EVM Chain ID:      11155111
Next Nonce:        0
ETH:               0.000000000000000000
LINK:              0
Disabled:          false
Created:           2023-03-02 09:28:26.872791 +0000 UTC
Updated:           2023-03-02 09:28:26.872791 +0000 UTC
Max Gas Price Wei: 115792089237316195423570985008687907853269984665640564039457584007913129639935chainlink@22480bec8986

```

4. Create a new EOA for your Chainlink node:



![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)



```shell
chainlink keys eth create

```





![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)



```shell
ETH key created.

🔑 New key
   -------------------------------------------------------------------------------------------------
Address:           0x259c49E65644a020C2A642260a4ffB0CD862cb24
EVM Chain ID:      11155111
Next Nonce:        0
ETH:               0.000000000000000000
LINK:              0
Disabled:          false
Created:           2023-03-02 11:36:48.717074 +0000 UTC
Updated:           2023-03-02 11:36:48.717074 +0000 UTC
Max Gas Price Wei: 115792089237316195423570985008687907853269984665640564039457584007913129639935

```

5. At this point, there are two EOAs:



![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)



```shell
chainlink keys eth list

```





![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)



```shell
🔑 ETH keys
   -------------------------------------------------------------------------------------------------
Address:           0x259c49E65644a020C2A642260a4ffB0CD862cb24
EVM Chain ID:      11155111
Next Nonce:        0
ETH:               0.000000000000000000
LINK:              0
Disabled:          false
Created:           2023-03-02 11:36:48.717074 +0000 UTC
Updated:           2023-03-02 11:36:48.717074 +0000 UTC
Max Gas Price Wei: 115792089237316195423570985008687907853269984665640564039457584007913129639935
   -------------------------------------------------------------------------------------------------
Address:           0x71a1Eb6534054E75F0D6fD0A3B0A336228DD5cFc
EVM Chain ID:      11155111
Next Nonce:        0
ETH:               0.000000000000000000
LINK:              0
Disabled:          false
Created:           2023-03-02 09:28:26.872791 +0000 UTC
Updated:           2023-03-02 09:28:26.872791 +0000 UTC
Max Gas Price Wei: 115792089237316195423570985008687907853269984665640564039457584007913129639935chainlink@22480bec8986

```

6. Fund the two addresses with _0.5_ Sepolia ETH each. You can obtain testnet ETH from the faucets listed on the [Link Token Contracts](https://docs.chain.link/resources/link-token-contracts) page.

7. Note the two addresses, as you will need them later.


## [Deploy operator and forwarder](https://docs.chain.link/chainlink-nodes/v1/using-forwarder\#deploy-operator-and-forwarder)

Use the [operator factory](https://docs.chain.link/chainlink-nodes/contracts/operatorfactory) to deploy both the [forwarder](https://docs.chain.link/chainlink-nodes/contracts/forwarder) and the [operator](https://docs.chain.link/chainlink-nodes/contracts/operator) contracts. You can find the factory address for each network on the [addresses](https://docs.chain.link/chainlink-nodes/contracts/addresses) page.

1. Open contract [0x447Fd5eC2D383091C22B8549cb231a3bAD6d3fAf](https://sepolia.etherscan.io/address/0x447Fd5eC2D383091C22B8549cb231a3bAD6d3fAf) to display the factory in the Sepolia block explorer.

2. Click the _Contract_ tab. Then, click _Write Contract_ to display the _write_ transactions on the factory.
![](https://docs.chain.link/images/chainlink-nodes/node-operators/forwarder/factorytransactions.jpg)
3. Click the _Connect to Web3_ button to connect your wallet.
![](https://docs.chain.link/images/chainlink-nodes/node-operators/forwarder/factorytransactionsconnected.jpg)
4. Click the `deployNewOperatorAndForwarder` function to expand it and then click the _Write_ button to run the function. Metamask prompts you to confirm the transaction.

5. Click _View your transaction_. _Etherscan_ will open a new tab. Wait for the transaction to be successful.
![](https://docs.chain.link/images/chainlink-nodes/node-operators/forwarder/factoryviewtransaction.jpg)![](https://docs.chain.link/images/chainlink-nodes/node-operators/forwarder/deployfromfactorysuccess.jpg)
6. On the _Transaction Details_ page, click _Logs_ to display the list of transaction events. Notice the `OperatorCreated` and `AuthorizedForwarderCreated` events.
![](https://docs.chain.link/images/chainlink-nodes/node-operators/forwarder/factorycreatetransactions.jpg)
7. Right-click on each contract address and open it in a new tab.

8. At this point, you should have one tab displaying the operator contract and one tab displaying the forwarder contract.
![](https://docs.chain.link/images/chainlink-nodes/node-operators/forwarder/operator.jpg)![](https://docs.chain.link/images/chainlink-nodes/node-operators/forwarder/forwarder.jpg)
9. Record the operator and forwarder addresses. You will need them later.


## [Access control setup](https://docs.chain.link/chainlink-nodes/v1/using-forwarder\#access-control-setup)

As explained in the [forwarder](https://docs.chain.link/chainlink-nodes/contracts/forwarder) page:

- The owner of a forwarder contract is an [operator](https://docs.chain.link/chainlink-nodes/contracts/operator) contract. The owner of the operator contract is a more secure address, such as a hardware wallet or a multisig wallet. Therefore, node operators can manage a set of forwarder contracts through an operator contract using a secure account such as hardware or a multisig wallet.
- Forwarder contracts distinguish between owners and authorized senders. Authorized senders are hot wallets (Chainlink nodes' EOAs).

For this example to run, you will have to:

- Allow the forwarder contract to call the operator's [fulfillOracleRequest2](https://docs.chain.link/chainlink-nodes/contracts/operator#fulfilloraclerequest2) function by calling the [setauthorizedsenders](https://docs.chain.link/chainlink-nodes/contracts/receiver#setauthorizedsenders) function on the operator contract. Specify the forwarder address as a parameter.
- Allow the two Chainlink node EOAs to call the forwarder's [forward](https://docs.chain.link/chainlink-nodes/contracts/forwarder#forward) function. Because the operator contract owns the forwarder contract, call [acceptAuthorizedReceivers](https://docs.chain.link/chainlink-nodes/contracts/operator#acceptauthorizedreceivers) on the operator contract. Specify the forwarder contract address and the two Chainlink node EOAs as parameters. This call makes the operator contract accept ownership of the forwarder contract and authorizes the Chainlink node EOAs to call the forwarder contract by calling [setauthorizedsenders](https://docs.chain.link/chainlink-nodes/contracts/receiver#setauthorizedsenders).

### [Whitelist the forwarder](https://docs.chain.link/chainlink-nodes/v1/using-forwarder\#whitelist-the-forwarder)

In the blockchain explorer, view the operator contract and call the `setAuthorizedSenders` method with the address of your forwarder contract. The parameter is an array. For example, `["0xA3f07D6773514480b918C2742b027b3acD9E44fA"]`. Metamask prompts you to confirm the transaction.

![](https://docs.chain.link/images/chainlink-nodes/node-operators/forwarder/operatorsetauthorizedsenders.jpg)

### [Whitelist the Chainlink node EOAs](https://docs.chain.link/chainlink-nodes/v1/using-forwarder\#whitelist-the-chainlink-node-eoas)

In the blockchain explorer, view the operator contract and call the `acceptAuthorizedReceivers` method with the following parameters:

- `targets`: Specify an array of forwarder addresses. For example, `["0xA3f07D6773514480b918C2742b027b3acD9E44fA"]`
- `sender`: Specify an array with the two Chainlink node EOAs. For example, `["0x259c49E65644a020C2A642260a4ffB0CD862cb24","0x71a1Eb6534054E75F0D6fD0A3B0A336228DD5cFc"]`.

MetaMask prompts you to confirm the transaction.

![](https://docs.chain.link/images/chainlink-nodes/node-operators/forwarder/acceptAuthorizedReceivers.jpg)

## [Activate the forwarder](https://docs.chain.link/chainlink-nodes/v1/using-forwarder\#activate-the-forwarder)

1. In the shell of your Chainlink node, enable the forwarder using the Chainlink CLI. Replace `forwarderAddress` with the forwarder address that was created by the factory. Replace `chainId` with the EVM chain ID. ( `11155111` for Sepolia):



![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)



```shell
chainlink forwarders track --address forwarderAddress --evmChainID chainId

```



In this example, the command is:



![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)



```shell
chainlink forwarders track --address 0xA3f07D6773514480b918C2742b027b3acD9E44fA --evmChainID 11155111

```





![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)



```shell
Forwarder created
   ------------------------------------------------------
ID:         1
Address:    0xA3f07D6773514480b918C2742b027b3acD9E44fA
Chain ID:   11155111
Created At: 2023-03-02T11:41:43Zchainlink@22480bec8986

```

2. Exit the shell of your Chainlink node:



![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)



```shell
exit

```

3. Stop your Chainlink node:



![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)



```shell
docker stop chainlink && docker rm chainlink

```

4. Update your environment file. If you followed [Running a Chainlink Node locally](https://docs.chain.link/chainlink-nodes/v1/running-a-chainlink-node) guide then add `ETH_USE_FORWARDERS=true` and `FEATURE_LOG_POLLER=true` to your environment file:



![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)



```shell
echo "ETH_USE_FORWARDERS=true
FEATURE_LOG_POLLER=true" >> ~/.chainlink-sepolia/.env

```


   - `ETH_USE_FORWARDERS` enables sending transactions through forwarder contracts.
   - `FEATURE_LOG_POLLER` enables polling forwarder contracts logs to detect any changes to the authorized senders.
5. Start the Chainlink node:



![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)



```shell
cd ~/.chainlink-sepolia && docker run --platform linux/x86_64/v8 --name chainlink  -v ~/.chainlink-sepolia:/chainlink -it --env-file=.env -p 6688:6688 smartcontract/chainlink:1.12.0 local n

```

6. You will be prompted to enter the key store password:



![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)



```shell
2022-12-22T16:18:04.706Z [WARN]  P2P_LISTEN_PORT was not set, listening on random port 59763. A new random port will be generated on every boot, for stability it is recommended to set P2P_LISTEN_PORT to a fixed value in your environment config/p2p_v1_config.go:84       logger=1.10.0@aeb8c80.GeneralConfig p2pPort=59763
2022-12-22T16:18:04.708Z [DEBUG] Offchain reporting disabled                       chainlink/application.go:373     logger=1.10.0@aeb8c80
2022-12-22T16:18:04.709Z [DEBUG] Offchain reporting v2 disabled                    chainlink/application.go:422     logger=1.10.0@aeb8c80
Enter key store password:

```

7. Enter the key store password and wait for your Chainlink node to start.


## [Create directRequest jobs](https://docs.chain.link/chainlink-nodes/v1/using-forwarder\#create-directrequest-jobs)

This section is similar to the [Fulfilling Requests](https://docs.chain.link/chainlink-nodes/v1/fulfilling-requests) guide.

1. Open the Chainlink Operator UI.

2. On the **Jobs** tab, click **New Job**.

3. Create the `uint256` job. Replace:
   - `YOUR_OPERATOR_CONTRACT_ADDRESS` with the address of your deployed operator contract address.

   - `EOA_ADDRESS` with the **first** Chainlink node EOA.



     ![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)



     ```solidity
     # THIS IS EXAMPLE CODE THAT USES HARDCODED VALUES FOR CLARITY.
     # THIS IS EXAMPLE CODE THAT USES UN-AUDITED CODE.
     # DO NOT USE THIS CODE IN PRODUCTION.

     # evmChainID for Sepolia Testnet
     evmChainID = "11155111"
     contractAddress = "YOUR_OPERATOR_CONTRACT_ADDRESS"
     forwardingAllowed = true
     maxTaskDuration = "0s"
     minIncomingConfirmations = 0
     name = "Get > Uint256"
     observationSource = """
         decode_log   [type="ethabidecodelog"\
                       abi="OracleRequest(bytes32 indexed specId, address requester, bytes32 requestId, uint256 payment, address callbackAddr, bytes4 callbackFunctionId, uint256 cancelExpiration, uint256 dataVersion, bytes data)"\
                       data="$(jobRun.logData)"\
                       topics="$(jobRun.logTopics)"]

         decode_cbor  [type="cborparse" data="$(decode_log.data)"]
         fetch        [type="http" method=GET url="$(decode_cbor.get)" allowUnrestrictedNetworkAccess="true"]
         parse        [type="jsonparse" path="$(decode_cbor.path)" data="$(fetch)"]

         multiply     [type="multiply" input="$(parse)" times="$(decode_cbor.times)"]

         encode_data  [type="ethabiencode" abi="(bytes32 requestId, uint256 value)" data="{ \\"requestId\\": $(decode_log.requestId), \\"value\\": $(multiply) }"]
         encode_tx    [type="ethabiencode"\
                       abi="fulfillOracleRequest2(bytes32 requestId, uint256 payment, address callbackAddress, bytes4 callbackFunctionId, uint256 expiration, bytes calldata data)"\
                       data="{\\"requestId\\": $(decode_log.requestId), \\"payment\\":   $(decode_log.payment), \\"callbackAddress\\": $(decode_log.callbackAddr), \\"callbackFunctionId\\": $(decode_log.callbackFunctionId), \\"expiration\\": $(decode_log.cancelExpiration), \\"data\\": $(encode_data)}"\
                       ]
         submit_tx    [type="ethtx" to="YOUR_OPERATOR_CONTRACT_ADDRESS" data="$(encode_tx)" from="[\\"EOA_ADDRESS\\"]"]

         decode_log -> decode_cbor -> fetch -> parse -> multiply -> encode_data -> encode_tx -> submit_tx
     """
     schemaVersion = 1
     type = "directrequest"

     ```
4. Create the `string` job. Replace:
   - `YOUR_OPERATOR_CONTRACT_ADDRESS` with the address of your deployed operator contract address.

   - `EOA_ADDRESS` with the **second** Chainlink node EOA.



     ![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)



     ```solidity
     # THIS IS EXAMPLE CODE THAT USES HARDCODED VALUES FOR CLARITY.
     # THIS IS EXAMPLE CODE THAT USES UN-AUDITED CODE.
     # DO NOT USE THIS CODE IN PRODUCTION.

     # evmChainID for Sepolia Testnet
     evmChainID = "11155111"
     contractAddress = "YOUR_OPERATOR_CONTRACT_ADDRESS"
     forwardingAllowed = true
     maxTaskDuration = "0s"
     minIncomingConfirmations = 0
     name = "Get > String"
     observationSource = """
         decode_log   [type="ethabidecodelog"\
                       abi="OracleRequest(bytes32 indexed specId, address requester, bytes32 requestId, uint256 payment, address callbackAddr, bytes4 callbackFunctionId, uint256 cancelExpiration, uint256 dataVersion, bytes data)"\
                       data="$(jobRun.logData)"\
                       topics="$(jobRun.logTopics)"]

         decode_cbor  [type="cborparse" data="$(decode_log.data)"]
         fetch        [type="http" method=GET url="$(decode_cbor.get)" allowUnrestrictedNetworkAccess="true"]
         parse        [type="jsonparse" path="$(decode_cbor.path)" data="$(fetch)"]
         encode_data  [type="ethabiencode" abi="(bytes32 requestId, string value)" data="{ \\"requestId\\": $(decode_log.requestId), \\"value\\": $(parse) }"]
         encode_tx    [type="ethabiencode"\
                       abi="fulfillOracleRequest2(bytes32 requestId, uint256 payment, address callbackAddress, bytes4 callbackFunctionId, uint256 expiration, bytes calldata data)"\
                       data="{\\"requestId\\": $(decode_log.requestId), \\"payment\\":   $(decode_log.payment), \\"callbackAddress\\": $(decode_log.callbackAddr), \\"callbackFunctionId\\": $(decode_log.callbackFunctionId), \\"expiration\\": $(decode_log.cancelExpiration), \\"data\\": $(encode_data)}"\
                       ]
         submit_tx    [type="ethtx" to="YOUR_OPERATOR_CONTRACT_ADDRESS" data="$(encode_tx)" from="[\\"EOA_ADDRESS\\"]"]

         decode_log -> decode_cbor -> fetch -> parse -> encode_data -> encode_tx -> submit_tx
     """
     schemaVersion = 1
     type = "directrequest"

     ```
5. After you create the jobs, record the two job IDs.


## [Test the transaction-sending strategy](https://docs.chain.link/chainlink-nodes/v1/using-forwarder\#test-the-transaction-sending-strategy)

### [Create API requests](https://docs.chain.link/chainlink-nodes/v1/using-forwarder\#create-api-requests)

01. Open [APIConsumerForwarder.sol](https://remix.ethereum.org/#url=https://docs.chain.link/samples/APIRequests/APIConsumerForwarder.sol) in the Remix IDE.

02. Note that `_setChainlinkToken(0x779877A7B0D9E8603169DdbD7836e478b4624789)` is configured for _Sepolia_.

03. On the **Compiler** tab, click the **Compile** button for `APIConsumerForwarder.sol`.

04. On the **Deploy and Run** tab, configure the following settings:
    - Select _Injected Provider_ as your environment. Make sure your metamask is connected to Sepolia.
    - Select _APIConsumerForwarder_ from the **Contract** menu.
05. Click **Deploy**. MetaMask prompts you to confirm the transaction.

06. Fund the contract by sending LINK to the contract's address. See the [Fund Your Contracts](https://docs.chain.link/resources/fund-your-contract) page for instructions. The address for the `ATestnetConsumer` contract is on the list of your deployed contracts in Remix. You can fund your contract with 1 LINK.

07. After you fund the contract, create a request. Input your operator contract address and the job ID for the `Get > Uint256` job into the `requestEthereumPrice` request method **without dashes**. The job ID is the `externalJobID` parameter, which you can find on your job's definition page in the Node Operators UI.

08. Click the **transact** button for the `requestEthereumPrice` function and approve the transaction in Metamask. The `requestEthereumPrice` function asks the node to retrieve `uint256` data specifically from [https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=USD](https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=USD).

09. After the transaction processes, open the **Runs** page in the Node Operators UI. You can see the details for the completed the job run.

10. In Remix, click the `currentPrice` variable to see the current price updated on your consumer contract.

11. Input your operator contract address and the job ID for the `Get > String` job into the `requestFirstId` request method **without dashes**. The job ID is the `externalJobID` parameter, which you can find on your job's definition page in the Node Operators UI.

12. Click the **transact** button for the `requestFirstId` function and approve the transaction in Metamask. The `requestFirstId` function asks the node to retrieve the first `id` from [https://api.coingecko.com/api/v3/coins/markets?vs\_currency=usd&per\_page=10](https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&per_page=10).

13. After the transaction processes, you can see the details for the complete the job run the **Runs** page in the Node Operators UI.

14. In Remix, click the `id` variable to see the current price updated on your consumer contract.


### [Check the forwarder](https://docs.chain.link/chainlink-nodes/v1/using-forwarder\#check-the-forwarder)

Confirm the following information:

- The Chainlink node submitted the callbacks to the forwarder contract.
- Each callback used a different account.
- The forwarder contract forwarded the callbacks to the operator contract.

Open your forwarder contract in the block explorer. Two [forward](https://docs.chain.link/chainlink-nodes/contracts/forwarder#forward) transactions exist.

![](https://docs.chain.link/images/chainlink-nodes/node-operators/forwarder/forward-transactions.jpg)

Click on both transaction hashes and note that the `From` addresses differ. In this example, `0x259c49E65644a020C2A642260a4ffB0CD862cb24` is the EOA used in the `uint256` job, and `0x71a1Eb6534054E75F0D6fD0A3B0A336228DD5cFc` is the EOA used in the `string` job:

![](https://docs.chain.link/images/chainlink-nodes/node-operators/forwarder/forward1.jpg)![](https://docs.chain.link/images/chainlink-nodes/node-operators/forwarder/forward2.jpg)

Then click on the `Logs` tab to display the list of events. Notice the [OracleResponse](https://docs.chain.link/chainlink-nodes/contracts/operator#oracleresponse) events. The operator contract emitted them when the Forward contract called it

![](https://docs.chain.link/images/chainlink-nodes/node-operators/forwarder/forward1-logs.jpg)![](https://docs.chain.link/images/chainlink-nodes/node-operators/forwarder/forward2-logs.jpg)

## Get the latest Chainlink content straight to your inbox.

Email Address

[iframe](https://td.doubleclick.net/td/rul/346357746?random=1748840203375&cv=11&fst=1748840203375&fmt=3&bg=ffffff&guid=ON&async=1&gcl_ctr=1&gtm=45be55s2v891173849z8847174275za200zb847174275&gcd=13l3l3l3l1l1&dma=0&tag_exp=101509157~102015666~103116026~103200004~103233427~103252644~103252646~103351869~103351871~104481633~104481635~104559073~104559075~104612245~104612247&ptag_exp=101509157~103116026~103200004~103233427~103252644~103252646~103351866~103351868~104481633~104481635~104559073~104559075~104612245~104612247&u_w=1280&u_h=1024&url=https%3A%2F%2Fdocs.chain.link%2Fchainlink-nodes%2Fv1%2Fusing-forwarder&_ng=1&label=_duuCKn_k4cYEPL_k6UB&hn=www.googleadservices.com&frm=0&tiba=Forwarder%20tutorial%20%7C%20Chainlink%20Documentation&value=0&bttype=purchase&npa=0&pscdl=noapi&auid=1455042224.1748840203&uaa=x86&uab=64&uafvl=Google%2520Chrome%3B137.0.7151.55%7CChromium%3B137.0.7151.55%7CNot%252FA)Brand%3B24.0.0.0&uamb=0&uam=&uap=Linux%20x86_64&uapv=6.6.72&uaw=0&ec_mode=a&fledge=1&capi=1&_tu=Cg&em=tv.1&ct_cookie_present=0)

## Chainlink Tasks Overview
[iframe](https://www.googletagmanager.com/ns.html?id=GTM-N6DQ47T)

Chainlink CCIP is now officially live on Solana. [View lanes and tokens.](https://docs.chain.link/ccip/directory/mainnet/chain/solana-mainnet?utm_medium=referral&utm_source=chainlink-docs&utm_campaign=solana-ccip)

On this page

# [Tasks](https://docs.chain.link/chainlink-nodes/oracle-jobs/tasks\#overview)

## [What is a Task?](https://docs.chain.link/chainlink-nodes/oracle-jobs/tasks\#what-is-a-task)

Tasks are a replacement for core adapters that is more flexible. Tasks can be composed in arbitrary order into [pipelines](https://docs.chain.link/chainlink-nodes/oracle-jobs/tasks#writing-pipelines). Pipelines consist of one or more threads of execution where tasks are executed in a well-defined order.

You can use Chainlink's [built-in tasks](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-tasks), or you can create your own [external adapters](https://docs.chain.link/chainlink-nodes/external-adapters/external-adapters) for tasks which are accessed through a `bridge`.

## [Shared attributes](https://docs.chain.link/chainlink-nodes/oracle-jobs/tasks\#shared-attributes)

All tasks share a few common attributes:

`index`: when a task has more than one input (or the pipeline overall needs to support more than one final output), and the ordering of the values matters, the index parameter can be used to specify that ordering.

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
data_1 [type="http" method=GET url="https://chain.link/eth_usd"       index=0]
data_2 [type="http" method=GET url="https://chain.link/eth_dominance" index=1]
multiword_abi_encode [type="eth_abi_encode" method="fulfill(uint256,uint256)"]

data_1 -> multiword_abi_encode
data_2 -> multiword_abi_encode

```

`timeout`: The maximum duration that the task is allowed to run before it is considered to be errored. Overrides the `maxTaskDuration` value in the job spec.

## [Writing pipelines](https://docs.chain.link/chainlink-nodes/oracle-jobs/tasks\#writing-pipelines)

Pipelines are composed of tasks arranged in a DAG (directed acyclic graph). Pipelines are expressed in [DOT syntax](https://en.wikipedia.org/wiki/DOT_%28graph_description_language%29#Directed_graphs).

Each node in the graph is a task with a user-specified ID and a set of configuration parameters and attributes:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
my_fetch_task [type="http" method=GET url="https://chain.link/eth_usd"]

```

The edges between tasks define how data flows from one task to the next. Some tasks can have multiple inputs, such as `median`. Other tasks are limited to 0 ( `http`) or 1 ( `jsonparse`).

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
data_source_1  [type="http" method=GET url="https://chain.link/eth_usd"]
data_source_2  [type="http" method=GET url="https://coingecko.com/eth_usd"]
medianize_data [type="median"]
submit_to_ea   [type="bridge" name="my_bridge"]

data_source_1 -> medianize_data
data_source_2 -> medianize_data
medianize_data -> submit_to_ea

```

![DAG Example](https://docs.chain.link/images/dag_example.png)

## Get the latest Chainlink content straight to your inbox.

Email Address

## Chainlink v2 Jobs
[iframe](https://www.googletagmanager.com/ns.html?id=GTM-N6DQ47T)

Chainlink CCIP is now officially live on Solana. [View lanes and tokens.](https://docs.chain.link/ccip/directory/mainnet/chain/solana-mainnet?utm_medium=referral&utm_source=chainlink-docs&utm_campaign=solana-ccip)

On this page

# [v2 Jobs](https://docs.chain.link/chainlink-nodes/oracle-jobs/jobs\#overview)

## [What is a Job?](https://docs.chain.link/chainlink-nodes/oracle-jobs/jobs\#what-is-a-job)

Chainlink nodes require jobs to do anything useful. For example, posting asset price data onchain requires jobs. Chainlink nodes support the following job types:

- [`cron`](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-jobs/#solidity-cron-jobs)
- [`directrequest`](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-jobs/#direct-request-jobs)
- [`fluxmonitor`](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-jobs/#flux-monitor-jobs)
- [`keeper`](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-jobs/#keeper-jobs)
- [`offchainreporting`](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-jobs/#offchain-reporting-jobs)
- [`webhook`](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-jobs/#webhook-jobs)

Jobs are represented by TOML specifications.

## [Example v2 job spec](https://docs.chain.link/chainlink-nodes/oracle-jobs/jobs\#example-v2-job-spec)

The following is an example `cron` job spec. This is a simple spec that you can add to a node:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
type            = "cron"
schemaVersion   = 1
schedule        = "CRON_TZ=UTC 0 0 1 1 *"
# Optional externalJobID: Automatically generated if unspecified
# externalJobID   = "0EEC7E1D-D0D2-476C-A1A8-72DFB6633F46"
observationSource   = """
ds          [type="http" method=GET url="https://chain.link/ETH-USD"];
ds_parse    [type="jsonparse" path="data,price"];
ds_multiply [type="multiply" times=100];
ds -> ds_parse -> ds_multiply;
"""

```

## [Shared fields](https://docs.chain.link/chainlink-nodes/oracle-jobs/jobs\#shared-fields)

Every job type supported by a node shares the following TOML fields:

- `name`: The name of the job in the Operator UI
- `type`: Specifies the v2 job type, which can be one of the following:

  - `cron`
  - `directrequest`
  - `fluxmonitor`
  - `keeper`
  - `offchainreporting`
  - `webhook`
- `schemaVersion`: Must be present and set to a value of `1`. This field will handle progressive iterations of the job spec format gracefully with backwards-compatibility.
- `observationSource`: The v2 pipeline task DAG, which is specified in DOT syntax. See below for information on writing pipeline DAGs.
- `maxTaskDuration`: The default maximum duration that any task is allowed to run. If the duration is exceeded, the task is errored. This value can be overridden on a per-task basis using the `timeout` attribute. See the [Shared attributes](https://docs.chain.link/chainlink-nodes/oracle-jobs/tasks#shared-attributes) section for details.
- `externalJobID`: An optional way for a user to deterministically provide the ID of a job. The ID must be unique. For example, you can specify an `externalJobID` if you want to run the same `directrequest` job on two different Chainlink nodes with different bridge names. The spec contents differ slightly, but you can use the same `externalJobID` on both jobs, specify that in your onchain requests, and both nodes will pick it up. If you do not provide an `externalJobID`, the node generates the ID for you.
- `gasLimit`: Optional gas limit for any outgoing transactions spawned by this job. When specified, it overrides `ETH_GAS_LIMIT_DEFAULT` env variable.
- `forwardingAllowed`: Optional. When `true`, it allows forwarding transactions submitted by the job.

## Get the latest Chainlink content straight to your inbox.

Email Address

[iframe](https://td.doubleclick.net/td/rul/346357746?random=1748840203462&cv=11&fst=1748840203462&fmt=3&bg=ffffff&guid=ON&async=1&gcl_ctr=1&gtm=45be55s2v891173849z8847174275za200zb847174275&gcd=13l3l3l3l1l1&dma=0&tag_exp=101509157~103116026~103200004~103233427~103252644~103252646~103351869~103351871~104481633~104481635~104559073~104559075~104612245~104612247&ptag_exp=101509157~103116026~103200004~103233427~103252644~103252646~103351866~103351868~104481633~104481635~104559073~104559075~104612245~104612247&u_w=1280&u_h=1024&url=https%3A%2F%2Fdocs.chain.link%2Fchainlink-nodes%2Foracle-jobs%2Fjobs&_ng=1&label=_duuCKn_k4cYEPL_k6UB&hn=www.googleadservices.com&frm=0&tiba=v2%20Jobs%20%7C%20Chainlink%20Documentation&value=0&bttype=purchase&npa=0&pscdl=noapi&auid=851479259.1748840203&uaa=x86&uab=64&uafvl=Google%2520Chrome%3B137.0.7151.55%7CChromium%3B137.0.7151.55%7CNot%252FA)Brand%3B24.0.0.0&uamb=0&uam=&uap=Linux%20x86_64&uapv=6.6.72&uaw=0&ec_mode=a&fledge=1&capi=1&_tu=Cg&em=tv.1&ct_cookie_present=0)

## Chainlink Secrets Configuration
[iframe](https://www.googletagmanager.com/ns.html?id=GTM-N6DQ47T)

Chainlink CCIP is now officially live on Solana. [View lanes and tokens.](https://docs.chain.link/ccip/directory/mainnet/chain/solana-mainnet?utm_medium=referral&utm_source=chainlink-docs&utm_campaign=solana-ccip)

On this page

# [Secrets Config (TOML)](https://docs.chain.link/chainlink-nodes/v1/secrets-config\#overview)

This document describes the TOML format for secrets.

Each secret has an alternative corresponding environment variable.

See also: [Node Config](https://docs.chain.link/chainlink-nodes/v1/node-config)

## [Example](https://docs.chain.link/chainlink-nodes/v1/secrets-config\#example)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
[Database]
URL = 'postgresql://user:pass@localhost:5432/dbname?sslmode=disable' # Required

[Password]
Keystore = 'keystore_pass' # Required

```

## [Database](https://docs.chain.link/chainlink-nodes/v1/secrets-config\#database)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
[Database]
URL = "postgresql://user:pass@localhost:5432/dbname?sslmode=disable" # Example
BackupURL = "postgresql://user:pass@read-replica.example.com:5432/dbname?sslmode=disable" # Example
AllowSimplePasswords = false # Default

```

### [URL](https://docs.chain.link/chainlink-nodes/v1/secrets-config\#url)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
URL = "postgresql://user:pass@localhost:5432/dbname?sslmode=disable" # Example

```

URL is the PostgreSQL URI to connect to your database. Chainlink nodes require Postgres versions >= 11. See
[Running a Chainlink Node](https://docs.chain.link/docs/running-a-chainlink-node/#set-the-remote-database_url-config) for an example.

Environment variable: `CL_DATABASE_URL`

### [BackupURL](https://docs.chain.link/chainlink-nodes/v1/secrets-config\#backupurl)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
BackupURL = "postgresql://user:pass@read-replica.example.com:5432/dbname?sslmode=disable" # Example

```

BackupURL is where the automatic database backup will pull from, rather than the main CL\_DATABASE\_URL. It is recommended
to set this value to a read replica if you have one to avoid excessive load on the main database.

Environment variable: `CL_DATABASE_BACKUP_URL`

### [AllowSimplePasswords](https://docs.chain.link/chainlink-nodes/v1/secrets-config\#allowsimplepasswords)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
AllowSimplePasswords = false # Default

```

AllowSimplePasswords skips the password complexity check normally enforced on URL & BackupURL.

Environment variable: `CL_DATABASE_ALLOW_SIMPLE_PASSWORDS`

## [WebServer.LDAP](https://docs.chain.link/chainlink-nodes/v1/secrets-config\#webserverldap)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
[WebServer.LDAP]
ServerAddress = 'ldaps://127.0.0.1' # Example
ReadOnlyUserLogin = 'viewer@example.com' # Example
ReadOnlyUserPass = 'password' # Example

```

Optional LDAP config

### [ServerAddress](https://docs.chain.link/chainlink-nodes/v1/secrets-config\#serveraddress)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
ServerAddress = 'ldaps://127.0.0.1' # Example

```

ServerAddress is the full ldaps:// address of the ldap server to authenticate with and query

### [ReadOnlyUserLogin](https://docs.chain.link/chainlink-nodes/v1/secrets-config\#readonlyuserlogin)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
ReadOnlyUserLogin = 'viewer@example.com' # Example

```

ReadOnlyUserLogin is the username of the read only root user used to authenticate the requested LDAP queries

### [ReadOnlyUserPass](https://docs.chain.link/chainlink-nodes/v1/secrets-config\#readonlyuserpass)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
ReadOnlyUserPass = 'password' # Example

```

ReadOnlyUserPass is the password for the above account

## [Password](https://docs.chain.link/chainlink-nodes/v1/secrets-config\#password)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
[Password]
Keystore = "keystore_pass" # Example
VRF = "VRF_pass" # Example

```

### [Keystore](https://docs.chain.link/chainlink-nodes/v1/secrets-config\#keystore)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
Keystore = "keystore_pass" # Example

```

Keystore is the password for the node's account.

Environment variable: `CL_PASSWORD_KEYSTORE`

### [VRF](https://docs.chain.link/chainlink-nodes/v1/secrets-config\#vrf)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
VRF = "VRF_pass" # Example

```

VRF is the password for the vrf keys.

Environment variable: `CL_PASSWORD_VRF`

## [Pyroscope](https://docs.chain.link/chainlink-nodes/v1/secrets-config\#pyroscope)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
[Pyroscope]
AuthToken = "pyroscope-token" # Example

```

### [AuthToken](https://docs.chain.link/chainlink-nodes/v1/secrets-config\#authtoken)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
AuthToken = "pyroscope-token" # Example

```

AuthToken is the API key for the Pyroscope server.

Environment variable: `CL_PYROSCOPE_AUTH_TOKEN`

## [Prometheus](https://docs.chain.link/chainlink-nodes/v1/secrets-config\#prometheus)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
[Prometheus]
AuthToken = "prometheus-token" # Example

```

### [AuthToken](https://docs.chain.link/chainlink-nodes/v1/secrets-config\#authtoken-1)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
AuthToken = "prometheus-token" # Example

```

AuthToken is the authorization key for the Prometheus metrics endpoint.

Environment variable: `CL_PROMETHEUS_AUTH_TOKEN`

## [Mercury.Credentials.Name](https://docs.chain.link/chainlink-nodes/v1/secrets-config\#mercurycredentialsname)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
[Mercury.Credentials.Name]
Username = "A-Mercury-Username" # Example
Password = "A-Mercury-Password" # Example
URL = "https://example.com" # Example
LegacyURL = "https://example.v1.com" # Example

```

### [Username](https://docs.chain.link/chainlink-nodes/v1/secrets-config\#username)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
Username = "A-Mercury-Username" # Example

```

Username is used for basic auth of the Mercury endpoint

### [Password](https://docs.chain.link/chainlink-nodes/v1/secrets-config\#password-1)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
Password = "A-Mercury-Password" # Example

```

Password is used for basic auth of the Mercury endpoint

### [URL](https://docs.chain.link/chainlink-nodes/v1/secrets-config\#url-1)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
URL = "https://example.com" # Example

```

URL is the Mercury endpoint base URL used to access Mercury price feed

### [LegacyURL](https://docs.chain.link/chainlink-nodes/v1/secrets-config\#legacyurl)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
LegacyURL = "https://example.v1.com" # Example

```

LegacyURL is the Mercury legacy endpoint base URL used to access Mercury v0.2 price feed

## [Threshold](https://docs.chain.link/chainlink-nodes/v1/secrets-config\#threshold)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
[Threshold]
ThresholdKeyShare = "A-Threshold-Decryption-Key-Share" # Example

```

### [ThresholdKeyShare](https://docs.chain.link/chainlink-nodes/v1/secrets-config\#thresholdkeyshare)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
ThresholdKeyShare = "A-Threshold-Decryption-Key-Share" # Example

```

ThresholdKeyShare used by the threshold decryption OCR plugin

## Get the latest Chainlink content straight to your inbox.

Email Address

## Fulfilling Chainlink Requests
[iframe](https://www.googletagmanager.com/ns.html?id=GTM-N6DQ47T)

Chainlink CCIP is now officially live on Solana. [View lanes and tokens.](https://docs.chain.link/ccip/directory/mainnet/chain/solana-mainnet?utm_medium=referral&utm_source=chainlink-docs&utm_campaign=solana-ccip)

On this page

# [Fulfilling Requests](https://docs.chain.link/chainlink-nodes/v1/fulfilling-requests\#overview)

You can use your Chainlink nodes to fulfill requests. This guide shows you how to deploy your own operator contract and add jobs to your node so that it can provide data to smart contracts.

Chainlink nodes can fulfill requests from open or unauthenticated APIs without the need for [External Adapters](https://docs.chain.link/chainlink-nodes/external-adapters/external-adapters) as long as you've [added the jobs](https://docs.chain.link/chainlink-nodes/v1/fulfilling-requests#add-a-job-to-the-node) to the node. For these requests, requesters supply the URL to the open API that they want each node to retrieve. The Chainlink node will use [tasks](https://docs.chain.link/chainlink-nodes/oracle-jobs/tasks) to fulfill the request.

Some APIs require authentication by providing request headers for the operator's API key, which the Chainlink node supports. If you would like to provide access to an API that requires authentication, you must create a job that is specific for that API either using an [external adapter](https://docs.chain.link/chainlink-nodes/external-adapters/external-adapters) or by using the parameters of the [HTTP task](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-tasks/#http-task).

## [Requirements](https://docs.chain.link/chainlink-nodes/v1/fulfilling-requests\#requirements)

Before you begin this guide, complete the following tasks to make sure you have all of the tools that you need:

- [Set up MetaMask](https://docs.chain.link/quickstarts/deploy-your-first-contract/#install-and-fund-your-metamask-wallet) and [obtain testnet LINK](https://docs.chain.link/resources/acquire-link).

- [Run a Chainlink Node](https://docs.chain.link/chainlink-nodes/v1/running-a-chainlink-node).

- Fund the Ethereum address that your Chainlink node uses. You can find the address in the node Operator GUI under the **Key Management** configuration. The address of the node is the `Regular` type. You can obtain test ETH from several [faucets](https://docs.chain.link/resources/link-token-contracts). For this tutorial to work, you will have to fund the node's Ethereum address with Sepolia ETH. Here is an example:

![chainlink node fund address](https://docs.chain.link/images/chainlink-nodes/node-operators/key-management.jpg)


## [Address types](https://docs.chain.link/chainlink-nodes/v1/fulfilling-requests\#address-types)

Your node works with several different types of addresses. Each address type has a specific function:

- **Node address:** This is the address for your Chainlink node wallet. The node requires native gas tokens at all times to respond to requests. For this example, the node uses Sepolia ETH. When you start a Chainlink node, it automatically generates this address. You can find this address on the Node Operator GUI under **Key Management > EVM Chain Accounts**.
- **Oracle contract address:** This is the address for contracts like `Operator.sol` that are deployed to a blockchain. Do not fund these addresses with native gas tokens such as ETH. When you make API call requests, the funds pass through this contract to interact with your Chainlink node. This will be the address that smart contract developers point to when they choose a node for an API call.
- **Admin wallet address:** This is the address that owns your `Operator.sol` contract addresses. If you're on OCR, this is the wallet address that receives LINK tokens.

## [Set up your Operator contract](https://docs.chain.link/chainlink-nodes/v1/fulfilling-requests\#set-up-your-operator-contract)

### [Deploy your own Operator contract](https://docs.chain.link/chainlink-nodes/v1/fulfilling-requests\#deploy-your-own-operator-contract)

1. Go to Remix and open the [`Operator.sol` smart contract](https://remix.ethereum.org/#url=https://docs.chain.link/samples/ChainlinkNodes/Operator.sol&autoCompile=true).

2. On the **Compile** tab, click the **Compile** button for `Operator.sol`. Remix automatically selects the compiler version and language from the `pragma` line unless you select a specific version manually.

3. On the **Deploy and Run** tab, configure the following settings:


   - Select "Injected Provider" as your **Environment**. The Javascript VM environment cannot access your oracle node. Make sure your Metamask is connected to Sepolia testnet.

   - Select the "Operator" contract from the **Contract** menu.

   - Copy the [LINK token contract address](https://docs.chain.link/resources/link-token-contracts) for the network you are using and paste it into the `LINK` field next to the **Deploy** button. For Sepolia, you can use this address:



     ![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)



     ```text
     0x779877A7B0D9E8603169DdbD7836e478b4624789

     ```

   - Copy the _Admin wallet address_ into the `OWNER` field.


![The Deploy & Run transaction window showing Injected Web 3 selected and the address for your MetaMask wallet.](https://docs.chain.link/images/chainlink-nodes/node-operators/deploy-operator.jpg)

4. Click **transact**. MetaMask prompts you to confirm the transaction.

5. If the transaction is successful, a new address displays in the **Deployed Contracts** section.

![Screenshot showing the newly deployed contract.](https://docs.chain.link/images/chainlink-nodes/node-operators/operator-deployed.jpg)

6. Keep note of the Operator contract address. You need it later for your consuming contract.


### [Whitelist your node address in the Operator contract](https://docs.chain.link/chainlink-nodes/v1/fulfilling-requests\#whitelist-your-node-address-in-the-operator-contract)

1. In the Chainlink node GUI, find and copy the address of your chainlink node. see [Requirements](https://docs.chain.link/chainlink-nodes/v1/fulfilling-requests#requirements).

2. In Remix, call the `setAuthorizedSenders` function with the address of your node. Note the function expects an array.

![A screenshot showing all of the fields for the deployed contract in Remix.](https://docs.chain.link/images/chainlink-nodes/node-operators/operator-authorizedsenders.jpg)

3. Click the `transact` function to run it. Approve the transaction in MetaMask and wait for it to confirm on the blockchain.

4. Call `isAuthorizedSender` function with the address of your node to verify that your chainlink node address can call the operator contract. The function must return `true`.

![A screenshot showing Chainlink node whitelisted in Remix.](https://docs.chain.link/images/chainlink-nodes/node-operators/operator-isauthorizedsender.jpg)


## [Add a job to the node](https://docs.chain.link/chainlink-nodes/v1/fulfilling-requests\#add-a-job-to-the-node)

You will create a job that calls an OpenAPI , parses the response and then returns a `uint256`.

1. In the Chainlink Operator UI on the **Jobs** tab, click **New Job**.

![The new job button.](https://docs.chain.link/images/chainlink-nodes/node-operators/new-job-button.png)

2. Paste the job specification from above into the text field.



![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)



```solidity
# THIS IS EXAMPLE CODE THAT USES HARDCODED VALUES FOR CLARITY.
# THIS IS EXAMPLE CODE THAT USES UN-AUDITED CODE.
# DO NOT USE THIS CODE IN PRODUCTION.

name = "Get > Uint256 - (TOML)"
schemaVersion = 1
type = "directrequest"
# evmChainID for Sepolia Testnet
evmChainID = "11155111"
# Optional External Job ID: Automatically generated if unspecified
# externalJobID = "b1d42cd5-4a3a-4200-b1f7-25a68e48aad8"
contractAddress = "YOUR_OPERATOR_CONTRACT_ADDRESS"
maxTaskDuration = "0s"
minIncomingConfirmations = 0
observationSource = """
       decode_log   [type="ethabidecodelog"\
                     abi="OracleRequest(bytes32 indexed specId, address requester, bytes32 requestId, uint256 payment, address callbackAddr, bytes4 callbackFunctionId, uint256 cancelExpiration, uint256 dataVersion, bytes data)"\
                     data="$(jobRun.logData)"\
                     topics="$(jobRun.logTopics)"]

       decode_cbor  [type="cborparse" data="$(decode_log.data)"]
       fetch        [type="http" method=GET url="$(decode_cbor.get)" allowUnrestrictedNetworkAccess="true"]
       parse        [type="jsonparse" path="$(decode_cbor.path)" data="$(fetch)"]

       multiply     [type="multiply" input="$(parse)" times="$(decode_cbor.times)"]

       encode_data  [type="ethabiencode" abi="(bytes32 requestId, uint256 value)" data="{ \\"requestId\\": $(decode_log.requestId), \\"value\\": $(multiply) }"]
       encode_tx    [type="ethabiencode"\
                     abi="fulfillOracleRequest2(bytes32 requestId, uint256 payment, address callbackAddress, bytes4 callbackFunctionId, uint256 expiration, bytes calldata data)"\
                     data="{\\"requestId\\": $(decode_log.requestId), \\"payment\\":   $(decode_log.payment), \\"callbackAddress\\": $(decode_log.callbackAddr), \\"callbackFunctionId\\": $(decode_log.callbackFunctionId), \\"expiration\\": $(decode_log.cancelExpiration), \\"data\\": $(encode_data)}"\
                     ]
       submit_tx    [type="ethtx" to="YOUR_OPERATOR_CONTRACT_ADDRESS" data="$(encode_tx)"]

       decode_log -> decode_cbor -> fetch -> parse -> multiply -> encode_data -> encode_tx -> submit_tx
"""

```

3. Replace `YOUR_OPERATOR_CONTRACT_ADDRESS` with the address of your deployed operator contract address from the previous steps.

4. Click **Create Job**. If the node creates the job successfully, a notice with the job number appears.

![A screenshot showing that the job is created successfully.](https://docs.chain.link/images/chainlink-nodes/node-operators/job-created.jpg)

5. Click the job number to view the job details. You can also find the job listed on the **Jobs** tab in the Node Operators UI. Save the `externalJobID` value because you will need it later to tell your consumer contract what job ID to request from your node.

![A screenshot showing the External Job ID.](https://docs.chain.link/images/chainlink-nodes/node-operators/job-id.jpg)


## [Create a request to your node](https://docs.chain.link/chainlink-nodes/v1/fulfilling-requests\#create-a-request-to-your-node)

After you add jobs to your node, you can use the node to fulfill requests. This section shows what a requester does when they send requests to your node. It is also a way to test and make sure that your node is functioning correctly.

01. Open [ATestnetConsumer.sol in Remix](https://remix.ethereum.org/#url=https://docs.chain.link/samples/APIRequests/ATestnetConsumer.sol&autoCompile=true).

02. Note that `_setChainlinkToken(0x779877A7B0D9E8603169DdbD7836e478b4624789)` is configured for _Sepolia_.

03. On the **Compiler** tab, click the **Compile** button for `ATestnetConsumer.sol`.

04. On the **Deploy and Run** tab, configure the following settings:
    - Select _Injected Provider_ as your environment. Make sure your metamask is connected to Sepolia.
    - Select _ATestnetConsumer_ from the **Contract** menu.
05. Click **Deploy**. MetaMask prompts you to confirm the transaction.

06. Fund the contract by sending LINK to the contract's address. See the [Fund your contract](https://docs.chain.link/resources/fund-your-contract) page for instructions. The address for the `ATestnetConsumer` contract is on the list of your deployed contracts in Remix. You can fund your contract with 1 LINK.

07. After you fund the contract, create a request. Input your operator contract address and the job ID for the `Get > Uint256` job into the `requestEthereumPrice` request method **without dashes**. The job ID is the `externalJobID` parameter, which you can find on your job's definition page in the Node Operators UI.

    ![Screenshot of the requestEthereumPrice function with the oracle address and job ID specified.](https://docs.chain.link/images/chainlink-nodes/node-operators/requestEthereumPrice.jpg)

08. Click the **transact** button for the `requestEthereumPrice` function and approve the transaction in Metamask. The `requestEthereumPrice` function asks the node to retrieve `uint256` data specifically from [https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=USD](https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=USD).

09. After the transaction processes, you can see the details for the complete the job run the **Runs** page in the Node Operators UI.

    ![A screenshot of the task link](https://docs.chain.link/images/chainlink-nodes/node-operators/taskList.jpg)

10. In Remix, click the `currentPrice` variable to see the current price updated on your consumer contract.

    ![A screenshot of the currentPrice button](https://docs.chain.link/images/chainlink-nodes/node-operators/currentPrice.jpg)


## [Withdrawing LINK](https://docs.chain.link/chainlink-nodes/v1/fulfilling-requests\#withdrawing-link)

You can withdraw LINK from the operator contract. In Remix under the list of deployed contracts, click on your Operator contract and find the `withdraw` function in the function list. Note that only the admin (see [Admin wallet address](https://docs.chain.link/chainlink-nodes/v1/fulfilling-requests#address-types)) can withdraw LINK.

![Remix Click Withdraw Button](https://docs.chain.link/images/chainlink-nodes/node-operators/operator-withdraw-link.jpg)

Paste the address you want to withdraw to, and specify the amount of LINK that you want to withdraw. Then, click `withdraw`. Confirm the transaction in MetaMask when the popup appears.

## What's next

- [\> Performing System Maintenance](https://docs.chain.link/chainlink-nodes/resources/performing-system-maintenance)
- [\> v2 Jobs](https://docs.chain.link/chainlink-nodes/oracle-jobs/jobs)
- [\> Security and Operation Best Practices](https://docs.chain.link/chainlink-nodes/resources/best-security-practices)

## Get the latest Chainlink content straight to your inbox.

Email Address

## Chainlink Node Access Control
[iframe](https://www.googletagmanager.com/ns.html?id=GTM-N6DQ47T)

Chainlink CCIP is now officially live on Solana. [View lanes and tokens.](https://docs.chain.link/ccip/directory/mainnet/chain/solana-mainnet?utm_medium=referral&utm_source=chainlink-docs&utm_campaign=solana-ccip)

On this page

# [Role-Based Access Control (RBAC)](https://docs.chain.link/chainlink-nodes/v1/roles-and-access\#overview)

Chainlink Nodes allow the root admin CLI user and any additional admin users to create and assign tiers of role-based access to new users. These new API users can able to log in to the Operator UI independently.

Each user has a specific role assigned to their account. There are four roles: `admin`, `edit`, `run`, and `view`.

If there are multiple users who need specific access to manage the Chainlink Node instance, permissions and level of access can be set here.

User management is configured through the use of the admin `chainlink admin users` command. Run `chainlink admin login` before you set user roles for other accounts. For example, a view-only user can be created with the following command:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
chainlink admin users create --email=operator-ui-view-only@test.com --role=view

```

To modify permissions or delete existing users, run the `admin users chrole` or `admin users delete` commands. Use the `-h` flag to get a full list of options for these commands:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
chainlink admin users chrole -h

```

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
chainlink admin users delete -h

```

Specific actions are enabled to check role-based access before they execute. The following table lists the actions that have role-based access and the role that is required to run that action:

| Action | View | Run | Edit | Admin |
| --- | --- | --- | --- | --- |
| Update password | X | X | X | X |
| Create self API token | X | X | X | X |
| Delete self API token | X | X | X | X |
| List external initiators | X | X | X | X |
| Create external initiator |  |  | X | X |
| Delete external initiator |  |  | X | X |
| List bridges | X | X | X | X |
| View bridge | X | X | X | X |
| Create bridge |  |  | X | X |
| Edit bridge |  |  | X | X |
| Delete bridge |  |  | X | X |
| View config | X | X | X | X |
| Update config |  |  |  | X |
| Dump env/config |  |  |  | X |
| View transaction attempts | X | X | X | X |
| View transaction attempts EVM | X | X | X | X |
| View transactions | X | X | X | X |
| Replay a specific block number |  | X | X | X |
| List keys (CSA,ETH,OCR(2),P2P,Solana,Terra) | X | X | X | X |
| Create keys (CSA,ETH,OCR(2),P2P,Solana,Terra) |  |  | X | X |
| Delete keys (CSA,ETH,OCR(2),P2P,Solana,Terra) |  |  |  | X |
| Import keys (CSA,ETH,OCR(2),P2P,Solana,Terra) |  |  |  | X |
| Export keys (CSA,ETH,OCR(2),P2P,Solana,Terra) |  |  |  | X |
| List jobs | X | X | X | X |
| View job | X | X | X | X |
| Create job |  |  | X | X |
| Delete job |  |  | X | X |
| List pipeline runs | X | X | X | X |
| View job runs | X | X | X | X |
| Delete job spec errors |  |  | X | X |
| View features | X | X | X | X |
| View log | X | X | X | X |
| Update log |  |  |  | X |
| List chains | X | X | X | X |
| View chain | X | X | X | X |
| Create chain |  |  | X | X |
| Update chain |  |  | X | X |
| Delete chain |  |  | X | X |
| View nodes | X | X | X | X |
| Create node |  |  | X | X |
| Update node |  |  | X | X |
| Delete node |  |  | X | X |
| View forwarders | X | X | X | X |
| Create forwarder |  |  | X | X |
| Delete forwarder |  |  | X | X |
| Create job run |  | X | X | X |
| Create Transfer EVM |  |  |  | X |
| Create Transfer Terra |  |  |  | X |
| Create Transfer Solana |  |  |  | X |
| Create user |  |  |  | X |
| Delete user |  |  |  | X |
| Edit user |  |  |  | X |
| List users |  |  |  | X |

The run command allows for minimal interaction and only enables the ability to replay a specific block number and kick off a job run.

## Get the latest Chainlink content straight to your inbox.

Email Address

[iframe](https://td.doubleclick.net/td/rul/346357746?random=1748840203717&cv=11&fst=1748840203717&fmt=3&bg=ffffff&guid=ON&async=1&gcl_ctr=1&gtm=45be55t0h2v891173849z8847174275za200zb847174275&gcd=13l3l3l3l1l1&dma=0&tag_exp=101509157~102015666~103116026~103200004~103233427~103252644~103252646~103351866~103351868~104481633~104481635~104559073~104559075~104612245~104612247~103308614&ptag_exp=101509157~103116026~103200004~103233427~103252644~103252646~103351869~103351871~104481633~104481635~104559073~104559075~104612245~104612247&u_w=1280&u_h=1024&url=https%3A%2F%2Fdocs.chain.link%2Fchainlink-nodes%2Fv1%2Froles-and-access&_ng=1&label=_duuCKn_k4cYEPL_k6UB&hn=www.googleadservices.com&frm=0&tiba=Role-Based%20Access%20Control%20(RBAC)%20%7C%20Chainlink%20Documentation&value=0&bttype=purchase&npa=0&pscdl=noapi&auid=695369637.1748840203&uaa=x86&uab=64&uafvl=Google%2520Chrome%3B137.0.7151.55%7CChromium%3B137.0.7151.55%7CNot%252FA)Brand%3B24.0.0.0&uamb=0&uam=&uap=Linux%20x86_64&uapv=6.6.72&uaw=0&ec_mode=a&fledge=1&capi=1&_tu=Cg&em=tv.1&ct_cookie_present=0)

## Chainlink Oracle Tasks
[iframe](https://www.googletagmanager.com/ns.html?id=GTM-N6DQ47T)

Chainlink CCIP is now officially live on Solana. [View lanes and tokens.](https://docs.chain.link/ccip/directory/mainnet/chain/solana-mainnet?utm_medium=referral&utm_source=chainlink-docs&utm_campaign=solana-ccip)

On this page

# [Task Types](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-tasks\#overview)

This guide outlines different task types.

## ['Any' task](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-tasks\#any-task)

Returns a random value from the set of inputs passed in.

**Parameters**

None.

**Inputs**

Can be anything.

**Outputs**

A randomly-selected value from the set of inputs.

**Example**

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
fetch1   [type="http" ...]
fetch2   [type="http" ...]
fetch3   [type="http" ...]
pick_any [type="any"]

fetch1 -> pick_any
fetch2 -> pick_any
fetch3 -> pick_any

```

`pick_any` will return either the result of `fetch1`, `fetch2`, or `fetch3`.

## [Base64 Decode task](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-tasks\#base64-decode-task)

Accepts a base64 encoded string and returns decoded bytes.

**Parameters**

- `input`: a base64 encoded string.

**Outputs**

Decoded bytes.

**Example**

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
my_base64decode_task [type="base64decode" input="SGVsbG8sIHBsYXlncm91bmQ="]

```

Given the input `SGVsbG8sIHBsYXlncm91bmQ=`, the task will return `Hello, playground` (as ASCII bytes).

## [Base64 Encode task](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-tasks\#base64-encode-task)

Encodes bytes/string into a Base64 string.

**Parameters**

- `input`: Byte array or string to be encoded.

**Outputs**

String with Base64 encoding of input.

**Example**

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
my_base64encode_task [type="base64encode" input="Hello, playground"]

```

Given the input string "Hello, playground", the task will return "SGVsbG8sIHBsYXlncm91bmQ=".

## [Bridge task](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-tasks\#bridge-task)

Bridge tasks make HTTP POST requests to pre-configured URLs. Bridges can be configured via the UI or the CLI, and are referred to by a simple user-specified name. This is the way that most jobs interact with [External Adapters](https://docs.chain.link/chainlink-nodes/external-adapters/external-adapters).

**Parameters**

- `name`: an arbitrary name given to the bridge by the node operator.
- `requestData` (optional): a statically-defined payload to be sent to the external adapter.
- `cacheTTL` (optional): a duration-formatted string indicating the maximum acceptable staleness for cached bridge responses in case of intermittent failures. This is disabled by default.
- `headers` (optional): an array of strings. The number of strings must be even. Example: `foo [type="bridge" name="foo" headers="[\\"X-Header-1\\", \\"value1\\", \\"X-Header-2\\", \\"value2\\"]"]`

**Outputs**

A string containing the response body.

**Example**

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
my_bridge_task [type="bridge"\
                name="some_bridge"\
                requestData="{\\"data\\":{\\"foo\\": $(foo), \\"bar\\": $(bar)}}"\
                ]

```

## [CBOR Parse task](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-tasks\#cbor-parse-task)

CBOR Parse tasks parse a CBOR payload, typically as part of a Direct Request workflow. In Direct Request, a user makes an onchain request using a `ChainlinkClient` contract, which encodes the request parameters as CBOR. See below for an example.

**Parameters**

- `data`: A byte array containing the CBOR payload.
- `mode`: An optional parameter that specifies how to parse the incoming CBOR. The default mode is `diet`, which expects the input to be a map. Set the mode to `standard` to pass literal values through "as-is". Empty inputs return nil.

**Outputs**

A map containing the request parameters. Parameters can be individually accessed using `$(dot.accessors)`.

**Example**

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
// First, we parse the request log and the CBOR payload inside of it
decode_log  [type="ethabidecodelog"\
             data="$(jobRun.logData)"\
             topics="$(jobRun.logTopics)"\
             abi="SomeContractEvent(bytes32 requestID, bytes cborPayload)"]

decode_cbor [type="cborparse"\
             data="$(decode_log.cborPayload)"]

// Then, we use the decoded request parameters to make an HTTP fetch
fetch [type="http" url="$(decode_cbor.fetchURL)" method=GET]
parse [type="jsonparse" path="$(decode_cbor.jsonPath)" data="$(fetch)"]

// ... etc ...

```

See the [Direct Request page](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-jobs/#direct-request-jobs) for a more comprehensive example.

## [Divide task](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-tasks\#divide-task)

Divides the provided `input` by the `divisor` and returns the result with a number of decimal places defined in the `precision` value.

**Parameters**

- `input`: The value to be divided

  - number
  - stringified number
  - bytes-ified number
  - `$(variable)`
- `divisor`: The value by which to divide the `input`
  - number
  - stringified number
  - bytes-ified number
  - `$(variable)`
- `precision`: The number of decimal places to retain in the result

  - number
  - stringified number
  - bytes-ified number
  - `$(variable)`

**Outputs**

The result of the division.

**Example**

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
my_divide_task [type="divide"\
                input="$(json_parse_result)"\
                divisor="3"\
                precision="2"]

```

Given the input `10`, this example returns `3.33`.

## [ETH ABI Decode Log task](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-tasks\#eth-abi-decode-log-task)

Decodes a log emitted by an ETH contract.

**Parameters**

- `abi`: a canonical ETH log event definition. Should be formatted exactly as in Solidity. Each argument must be named. Examples:

  - `NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt)`
  - `AuthorizedSendersChanged(address[] senders)`
- `data`: the ABI-encoded log data. Can be:

  - a byte array
  - a hex-encoded string beginning with `0x`
  - ... but generally should just be set to `$(jobRun.logData)` (see the [Direct Request page](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-jobs/#direct-request-jobs))
- `topics`: the ABI-encoded log topics (i.e., the `indexed` parameters)

  - an array of bytes32 values
  - an array of hex-encoded bytes32 values beginning with `0x`
  - ... but generally should just be set to `$(jobRun.logTopics)` (see the [Direct Request page](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-jobs/#direct-request-jobs))

**Outputs**

A map containing the decoded values.

**Example**

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
decode [type="ethabidecodelog"\
        abi="NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt)"\
        data="$(jobRun.logData)"\
        topics="$(jobRun.logTopics)"]

```

This task will return a map with the following schema:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```json
{
    "roundId": ...,   // a number
    "startedBy": ..., // an address
    "startedAt": ..., // a number
}

```

## [ETH ABI Decode task](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-tasks\#eth-abi-decode-task)

Decodes a ETH ABI-encoded payload, typically the result of an [ETH Call task](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-tasks/#eth-call-task).

**Parameters**

- `abi`: a canonical ETH ABI argument string. Should be formatted exactly as in Solidity. Each argument must be named. Examples:

  - `uint256 foo, bytes32 bar, address[] baz`
  - `address a, uint80[3][] u, bytes b, bytes32 b32`
- `data`: the ABI-encoded payload to decode. Can be:

  - a byte array
  - a hex-encoded string beginning with `0x`

**Outputs**

A map containing the decoded values.

**Example**

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
decode [type="ethabidecode"\
        abi="bytes32 requestID, uint256 price, address[] oracles"\
        data="$(eth_call_result)"]

```

This task will return a map with the following schema:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```json
{
    "requestID": ..., // [32]byte value
    "price": ...,     // a number
    "oracles": [\
        "0x859AAa51961284C94d970B47E82b8771942F1980",\
        "0x51DE85B0cD5B3684865ECfEedfBAF12777cd0Ff8",\
        ...\
    ]
}

```

## [ETH ABI Encode task](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-tasks\#eth-abi-encode-task)

Encodes a bytes payload according to ETH ABI encoding, typically in order to perform an [ETH Call](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-tasks/#eth-call-task) or an [ETH Tx](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-tasks/#eth-tx-task).

**Parameters**

- `abi`: a canonical ETH ABI argument string. Should be formatted exactly as in Solidity. Each argument must be named. If a method name is provided, the 4-byte method signature is prepended to the result. Examples:

  - `uint256 foo, bytes32 bar, address[] baz`
  - `fulfillRequest(bytes32 requestID, uint256 answer)`
- `data`: a map of the values to be encoded. The task will make a best effort at converting values to the appropriate types.

**Outputs**

A byte array.

**Example**

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
encode [type="ethabiencode"\
        abi="fulfillRequest(bytes32 requestID, uint256 answer)"\
        data="{\\"requestID\\": $(foo), \\"answer\\": $(bar)}"\
        ]

```

## [ETH Call task](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-tasks\#eth-call-task)

Makes a non-mutating contract call to the specified contract with the specified data payload.

**Parameters**

- `contract`: the address of the contract to call.
- `data`: the data to attach to the call (including the function selector).
- `gas`: the amount of gas to attach to the transaction.
- `from`: The from address with which the call should be made. Defaults to zero address.
- `gasPrice`: The gasPrice for the call. Defaults to zero.
- `gasTipCap`: The gasTipCap (EIP-1559) for the call. Defaults to zero.
- `gasFeeCap`: The gasFeeCap (EIP-1559) for the call. Defaults to zero.
- `gasUnlimited`: A boolean indicating if unlimited gas should be provided for the call. If set to true, do not pass the `gas` parameter.
- `evmChainID`: Set this optional parameter to transmit on the given chain. You must have the chain configured with RPC nodes for this to work. If left blank, it will use the default chain.

**Outputs**

An ABI-encoded byte array containing the return value of the contract function.

**Example**

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
encode_call  [type="ethabiencode"\
              abi="checkUpkeep(bytes data)"\
              data="{ \\"data\\": $(upkeep_data) }"]

call          [type="ethcall"\
               contract="0xa36085F69e2889c224210F603D836748e7dC0088"\
               data="$(encode_call)"\
               gas="1000"]

decode_result [type="ethabidecode"\
               abi="bool upkeepNeeded, bytes performData"\
               data="$(call)"]

encode_call -> call -> decode_result

```

## [ETH Tx task](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-tasks\#eth-tx-task)

Makes a mutating transaction to the specified contract with the specified data payload. The transaction is guaranteed to succeed eventually.

**Parameters**

- `from`: one or more addresses of the externally-owned account from which to send the transaction. If left blank, it will select a random address on every send for the given chain ID.
- `to`: the address of the contract to make a transaction to.
- `data`: the data to attach to the call (including the function selector). Most likely, this will be the output of an `ethabiencode` task.
- `gasLimit`: the amount of gas to attach to the transaction.
- `txMeta`: a map of metadata that is saved into the database for debugging.
- `minConfirmations`: minimum number of confirmations required before this task will continue. Set to zero to continue immediately. Note that this does not affect transaction inclusion. All transactions will always be included in the chain up to the configured finality depth.
- `evmChainID`: set this optional parameter to transmit on the given chain. You must have the chain configured with RPC nodes for this to work. If left blank, it will use the default chain.
- `failOnRevert`: an optional parameter, a boolean, that allows a ChainLink node operator's UI to display and color the status of the task within a job's pipeline depending on a transaction status. _default_: false.

**Outputs**

The hash of the transaction attempt that eventually succeeds (after potentially going through a gas bumping process to ensure confirmation).

**Example**

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
encode_tx    [type="ethabiencode"\
              abi="performUpkeep(bytes performData)"\
              data="{ \\"data\\": $(upkeep_data) }"]

submit_tx    [type="ethtx"\
               to="0xa36085F69e2889c224210F603D836748e7dC0088"\
               data="$(encode_tx)"\
               failOnRevert="true"]

encode_tx -> submit_tx

```

## [Hex Decode task](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-tasks\#hex-decode-task)

Accepts a hexadecimal encoded string and returns decoded bytes.

**Parameters**

- `input`: a hexadecimal encoded string, must have prefix `0x`.

**Outputs**

Decoded bytes.

**Example**

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
my_hexdecode_task [type="hexdecode" input="0x12345678"]

```

Given the input `0x12345678`, the task will return `[0x12, 0x34, 0x56, 0x78]`.

## [Hex Encode task](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-tasks\#hex-encode-task)

Encodes bytes/string/integer into a hexadecimal string.

**Parameters**

- `input`: Byte array, string or integer to be encoded.

**Outputs**

Hexadecimal string prefixed with "0x" (or empty string if input was empty).

**Example**

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
my_hexencode_task [type="hexencode" input="xyz"]

```

Given the input string "xyz", the task will return "0x78797a", which are the ascii values of characters in the string.

## [HTTP task](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-tasks\#http-task)

HTTP tasks make HTTP requests to arbitrary URLs.

**Parameters**

- `method`: the HTTP method that the request should use.
- `url`: the URL to make the HTTP request to.
- `requestData` (optional): a statically-defined payload to be sent to the external adapter.
- `allowUnrestrictedNetworkAccess` (optional): permits the task to access a URL at `localhost`, which could present a security risk. Note that Bridge tasks allow this by default.
- `headers` (optional): an array of strings. The number of strings must be even. Example: `foo [type=http headers="[\\"X-Header-1\\", \\"value1\\", \\"X-Header-2\\", \\"value2\\"]"]`

**Outputs**

A string containing the response body.

**Example**

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
my_http_task [type="http"\
              method=PUT\
              url="http://chain.link"\
              requestData="{\\"foo\\": $(foo), \\"bar\\": $(bar), \\"jobID\\": 123}"\
              allowUnrestrictedNetworkAccess=true\
              ]

```

## [JSON Parse task](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-tasks\#json-parse-task)

JSON Parse tasks parse a JSON payload and extract a value at a given keypath.

**Parameters**

- `data`: the JSON string. Can be:

  - string
  - byte array
- `path`: the keypath to extract. Must be a comma-delimited list of keys, or specify a custom `separator` alternative.
- `separator`: (optional) custom `path` key separator. Defaults to comma ( `,`).
- `lax` (optional): if false (or omitted), and the keypath doesn't exist, the task will error. If true, the task will return `nil` to the next task.

**Outputs**

The value at the provided keypath.

**Example**

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
my_json_task [type="jsonparse"\
              data="$(http_fetch_result)"\
              path="data,0,price"]

```

This task returns `123.45` (float64) when given the following example `data` value:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```json
{
  "data": [{ "price": 123.45 }, { "price": 678.9 }]
}

```

## [Length task](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-tasks\#length-task)

Returns the length of a byte array or string.

**Parameters**

- `input`: Byte array, or string to get the length for.

**Outputs**

The length of the byte array or string.

**Note**: For strings containing multi-byte unicode characters, the output is the length in bytes and not number of characters.

**Example**

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
my_length_task [type="length" input="xyz"]

```

Given the input string "xyz", the task will return 3, length of the string.

## [Less Than task](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-tasks\#less-than-task)

Returns a boolean, result of computing `left LESS_THAN right`.

**Parameters**

- `left`: the left hand side of comparison. Possible values:

  - number
  - stringified number
  - bytes-ified number
  - `$(variable)`
- `right`: the right hand side of comparison. Possible values:

  - number
  - stringified number
  - bytes-ified number
  - `$(variable)`

**Outputs**

The result of less than comparison.

**Example**

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
my_lessthan_task [type="lessthan" left="3" right="10"]

```

the task will return true which is the result of `3 LESS_THAN 10`

## [Lowercase task](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-tasks\#lowercase-task)

Accepts a string and returns a lowercase string.

**Parameters**

- `input`: a string.

**Outputs**

Lowercase string.

**Example**

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
my_lowercase_task [type="lowercase" input="Hello World!"]

```

Given the input `Hello World!`, the task will return `hello world!`.

## [Mean task](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-tasks\#mean-task)

Accepts multiple numerical inputs and returns the mean (average) of them.

**Parameters**

- `values`: an array of values to be averaged.
- `allowedFaults` (optional): the maximum number of input tasks that can error without the Mean task erroring. If not specified, this value defaults to `N - 1`, where `N` is the number of inputs.
- `precision`: the number of decimal places in the result.

**Outputs**

The average of the values in the `values` array.

**Example**

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
my_mean_task [type="mean"\
              values=<[ $(fetch1), $(fetch2), $(fetch3) ]>\
              precision=2\
              allowedFaults=1]

```

Given the inputs `2`, `5`, and `20`, the task will return `9`.

## [Median task](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-tasks\#median-task)

Accepts multiple numerical inputs and returns the median of them.

**Parameters**

- `values`: an array of values from which to select a median.
- `allowedFaults` (optional): the maximum number of input tasks that can error without the Median task erroring. If not specified, this value defaults to `N - 1`, where `N` is the number of inputs.

**Outputs**

The median of the values in the `values` array.

**Example**

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
my_median_task [type="median"\
                values=<[ $(fetch1), $(fetch2), $(fetch3) ]>\
                allowedFaults=1]

```

Given the inputs `2`, `5`, and `20`, the task will return `5`.

## [Memo task](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-tasks\#memo-task)

The `memo` task returns its value as a result.

**Parameters**

- `value`: value to return. Possible values:

  - number
  - boolean
  - float
  - string
  - array

**Outputs**

The value.

**Example**

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
memo [type="memo" value="10"]

```

The task will return the value `10`

## [Merge task](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-tasks\#merge-task)

Merge task returns the merged value of two maps.

**Parameters**

- `left`: The left map.
- `right`: The right map, which overwrites the left side.

**Outputs**

Returns the combined map of left and right. If the merged map is invalid, it returns `null`.

**Example**

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
merge [type="merge" left="{\\"foo\\":\\"abc\\", \\"bar\\":\\"123\\"}" right="{\\"bar\\":\\"xyz\\", \\"biz\\":\\"buzz\\"}"]

```

This example task returns the following map:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```json
{ "foo": "abc", "bar": "xyz", "biz": "buzz" }

```

## [Mode task](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-tasks\#mode-task)

Accepts multiple numerical inputs and returns the mode (most common) of them. If more than one value occur the maximum number of times, it returns all of them.

**Parameters**

- `values`: an array of values from which to select a mode.
- `allowedFaults` (optional): the maximum number of input tasks that can error without the Mode task erroring. If not specified, this value defaults to `N - 1`, where `N` is the number of inputs.

**Outputs**

A map containing two keys:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```json
{
    "results": [ ... ], // An array containing all of the values that occurred the maximum number of times
    "occurrences": ..., // The number of times those values occurred
}

```

**Example**

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
my_mode_task [type="mode"\
                values=<[ $(fetch1), $(fetch2), $(fetch3), $(fetch4), $(fetch5), $(fetch6), $(fetch7), $(fetch8) ]>\
                allowedFaults=3]

```

This task can handle arrays with mixed types. For example, given a `values` array containing both strings and ints like `[ 2, 5, 2, "foo", "foo" "bar", "foo", 2 ]`, the task returns the following JSON:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```json
{
  "occurrences": 3,
  "results": [2, "foo"]
}

```

To encode the results array into the `ethabiencode` task, specify that the data is an array in the `abi` and point the data parameter to the results from your mode task. Because [argument encoding](https://docs.soliditylang.org/en/develop/abi-spec.html#argument-encoding) enforces types, all of the values in the array must be of the same type. As an example, you can encode the results of a `mode` task with an array of integers:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
mode_task [type="mode" values=<[ 1, 2, 2, 3, 1 ]>]

encode_mode_task [type="ethabiencode" abi="(bytes32 requestId, uint64 occurrences, uint256[] results)" data="{\\"requestId\\": $(decode_log.requestId), \\"occurrences\\": $(mode_task.occurrences), \\"results\\": $(mode_task.results) }"]

```

In this example, the `mode` task returns the following result:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```json
{
  "occurrences": 2,
  "results": [2, 1]
}

```

The `ethabiencode` task encodes `results` as a `uint256[]` array.

## [Multiply task](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-tasks\#multiply-task)

Multiplies the provided `input` and `times` values.

**Parameters**

- `input`: the value to be multiplied. Possible values:

  - number
  - stringified number
  - bytes-ified number
  - `$(variable)`
- `times`: the value to multiply the input with.

  - number
  - stringified number
  - bytes-ified number
  - `$(variable)`

**Outputs**

The result of the multiplication.

**Example**

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
my_multiply_task [type="multiply" input="$(json_parse_result)" times=3]

```

Given the input `10`, the task will return `30`.

## [Sum Task](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-tasks\#sum-task)

Accepts multiple numerical inputs and returns the sum of them.

**Parameters**

- `values`: an array of values to sum.
- `allowedFaults` (optional): the maximum number of input tasks that can error without the Sum task erroring. If not specified, this value defaults to `N - 1`, where `N` is the number of inputs.

**Outputs**

The sum of the values in the `values` array.

**Example**

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
my_sum_task [type="sum"\
             values=<[ $(fetch1), $(fetch2), $(fetch3) ]>\
             allowedFaults=1]

```

Given the inputs `2`, `5`, and `20`, the task will return `27`.

## [Uppercase task](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-tasks\#uppercase-task)

Accepts a string and returns an uppercase string.

**Parameters**

- `input`: a string.

**Outputs**

Uppercase string.

**Example**

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
my_uppercase_task [type="uppercase" input="Hello World!"]

```

Given the input `Hello World!`, the task will return `HELLO WORLD!`.

## Get the latest Chainlink content straight to your inbox.

Email Address

[iframe](https://td.doubleclick.net/td/rul/346357746?random=1748840203462&cv=11&fst=1748840203462&fmt=3&bg=ffffff&guid=ON&async=1&gcl_ctr=1&gtm=45be55s2v891173849z8847174275za200zb847174275&gcd=13l3l3l3l1l1&dma=0&tag_exp=101509157~102938614~103116026~103200004~103233427~103252644~103252646~103351866~103351868~104481633~104481635~104559073~104559075~104612245~104612247~103308615&ptag_exp=101509157~103116026~103200004~103233427~103252644~103252646~103351869~103351871~104481633~104481635~104559073~104559075~104612245~104612247&u_w=1280&u_h=1024&url=https%3A%2F%2Fdocs.chain.link%2Fchainlink-nodes%2Foracle-jobs%2Fall-tasks&_ng=1&label=_duuCKn_k4cYEPL_k6UB&hn=www.googleadservices.com&frm=0&tiba=Task%20Types%20%7C%20Chainlink%20Documentation&value=0&bttype=purchase&npa=0&pscdl=noapi&auid=1774737055.1748840203&uaa=x86&uab=64&uafvl=Google%2520Chrome%3B137.0.7151.55%7CChromium%3B137.0.7151.55%7CNot%252FA)Brand%3B24.0.0.0&uamb=0&uam=&uap=Linux%20x86_64&uapv=6.6.72&uaw=0&ec_mode=a&fledge=1&capi=1&_tu=Cg&em=tv.1&ct_cookie_present=0)

## Chainlink Oracle Jobs
[iframe](https://www.googletagmanager.com/ns.html?id=GTM-N6DQ47T)

Chainlink CCIP is now officially live on Solana. [View lanes and tokens.](https://docs.chain.link/ccip/directory/mainnet/chain/solana-mainnet?utm_medium=referral&utm_source=chainlink-docs&utm_campaign=solana-ccip)

On this page

# [Job Types](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-jobs\#overview)

This guide outlines different job types.

## [Solidity cron jobs](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-jobs\#solidity-cron-jobs)

Executes a job on a schedule. Does not rely on any kind of external trigger.

### [Spec format](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-jobs\#spec-format)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
type            = "cron"
schemaVersion   = 1
evmChainID      = 1
schedule        = "CRON_TZ=UTC * */20 * * * *"
externalJobID       = "0EEC7E1D-D0D2-476C-A1A8-72DFB6633F01"
observationSource   = """
    fetch    [type="http" method=GET url="https://chain.link/ETH-USD"]
    parse    [type="jsonparse" path="data,price"]
    multiply [type="multiply" times=100]

    fetch -> parse -> multiply
"""

```

### [Shared fields](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-jobs\#shared-fields)

See [shared fields](https://docs.chain.link/chainlink-nodes/oracle-jobs/jobs/#shared-fields).

### [Unique fields](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-jobs\#unique-fields)

- `schedule`: the frequency with which the job is to be run. There are two ways to specify this:

  - Traditional UNIX cron format, but with 6 fields, not 5. The extra field allows for "seconds" granularity. **Note:** you _must_ specify the `CRON_TZ=...` parameter if you use this format.
  - `@` shorthand, e.g. `@every 1h`. This shorthand does not take account of the node's timezone, rather, it simply begins counting down the moment that the job is added to the node (or the node is rebooted). As such, no `CRON_TZ` parameter is needed.

For all supported schedules, please refer to the [cron library documentation](https://pkg.go.dev/github.com/robfig/cron?utm_source=godoc).

### [Job type specific pipeline variables](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-jobs\#job-type-specific-pipeline-variables)

- `$(jobSpec.databaseID)`: the ID of the job spec in the local database. You shouldn't need this in 99% of cases.
- `$(jobSpec.externalJobID)`: the globally-unique job ID for this job. Used to coordinate between node operators in certain cases.
- `$(jobSpec.name)`: the local name of the job.
- `$(jobRun.meta)`: a map of metadata that can be sent to a bridge, etc.

## [Direct request jobs](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-jobs\#direct-request-jobs)

Executes a job upon receipt of an explicit request made by a user. The request is detected via a log emitted by an Oracle or Operator contract. This is similar to the legacy ethlog/runlog style of jobs.

### [Spec format](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-jobs\#spec-format-1)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
type                = "directrequest"
schemaVersion       = 1
evmChainID          = 1
name                = "example eth request event spec"
contractAddress     = "0x613a38AC1659769640aaE063C651F48E0250454C"

# Optional fields:
# requesters        = [\
#   "0xAaAA1F8ee20f5565510b84f9353F1E333e753B7a",\
#   "0xBbBb70f0E81c6F3430dfDc9fa02fB22bDD818c4E"\
# ]
# minContractPaymentLinkJuels = "100000000000000"
# externalJobID = "0EEC7E1D-D0D2-476C-A1A8-72DFB6633F02"
# minIncomingConfirmations = 10

observationSource   = """
    ds          [type="http" method=GET url="http://example.com"]
    ds_parse    [type="jsonparse" path="USD"]
    ds_multiply [type="multiply" times=100]

    ds -> ds_parse -> ds_multiply
"""

```

#### [Shared fields](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-jobs\#shared-fields-1)

See [shared fields](https://docs.chain.link/chainlink-nodes/oracle-jobs/jobs/#shared-fields).

#### [Unique fields](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-jobs\#unique-fields-1)

- `contractAddress`: The Oracle or Operator contract to monitor for requests
- `requesters`: Optional - Allows whitelisting requesters
- `minContractPaymentLinkJuels` Optional - Allows you to specify a job-specific minimum contract payment
- `minIncomingConfirmations` Optional - Allows you to specify a job-specific `MIN_INCOMING_CONFIRMATIONS` value, must be greater than global `MIN_INCOMING_CONFIRMATIONS`

#### [Job type specific pipeline variables](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-jobs\#job-type-specific-pipeline-variables-1)

- `$(jobSpec.databaseID)`: the ID of the job spec in the local database. You shouldn't need this in 99% of cases.
- `$(jobSpec.externalJobID)`: the globally-unique job ID for this job. Used to coordinate between node operators in certain cases.
- `$(jobSpec.name)`: the local name of the job.
- `$(jobRun.meta)`: a map of metadata that can be sent to a bridge, etc.
- `$(jobRun.logBlockHash)`: the block hash in which the initiating log was received.
- `$(jobRun.logBlockNumber)`: the block number in which the initiating log was received.
- `$(jobRun.logTxHash)`: the transaction hash that generated the initiating log.
- `$(jobRun.logAddress)`: the address of the contract to which the initiating transaction was sent.
- `$(jobRun.logTopics)`: the log's topics ( `indexed` fields).
- `$(jobRun.logData)`: the log's data (non- `indexed` fields).
- `$(jobRun.blockReceiptsRoot)` : the root of the receipts trie of the block (hash).
- `$(jobRun.blockTransactionsRoot)` : the root of the transaction trie of the block (hash).
- `$(jobRun.blockStateRoot)` : the root of the final state trie of the block (hash).

### [Examples](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-jobs\#examples)

#### [Get > Uint256 job](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-jobs\#get--uint256-job)

Let's assume that a user makes a request to an oracle to call a public API, retrieve a number from the response, remove any decimals and return _uint256_.

- The smart contract example can be found [here](https://docs.chain.link/any-api/get-request/examples/single-word-response).
- The job spec example can be found [here](https://docs.chain.link/chainlink-nodes/job-specs/direct-request-get-uint256).

#### [Get > Int256 job](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-jobs\#get--int256-job)

Let's assume that a user makes a request to an oracle to call a public API, retrieve a number from the response, remove any decimals and return _int256_.

- The job spec example can be found [here](https://docs.chain.link/chainlink-nodes/job-specs/direct-request-get-int256).

#### [Get > Bool job](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-jobs\#get--bool-job)

Let's assume that a user makes a request to an oracle to call a public API, retrieve a boolean from the response and return _bool_.

- The job spec example can be found [here](https://docs.chain.link/chainlink-nodes/job-specs/direct-request-get-bool).

#### [Get > String job](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-jobs\#get--string-job)

Let's assume that a user makes a request to an oracle and would like to fetch a _string_ from the response.

- The smart contract example can be found [here](https://docs.chain.link/any-api/get-request/examples/array-response).
- The job spec example can be found [here](https://docs.chain.link/chainlink-nodes/job-specs/direct-request-get-string).

#### [Get > Bytes job](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-jobs\#get--bytes-job)

Let's assume that a user makes a request to an oracle and would like to fetch _bytes_ from the response (meaning a response that contains an arbitrary-length raw byte data).

- The smart contract example can be found [here](https://docs.chain.link/any-api/get-request/examples/large-responses).
- The job spec example can be found [here](https://docs.chain.link/chainlink-nodes/job-specs/direct-request-get-bytes).

#### [Multi-Word job](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-jobs\#multi-word-job)

Let's assume that a user makes a request to an oracle and would like to fetch multiple words in one single request.

- The smart contract example can be found [here](https://docs.chain.link/any-api/get-request/examples/multi-variable-responses).
- The job spec example can be found [here](https://docs.chain.link/chainlink-nodes/job-specs/multi-word-job).

#### [Existing job](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-jobs\#existing-job)

Using an _existing_ Oracle Job makes your smart contract code more succinct. Let's assume that a user makes a request to an oracle that leverages [Etherscan External Adapter](https://github.com/smartcontractkit/external-adapters-js/tree/develop/packages/sources/etherscan) to retrieve the gas price.

- The smart contract example can be found [here](https://docs.chain.link/any-api/get-request/examples/existing-job-request).
- The job spec example can be found [here](https://docs.chain.link/chainlink-nodes/job-specs/direct-request-existing-job).

## [Flux Monitor Jobs](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-jobs\#flux-monitor-jobs)

The Flux Monitor job type is for continually-updating data feeds that aggregate responses from multiple oracles. The oracles servicing the feed submit rounds based on several triggers:

- An occasional poll, which must show that there has been sufficient deviation from an offchain data source before a new result is submitted
- New rounds initiated by other oracles on the feeds. If another oracle notices sufficient deviation, all other oracles will submit their current observations as well.
- A heartbeat, which ensures that even if no deviation occurs, we submit a new result to prove liveness. This can take one of two forms:
  - The "idle timer", which begins counting down each time a round is started
  - The "drumbeat", which simply ticks at a steady interval, much like a `cron` job

### [Spec format](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-jobs\#spec-format-2)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
type              = "fluxmonitor"
schemaVersion     = 1
name              = "example flux monitor spec"
contractAddress   = "0x3cCad4715152693fE3BC4460591e3D3Fbd071b42"
externalJobID     = "0EEC7E1D-D0D2-476C-A1A8-72DFB6633F03"

threshold = 0.5
absoluteThreshold = 0.0 # optional

idleTimerPeriod   = "1s"
idleTimerDisabled = false

pollTimerPeriod   = "1m"
pollTimerDisabled = false

drumbeatEnabled  = true
drumbeatSchedule = "CRON_TZ=UTC * */20 * * * *"

observationSource = """
    // data source 1
    ds1 [type="http" method=GET url="https://pricesource1.com"\
         requestData="{\\"coin\\": \\"ETH\\", \\"market\\": \\"USD\\"}"]
    ds1_parse [type="jsonparse" path="data,result"]

    // data source 2
    ds2 [type="http" method=GET url="https://pricesource2.com"\
         requestData="{\\"coin\\": \\"ETH\\", \\"market\\": \\"USD\\"}"]
    ds2_parse [type="jsonparse" path="data,result"]

    ds1 -> ds1_parse -> medianized_answer
    ds2 -> ds2_parse -> medianized_answer

    medianized_answer [type=median]
"""

```

### [Shared fields](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-jobs\#shared-fields-2)

See [shared fields](https://docs.chain.link/chainlink-nodes/oracle-jobs/jobs/#shared-fields).

### [Unique fields](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-jobs\#unique-fields-2)

- `contractAddress`: the address of the FluxAggregator contract that manages the feed.
- `threshold`: the percentage threshold of deviation from the previous onchain answer that must be observed before a new set of observations are submitted to the contract.
- `absoluteThreshold`: the absolute numerical deviation that must be observed from the previous onchain answer before a new set of observations are submitted to the contract. This is primarily useful with data that can legitimately sometimes hit 0, as it's impossible to calculate a percentage deviation from 0.
- `idleTimerPeriod`: the amount of time (after the start of the last round) after which a new round will be automatically initiated, regardless of any observed offchain deviation.
- `idleTimerDisabled`: whether the idle timer is used to trigger new rounds.
- `drumbeatEnabled`: whether the drumbeat is used to trigger new rounds.
- `drumbeatSchedule`: the cron schedule of the drumbeat. This field supports the same syntax as the cron job type (see the [cron library documentation](https://pkg.go.dev/github.com/robfig/cron?utm_source=godoc) for details). CRON\_TZ is required.
- `pollTimerPeriod`: the frequency with which the offchain data source is checked for deviation against the previously submitted onchain answer.
- `pollTimerDisabled`: whether the occasional deviation check is used to trigger new rounds.
- **Notes:**
  - For duration parameters, the maximum unit of time is `h` (hour). Durations of a day or longer must be expressed in hours.
  - If no time unit is provided, the default unit is nanoseconds, which is almost never what you want.

### [Job type specific pipeline variables](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-jobs\#job-type-specific-pipeline-variables-2)

- `$(jobSpec.databaseID)`: the ID of the job spec in the local database. You shouldn't need this in 99% of cases.
- `$(jobSpec.externalJobID)`: the globally-unique job ID for this job. Used to coordinate between node operators in certain cases.
- `$(jobSpec.name)`: the local name of the job.
- `$(jobRun.meta)`: a map of metadata that can be sent to a bridge, etc.

## [Keeper jobs](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-jobs\#keeper-jobs)

Keeper jobs occasionally poll a smart contract method that expresses whether something in the contract is ready for some onchain action to be performed. When it's ready, the job executes that onchain action.

Examples:

- Liquidations
- Rebalancing portfolios
- Rebase token supply adjustments
- Auto-compounding
- Limit orders

### [Spec format](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-jobs\#spec-format-3)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
type            = "keeper"
schemaVersion   = 1
evmChainID      = 1
name            = "example keeper spec"
contractAddress = "0x7b3EC232b08BD7b4b3305BE0C044D907B2DF960B"
fromAddress     = "0xa8037A20989AFcBC51798de9762b351D63ff462e"

```

### [Shared fields](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-jobs\#shared-fields-3)

See [shared fields](https://docs.chain.link/chainlink-nodes/oracle-jobs/jobs/#shared-fields).

### [Unique fields](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-jobs\#unique-fields-3)

- `evmChainID`: The numeric chain ID of the chain on which Chainlink Automation Registry is deployed
- `contractAddress`: The address of the Chainlink Automation Registry contract to poll and update
- `fromAddress`: The Oracle node address from which to send updates
- `externalJobID`: This is an optional field. When omitted it will be generated

## [Offchain reporting jobs](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-jobs\#offchain-reporting-jobs)

Offchain Reporting (OCR) jobs are used very similarly to Flux Monitor jobs. They update data feeds with aggregated data from many Chainlink oracle nodes. However, they do this aggregation using a cryptographically-secure offchain protocol that makes it possible for only a single node to submit all answers from all participating nodes during each round (with proofs that the other nodes' answers were legitimately provided by those nodes), which saves a significant amount of gas.

Offchain reporting jobs require the `FEATURE_OFFCHAIN_REPORTING=true` environment variable.

### [Bootstrap node](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-jobs\#bootstrap-node)

Every OCR cluster requires at least one bootstrap node as a kind of "rallying point" that enables the other nodes to find one another. Bootstrap nodes do not participate in the aggregation protocol and do not submit answers to the feed.

#### [Spec format](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-jobs\#spec-format-4)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
type               = "offchainreporting"
schemaVersion      = 1
evmChainID         = 1
contractAddress    = "0x27548a32b9aD5D64c5945EaE9Da5337bc3169D15"
p2pBootstrapPeers  = [\
    "/dns4/chain.link/tcp/1234/p2p/16Uiu2HAm58SP7UL8zsnpeuwHfytLocaqgnyaYKP8wu7qRdrixLju",\
]
isBootstrapPeer = true
externalJobID   = "0EEC7E1D-D0D2-476C-A1A8-72DFB6633F05"

```

#### [Shared fields](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-jobs\#shared-fields-4)

See [shared fields](https://docs.chain.link/chainlink-nodes/oracle-jobs/jobs/#shared-fields).

#### [Unique fields](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-jobs\#unique-fields-4)

- `contractAddress`: The address of the `OffchainReportingAggregator` contract.

- `evmChainID`: The chain ID of the EVM chain in which the job will operate.

- `p2pBootstrapPeers`: A list of libp2p dial addresses of the other bootstrap nodes helping oracle nodes find one another on the network. It is used with P2P networking stack V1 as follows:

`p2pBootstrapPeers = [ "/dns4/HOST_NAME_OR_IP/tcp/PORT/p2p/BOOTSTRAP_NODE'S_P2P_ID" ]`

- `p2pv2Boostrappers`: A list of libp2p dial addresses of the other bootstrap nodes helping oracle nodes find one another on the network. It is used with P2P networking stack V2 as follows:

`p2pv2Boostrappers = [ "BOOTSTRAP_NODE'S_P2P_ID@HOST_NAME_OR_IP:PORT" ]`

- `isBootstrapPeer`: This must be set to `true`.


#### [Job type specific pipeline variables](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-jobs\#job-type-specific-pipeline-variables-3)

- `$(jobSpec.databaseID)`: The ID of the job spec in the local database. You shouldn't need this in 99% of cases.
- `$(jobSpec.externalJobID)`: The globally-unique job ID for this job. Used to coordinate between node operators in certain cases.
- `$(jobSpec.name)`: The local name of the job.
- `$(jobRun.meta)`: A map of metadata that can be sent to a bridge, etc.

### [Oracle node](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-jobs\#oracle-node)

Oracle nodes, on the other hand, are responsible for submitting answers.

### [Spec format](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-jobs\#spec-format-5)

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
type               = "offchainreporting"
schemaVersion      = 1
evmChainID         = 1
name               = "OCR: ETH/USD"
contractAddress    = "0x613a38AC1659769640aaE063C651F48E0250454C"
externalJobID      = "0EEC7E1D-D0D2-476C-A1A8-72DFB6633F06"
p2pPeerID          = "12D3KooWApUJaQB2saFjyEUfq6BmysnsSnhLnY5CF9tURYVKgoXK"
p2pBootstrapPeers  = [\
    "/dns4/chain.link/tcp/1234/p2p/16Uiu2HAm58SP7UL8zsnpeuwHfytLocaqgnyaYKP8wu7qRdrixLju",\
]
isBootstrapPeer    = false
keyBundleID        = "7f993fb701b3410b1f6e8d4d93a7462754d24609b9b31a4fe64a0cb475a4d934"
monitoringEndpoint = "chain.link:4321"
transmitterAddress = "0xF67D0290337bca0847005C7ffD1BC75BA9AAE6e4"
observationTimeout = "10s"
blockchainTimeout  = "20s"
contractConfigTrackerSubscribeInterval = "2m"
contractConfigTrackerPollInterval = "1m"
contractConfigConfirmations = 3
observationSource = """
    // data source 1
    ds1          [type="bridge" name=eth_usd]
    ds1_parse    [type="jsonparse" path="one,two"]
    ds1_multiply [type="multiply" times=100]

    // data source 2
    ds2          [type="http" method=GET url="https://chain.link/eth_usd"\
                  requestData="{\\"hi\\": \\"hello\\"}"]
    ds2_parse    [type="jsonparse" path="three,four"]
    ds2_multiply [type="multiply" times=100]

    ds1 -> ds1_parse -> ds1_multiply -> answer
    ds2 -> ds2_parse -> ds2_multiply -> answer

    answer [type=median]
"""

```

#### [Shared fields](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-jobs\#shared-fields-5)

See [shared fields](https://docs.chain.link/chainlink-nodes/oracle-jobs/jobs/#shared-fields).

#### [Unique fields](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-jobs\#unique-fields-5)

- `contractAddress`: The address of the `OffchainReportingAggregator` contract.

- `evmChainID`: The chain ID of the EVM chain in which the job will operate.

- `p2pPeerID`: The base58-encoded libp2p public key of this node.

- `p2pBootstrapPeers`: A list of libp2p dial addresses of the other bootstrap nodes helping oracle nodes find one another on the network. It is used with P2P networking stack V1 as follows:
`p2pBootstrapPeers = [ "/dns4/<host name or ip>/tcp/<port>/p2p/<bootstrap node's P2P ID>" ]`

- `p2pv2Boostrappers`: A list of libp2p dial addresses of the other bootstrap nodes helping oracle nodes find one another on the network. It is used with P2P networking stack V2 as follows:

`p2pv2Boostrappers = [ "<bootstrap node's P2P ID>@<host name or ip>:<port>" ]`

- `keyBundleID`: The hash of the OCR key bundle to be used by this node. The Chainlink node keystore manages these key bundles. Use the node **Key Management** UI or the `chainlink keys ocr` sub-commands in the CLI to create and manage key bundles.

- `monitoringEndpoint`: The URL of the telemetry endpoint to send OCR metrics to.

- `transmitterAddress`: The Ethereum address from which to send aggregated submissions to the OCR contract.

- `observationTimeout`: The maximum duration to wait before an offchain request for data is considered to be failed/unfulfillable.

- `blockchainTimeout`: The maximum duration to wait before an onchain request for data is considered to be failed/unfulfillable.

- `contractConfigTrackerSubscribeInterval`: The interval at which to retry subscribing to onchain config changes if a subscription has not yet successfully been made.

- `contractConfigTrackerPollInterval`: The interval at which to proactively poll the onchain config for changes.

- `contractConfigConfirmations`: The number of blocks to wait after an onchain config change before considering it worthy of acting upon.


#### [Job type specific pipeline variables](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-jobs\#job-type-specific-pipeline-variables-4)

- `$(jobSpec.databaseID)`: The ID of the job spec in the local database. You shouldn't need this in 99% of cases.
- `$(jobSpec.externalJobID)`: The globally-unique job ID for this job. Used to coordinate between node operators in certain cases.
- `$(jobSpec.name)`: The local name of the job.
- `$(jobRun.meta)`: A map of metadata that can be sent to a bridge, etc.

## [Webhook Jobs](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-jobs\#webhook-jobs)

Webhook jobs can be initiated by HTTP request, either by a user or external initiator.

This is an example webhook job:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
type            = "webhook"
schemaVersion   = 1
externalInitiators = [\
  { name = "my-external-initiator-1", spec = "{\"foo\": 42}" },\
  { name = "my-external-initiator-2", spec = "{}" }\
]
observationSource   = """
    parse_request  [type="jsonparse" path="data,result" data="$(jobRun.requestBody)"]
    multiply       [type="multiply" input="$(parse_request)" times="100"]
    send_to_bridge [type="bridge" name="my_bridge" requestData="{ \\"result\\": $(multiply) }"]

    parse_request -> multiply -> send_to_bridge
"""

```

All webhook jobs can have runs triggered by a logged in user.

Webhook jobs may additionally specify zero or more external initiators, which can also trigger runs for this job. The name must exactly match the name of the referred external initiator. The external initiator definition here must contain a `spec` which defines the JSON payload that will be sent to the External Initiator on job creation if the external initiator has a URL. If you don't care about the spec, you can simply use the empty JSON object.

### [Unique fields](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-jobs\#unique-fields-6)

- `externalInitiators` \- an array of `{name, spec}` objects, where `name` is the name registered with the node, and `spec` is the job spec to be forwarded to the external initiator when it is created.

### [Shared fields](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-jobs\#shared-fields-6)

See [shared fields](https://docs.chain.link/chainlink-nodes/oracle-jobs/jobs/#shared-fields).

### [Job type specific pipeline variables](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-jobs\#job-type-specific-pipeline-variables-5)

- `$(jobSpec.databaseID)`: the ID of the job spec in the local database. You shouldn't need this in 99% of cases.
- `$(jobSpec.externalJobID)`: the globally-unique job ID for this job. Used to coordinate between node operators in certain cases.
- `$(jobSpec.name)`: the local name of the job.
- `$(jobRun.meta)`: a map of metadata that can be sent to a bridge, etc.
- `$(jobRun.requestBody)`: the body of the request that initiated the job run.

## Get the latest Chainlink content straight to your inbox.

Email Address

[iframe](https://td.doubleclick.net/td/rul/346357746?random=1748840203352&cv=11&fst=1748840203352&fmt=3&bg=ffffff&guid=ON&async=1&gcl_ctr=1&gtm=45be55s2h1v891173849z8847174275za200zb847174275&gcd=13l3l3l3l1l1&dma=0&tag_exp=101509157~103116026~103200004~103233427~103252644~103252646~103351869~103351871~104481633~104481635~104559073~104559075~104612245~104612247~103308615&ptag_exp=101509157~103116026~103200004~103233427~103252644~103252646~103351869~103351871~104481633~104481635~104559073~104559075~104612245~104612247&u_w=1280&u_h=1024&url=https%3A%2F%2Fdocs.chain.link%2Fchainlink-nodes%2Foracle-jobs%2Fall-jobs&_ng=1&label=_duuCKn_k4cYEPL_k6UB&hn=www.googleadservices.com&frm=0&tiba=Job%20Types%20%7C%20Chainlink%20Documentation&value=0&bttype=purchase&npa=0&pscdl=noapi&auid=1768039038.1748840203&uaa=x86&uab=64&uafvl=Google%2520Chrome%3B137.0.7151.55%7CChromium%3B137.0.7151.55%7CNot%252FA)Brand%3B24.0.0.0&uamb=0&uam=&uap=Linux%20x86_64&uapv=6.6.72&uaw=0&ec_mode=a&fledge=1&capi=1&_tu=Cg&em=tv.1&ct_cookie_present=0)

## Enable HTTPS Connections
[iframe](https://www.googletagmanager.com/ns.html?id=GTM-N6DQ47T)

Chainlink CCIP is now officially live on Solana. [View lanes and tokens.](https://docs.chain.link/ccip/directory/mainnet/chain/solana-mainnet?utm_medium=referral&utm_source=chainlink-docs&utm_campaign=solana-ccip)

On this page

# [Enabling HTTPS Connections](https://docs.chain.link/chainlink-nodes/resources/enabling-https-connections\#overview)

This guide will walk you through how to generate your own self-signed certificates for use by the Chainlink node. You can also substitute self-signed certificates with certificates of your own, like those created by [Let's Encrypt](https://letsencrypt.org/).

Create a directory `tls/` within your local Chainlink directory:

SepoliaMainnet

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```text
mkdir ~/.chainlink-sepolia/tls

```

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```text
mkdir ~/.chainlink/tls

```

Run this command to create a `server.crt` and `server.key` file in the previously created directory:

SepoliaMainnet

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
openssl req -x509 -out  ~/.chainlink-sepolia/tls/server.crt  -keyout ~/.chainlink-sepolia/tls/server.key \
  -newkey rsa:2048 -nodes -sha256 -days 365 \
  -subj '/CN=localhost' -extensions EXT -config <( \
   printf "[dn]\nCN=localhost\n[req]\ndistinguished_name = dn\n[EXT]\nsubjectAltName=DNS:localhost\nkeyUsage=digitalSignature\nextendedKeyUsage=serverAuth")

```

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
openssl req -x509 -out  ~/.chainlink/tls/server.crt  -keyout ~/.chainlink/tls/server.key \
  -newkey rsa:2048 -nodes -sha256 -days 365 \
  -subj '/CN=localhost' -extensions EXT -config <( \
   printf "[dn]\nCN=localhost\n[req]\ndistinguished_name = dn\n[EXT]\nsubjectAltName=DNS:localhost\nkeyUsage=digitalSignature\nextendedKeyUsage=serverAuth")

```

Next, add the `TLS_CERT_PATH` and `TLS_KEY_PATH` environment variables to your `.env` file.

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
echo "TLS_CERT_PATH=/chainlink/tls/server.crt
TLS_KEY_PATH=/chainlink/tls/server.key" >> .env

```

If `CHAINLINK_TLS_PORT=0` is present in your `.env` file, remove it by running:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
sed -i '/CHAINLINK_TLS_PORT=0/d' .env

```

Also remove the line that disables `SECURE_COOKIES` by running:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
code": "sed -i '/SECURE_COOKIES=false/d' .env

```

Finally, update your run command to forward port 6689 to the container instead of 6688:

SepoliaMainnet

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
cd ~/.chainlink-sepolia && docker run -p 6689:6689 -v ~/.chainlink-sepolia:/chainlink -it
--env-file=.env smartcontract/chainlink local n

```

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
cd ~/.chainlink && docker run -p 6689:6689 -v ~/.chainlink:/chainlink -it --env-file=.env
smartcontract/chainlink local n

```

Now when running the node, you can access it by navigating to [https://localhost:6689](https://localhost:6689/) if running on the same machine or with a ssh tunnel.

## What's next

- [\> Miscellaneous](https://docs.chain.link/chainlink-nodes/resources/miscellaneous)

## Get the latest Chainlink content straight to your inbox.

Email Address

## EVM Performance Optimization
[iframe](https://www.googletagmanager.com/ns.html?id=GTM-N6DQ47T)

Chainlink CCIP is now officially live on Solana. [View lanes and tokens.](https://docs.chain.link/ccip/directory/mainnet/chain/solana-mainnet?utm_medium=referral&utm_source=chainlink-docs&utm_campaign=solana-ccip)

On this page

# [Optimizing EVM Performance](https://docs.chain.link/chainlink-nodes/resources/evm-performance-configuration\#overview)

The most basic Chainlink node deployment uses the default configuration on only a single primary node with a websocket URL. This configuration is appropriate for small or simple workloads with only a few jobs that execute infrequently. If you need to run hundreds of jobs and thousands of transactions per hour, your Chainlink and RPC nodes will require a more advanced configuration. This guide explains how to configure Chainlink and your EVM nodes for high reliability and throughput.

## [Using multiple nodes](https://docs.chain.link/chainlink-nodes/resources/evm-performance-configuration\#using-multiple-nodes)

Chainlink node version 1.3.0 and later support configurations with multiple primary nodes and send-only nodes with automatic liveness detection and failover. It is no longer necessary to run a load balancing failover RPC proxy between Chainlink and its EVM RPC nodes.

If you are using a failover proxy transparently for commercial node provider services, it will continue to work properly as long as the RPC you are talking to acts just like a standard RPC node.

You can have as many primary nodes as you want. Requests are evenly distributed across all nodes, so the performance increase will be linear as you add more nodes. If a node fails with no heads for several minutes or a failed liveness check, it is removed from the live pool and all requests are routed to one of the live nodes. If no live nodes are available, the system attempts to use nodes from the list of failed nodes at random.

You can configure as many send-only nodes as you want. Send-only nodes only broadcast transactions and do not process regular RPC calls. Specifying additional send-only nodes uses a minimum number of RPC calls and can help to include transactions faster. Send-only nodes also act as backup if your primary node starts to blackhole transactions.

Here is an example for how to specify the [`EVM_NODES` environment variable](https://docs.chain.link/chainlink-nodes/v1/configuration):

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
export EVM_NODES='
[\
  {\
    "name": "primary_1",\
    "evmChainId": "137",\
    "wsUrl": "wss://endpoint-1.example.com/ws",\
    "httpUrl": "http://endpoint-1.example.com/",\
    "sendOnly": false\
  },\
  {\
    "name": "primary_2",\
    "evmChainId": "137",\
    "wsUrl": "ws://endpoint-2.example.com/ws",\
    "httpUrl": "http://endpoint-2.example.com/",\
    "sendOnly": false\
  },\
  {\
    "name": "primary_3",\
    "evmChainId": "137",\
    "wsUrl": "wss://endpoint-3.example.com/ws",\
    "httpUrl": "http://endpoint-3.example.com/",\
    "sendOnly": false\
  },\
  {\
    "name": "sendonly_1",\
    "evmChainId": "137",\
    "httpUrl": "http://endpoint-4.example.com/",\
    "sendOnly": true\
  },\
  {\
    "name": "sendonly_2",\
    "evmChainId": "137",\
    "httpUrl": "http://endpoint-5.example.com/",\
    "sendOnly": true\
  },\
]
'

```

Send-only nodes are used for broadcasting transactions only, and must support the following RPC calls:

- `eth_chainId`: Returns the chain ID
- `eth_sendRawTransaction`: Both regular and batched
- `web3_clientVersion`: Can return any arbitrary string

## [Automatic load balancing and failover](https://docs.chain.link/chainlink-nodes/resources/evm-performance-configuration\#automatic-load-balancing-and-failover)

Chainlink node version 1.3.0 and above has built in failover and load balancing for primary nodes. Chainlink always uses round-robin requests across all primary nodes. Chainlink monitors when nodes go offline and stops routing requests to those nodes. If you don't want to use Chainlink's built-in failover, or you want to use an external proxy instead, you can disable failover completely using the following environment variables:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```text
NODE_NO_NEW_HEADS_THRESHOLD=0
NODE_POLL_FAILURE_THRESHOLD=0
NODE_POLL_INTERVAL=0

```

- [NODE\_NO\_NEW\_HEADS\_THRESHOLD](https://docs.chain.link/chainlink-nodes/v1/configuration): Controls how long to wait receiving no new heads before marking a node dead
- [NODE\_POLL\_FAILURE\_THRESHOLD](https://docs.chain.link/chainlink-nodes/v1/configuration): Controls how many consecutive poll failures will disable a node
- [NODE\_POLL\_INTERVAL](https://docs.chain.link/chainlink-nodes/v1/configuration): Controls how often the node will be polled

By default, these environment variables use the following values:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```text
NODE_NO_NEW_HEADS_THRESHOLD="3m"
NODE_POLL_FAILURE_THRESHOLD="5"
NODE_POLL_INTERVAL="10s"

```

## [Configuring websocket and HTTP URLs](https://docs.chain.link/chainlink-nodes/resources/evm-performance-configuration\#configuring-websocket-and-http-urls)

It is not recommended to configure primary nodes with _only_ a websocket URL. Routing all traffic over only a websocket can cause problems. As a best practices, every primary node must have both websocket and HTTP URLs specified. This allows Chainlink to route almost all RPC calls over HTTP, which tends to be more robust and reliable. The websocket URL is used only for subscriptions. Both URLs must point to the same node because they are bundled together and have the same liveness state.

If you enabled HTTP URLs on all your primary nodes, you can increase the values for the following environment variables:

- [ETH\_RPC\_DEFAULT\_BATCH\_SIZE](https://docs.chain.link/chainlink-nodes/v1/configuration)
- [BLOCK\_HISTORY\_ESTIMATOR\_BATCH\_SIZE](https://docs.chain.link/chainlink-nodes/v1/configuration)
- [ETH\_LOG\_BACKFILL\_BATCH\_SIZE](https://docs.chain.link/chainlink-nodes/v1/configuration)

By default, these config variables are set conservatively to avoid overflowing websocket frames. In HTTP mode, there are no such limitations. You might be able to improve performance with increased values similar to the following example:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```text
ETH_RPC_DEFAULT_BATCH_SIZE=1000
BLOCK_HISTORY_ESTIMATOR_BATCH_SIZE=100
ETH_LOG_BACKFILL_BATCH_SIZE=1000

```

## [Increasing transaction throughput](https://docs.chain.link/chainlink-nodes/resources/evm-performance-configuration\#increasing-transaction-throughput)

By default, Chainlink has conservative limits because it must be compliant with standard out-of-the-box RPC configurations. This limits transaction throughput and the performance of some RPC calls.

Before you make any changes to your Chainlink configuration, you must ensure that _all_ of your primary and send-only nodes are configured to handle the increased throughput.

### [Increase `ETH_MAX_QUEUED_TRANSACTIONS`](https://docs.chain.link/chainlink-nodes/resources/evm-performance-configuration\#increase-eth_max_queued_transactions)

You can increase `ETH_MAX_QUEUED_TRANSACTIONS` if you require high burst throughput. Setting this variable to `0` disables any limit and ensures that no transaction are ever dropped. The default is set automatically based on the chain ID and usually is `250`. Overriding this value does not require any RPC changes and only affects the Chainlink side.

This represents the maximum number of unbroadcast transactions per key that are allowed to be enqueued before jobs start failing and refusing to send further transactions. It acts as a “buffer” for transactions waiting to be sent. If the buffer is exceeded, transactions will be permanently dropped.

Do not set `ETH_MAX_QUEUED_TRANSACTIONS` too high. It acts as a sanity limit and the queue can grow unbounded if you are trying to send transactions consistently faster than they can be confirmed. If you have an issue that must be recovered later, you will have to churn through all the enqueued transactions. As a best practice, set `ETH_MAX_QUEUED_TRANSACTIONS` to the minimum possible value that supports your burst requirements or represents the maximum number of transactions that could be sent in a given 15 minute window.

`ETH_MAX_QUEUED_TRANSACTIONS=10000` might be an example where very high burst throughput is needed.

### [Increase `ETH_MAX_IN_FLIGHT_TRANSACTIONS`](https://docs.chain.link/chainlink-nodes/resources/evm-performance-configuration\#increase-eth_max_in_flight_transactions)

`ETH_MAX_IN_FLIGHT_TRANSACTIONS` is another variable that you can increase if you require higher constant transaction throughput. Setting this variable to `0` disables any kind of limit. The default value is `16`.

`ETH_MAX_IN_FLIGHT_TRANSACTIONS` controls how many transactions are allowed to be broadcast but unconfirmed at any one time. This is a form of transaction throttling.

The default is set conservatively at `16` because this is a pessimistic minimum that go-ethereum will hold without evicting local transactions. If your node is falling behind and not able to get transactions in as fast as they are created, you can increase this setting.

## [Optimizing RPC nodes](https://docs.chain.link/chainlink-nodes/resources/evm-performance-configuration\#optimizing-rpc-nodes)

You can also improve transaction throughput by optimizing RPC nodes. Configure your RPC node to **never** evict local transactions. For example, you can use the following example configurations:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```text
[Eth.TxPool]
Locals = ["0xYourNodeAddress1", "0xYourNodeAddress2"]  # Add your node addresses here
NoLocals = false # Disabled by default but might as well make sure
Journal = "transactions.rlp" # Make sure you set a journal file
Rejournal = 3600000000000 # Default 1h, it might make sense to reduce this to e.g. 5m
PriceBump = 10 # Must be set less than or equal to Chainlink's ETH_GAS_BUMP_PERCENT
AccountSlots = 16 # Highly recommended to increase this, must be greater than or equal to Chainlink's ETH_MAX_IN_FLIGHT_TRANSACTIONS setting
GlobalSlots = 4096 # Increase this as necessary
AccountQueue = 64 # Increase this as necessary
GlobalQueue = 1024 # Increase this as necessary
Lifetime = 10800000000000 # Default 3h, this is probably ok, you might even consider reducing it

```

If you are using another RPC node, such as Besu or Nethermind, you must look at the documentation for that node to ensure that it will keep at least as many transactions in the mempool for the Chainlink node keys as you have set in `ETH_MAX_IN_FLIGHT_TRANSACTIONS`.

The recommended way to scale is to use more keys rather than increasing throughput for one key.

## [Remove rejections on expensive transactions](https://docs.chain.link/chainlink-nodes/resources/evm-performance-configuration\#remove-rejections-on-expensive-transactions)

By default, go-ethereum rejects transactions that exceed its built-in RPC gas or txfee caps. Chainlink nodes fatally error transactions if this happens. If you ever exceed the caps, your node will miss transactions.

Disable the default RPC gas and txfee caps on your ETH node in the config using the TOML snippet shown below, or by running go-ethereum with the command line arguments: `--rpc.gascap=0 --rpc.txfeecap=0`.

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```text
[Eth]
RPCGasCap = 0
RPCTxFeeCap = 0.0

```

### [Arbitrum differences](https://docs.chain.link/chainlink-nodes/resources/evm-performance-configuration\#arbitrum-differences)

Arbitrum Nitro runs a fork of go-ethereum internally, but the original flags are not valid. These modified flags are equivalent:

`--node.rpc.gas-cap 0 --node.rpc.tx-fee-cap 0`

## [Adjusting minimum outgoing confirmations for high throughput jobs](https://docs.chain.link/chainlink-nodes/resources/evm-performance-configuration\#adjusting-minimum-outgoing-confirmations-for-high-throughput-jobs)

`ethtx` tasks have a `minConfirmations` label that can be adjusted. You can get a minor performance boost if you set this label to `0`. Use this if you do not need to wait for confirmations on your `ethtx` tasks. For example, if you don't need the receipt or don't care about failing the task if the transaction reverts onchain, you can set `minConfirmations` to `0`.

Set the task label similarly to the following example:

`foo [type=ethtx minConfirmations=0 ...]`

Note that this only affects the presentation of jobs, and whether they are marked as errored or not. It has no effect on inclusion of the transaction, which is handled with separate logic.

## [Increase `ORM_MAX_OPEN_CONNS` and `ORM_MAX_IDLE_CONNS`](https://docs.chain.link/chainlink-nodes/resources/evm-performance-configuration\#increase-orm_max_open_conns-and-orm_max_idle_conns)

Chainlink can be configured to allow more concurrent database connections than the default. This might improve performance, but be careful not to exceed postgres connection limits. These variables have the following default values:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```text
ORM_MAX_OPEN_CONNS=20
ORM_MAX_IDLE_CONNS=10

```

You might increase these values to `ORM_MAX_OPEN_CONNS=50` and `ORM_MAX_IDLE_CONNS=25` if you have a large and powerful database server with high connection count headroom.

## What's next

- [\> Performing System Maintenance](https://docs.chain.link/chainlink-nodes/resources/performing-system-maintenance)
- [\> Security and Operation Best Practices](https://docs.chain.link/chainlink-nodes/resources/best-security-practices)

## Get the latest Chainlink content straight to your inbox.

Email Address

## Chainlink Node Security
[iframe](https://www.googletagmanager.com/ns.html?id=GTM-N6DQ47T)

Chainlink CCIP is now officially live on Solana. [View lanes and tokens.](https://docs.chain.link/ccip/directory/mainnet/chain/solana-mainnet?utm_medium=referral&utm_source=chainlink-docs&utm_campaign=solana-ccip)

On this page

# [Security and Operation Best Practices](https://docs.chain.link/chainlink-nodes/resources/best-security-practices\#overview)

The following information provides a set of security and operation best practices that node operators need to use at a minimum to enhance the security and reliability of their infrastructure.

## [Restricting access](https://docs.chain.link/chainlink-nodes/resources/best-security-practices\#restricting-access)

To run a Chainlink node, the Operator UI port does not need to be open on the internet for it to correctly function. Due to this, we strongly recommend restricting access to all of the services required over the internet.

**Minimum Requirements:**

- SSH (port 22 or changed from the default) is open, and access to the node is granted via SSH tunnelling. This is done typically by adding `-L 6688:localhost:6688` to your SSH command.
- Access to the Ethereum client that the Chainlink node uses is restricted to solely the Chainlink node. This includes ports 8545 and 8546, but excludes 30303 for P2P traffic.

**Recommended:**

- The use of a VPN restricts access to only those who are signed into the VPN in order to access internal resources. For example, this can be achieved by using something like [OpenVPN Access Server](https://openvpn.net/vpn-server/).
- With the use of the VPN, all traffic between Chainlink nodes and Ethereum clients is routed internally rather than over the internet. For example, all servers are placed in an internal subnet range such as `10.0.0.0/16` and use these IP addresses for communicating.
- Chainlink nodes have the potential to send arbitrary HTTP GET and POST requests, exposing internal network resources. We recommend deploying with a DMZ which has strong outbound network restrictions.

## [Failover capabilities](https://docs.chain.link/chainlink-nodes/resources/best-security-practices\#failover-capabilities)

To ensure there is very minimal downtime, failover capabilities are required on both the Chainlink and Ethereum clients so that if any one server fails, the service is still online.

**Minimum requirements:**

- Chainlink nodes are using a PostgreSQL database that are not on the same servers as the Chainlink nodes.
- At least two Chainlink nodes are running at any one time, with both of them pointing to the same database to ensure failover if one fails.

**Ethereum-specific:**

- Ethereum client websocket connectivity is fronted by a load balancer, used by the Chainlink nodes. [Here is an example on how to set up a load balancer](https://docs.aws.amazon.com/elasticloadbalancing/latest/application/tutorial-target-ecs-containers.html).

  - If a VPN and internal routing is configured, SSL is not needed but still recommended, as all traffic is purely internal.
  - If both Ethereum and Chainlink nodes are public facing without a VPN, SSL is required to ensure that no communication between both can be intercepted.

## [Disaster recovery](https://docs.chain.link/chainlink-nodes/resources/best-security-practices\#disaster-recovery)

Problems occur and when they do, the right processes need to be in-place to ensure that as little downtime as possible occurs. The main impediment to incurring large amounts of downtime in the context of Chainlink node operators is a fully corrupted Ethereum node that requires a re-sync.

Due to the challenge of recovering an Ethereum client, we recommend:

- Daily snapshots of the Ethereum chain on a separate server than what the Chainlink node is connected to.
- An Ethereum client start-up process that pulls down the latest template of the chain and syncs it to the latest height.

With this process in-place, the elapsed time of full disaster is kept to a minimum.

## [Active monitoring](https://docs.chain.link/chainlink-nodes/resources/best-security-practices\#active-monitoring)

To be proactive in detecting any issues before or when they occur, active monitoring needs to be in place. The areas where we recommend to monitor are:

- (Minimum Required) ETH balance of the wallet address assigned to the node.
- Errored job runs.
- Operator UI port to be open and responsive. (Usually: 6688)
- Ethereum http and websocket ports to be open and responsive. (Usually: 8545 & 8546)
- Ethereum client disk, RAM and CPU usage.

Monitoring can be set up from the Docker container's output and fed into most major logging providers. For example, you can use Docker's docs to set up the logging driver for [Amazon CloudWatch](https://docs.docker.com/config/containers/logging/awslogs/) and [Google Cloud Logging](https://docs.docker.com/config/containers/logging/gcplogs/). You will want to set the [JSON\_CONSOLE](https://docs.chain.link/chainlink-nodes/v1/configuration) configuration variable to `true` so that the output of the container is JSON-formatted for logging.

## [Frequent updates](https://docs.chain.link/chainlink-nodes/resources/best-security-practices\#frequent-updates)

Due to the early nature of the software, it may be required to perform frequent updates to your Chainlink node.

On performing system maintenance to update the Chainlink node, follow [this](https://docs.chain.link/chainlink-nodes/resources/performing-system-maintenance/#failover-node-example) guide.

## [Jobs and config](https://docs.chain.link/chainlink-nodes/resources/best-security-practices\#jobs-and-config)

The following are suggestions for job specifications and configuration settings for the node.

[Job Specifications](https://docs.chain.link/chainlink-nodes/oracle-jobs/jobs):

- Include the address of your oracle contract address for all RunLog initiated jobs, as shown in the [Fulfilling Requests](https://docs.chain.link/chainlink-nodes/v1/fulfilling-requests/#add-a-job-to-the-node) guide.
- Override the global `MIN_INCOMING_CONFIRMATIONS` config by setting a `confirmations` field in jobs which perform offchain payments to allow for greater security by making the node ensure the transaction is still valid after X blocks.

[Configuring Chainlink Nodes](https://docs.chain.link/chainlink-nodes/v1/configuration):

- [MINIMUM\_CONTRACT\_PAYMENT\_LINK\_JUELS](https://docs.chain.link/chainlink-nodes/v1/configuration): ensure your required payment amount is high enough to meet the costs of responding onchain.
- [MIN\_INCOMING\_CONFIRMATIONS](https://docs.chain.link/chainlink-nodes/v1/configuration): this can be set to 0 for common data request jobs. See the bullet above on setting individual `confirmations` for specific jobs.
- [LOG\_FILE\_MAX\_SIZE](https://docs.chain.link/chainlink-nodes/v1/configuration): Set this to `0` if you're using external log drivers which parse the output from Docker containers. This will save you disk space.
- [JSON\_CONSOLE](https://docs.chain.link/chainlink-nodes/v1/configuration): Set to `true` if you're using external log drivers to parse the output of Docker containers. This will make it easier to parse individual fields of the log and set up alerts.

## [Addresses](https://docs.chain.link/chainlink-nodes/resources/best-security-practices\#addresses)

- Chainlink node address: this is the address used by the Chainlink node to sign and send responses onchain. This address should not be used by any other service since the Chainlink node keeps track of its nonce locally (instead of polling the network each transaction). This address only needs to be funded with ETH to be able to write back to the blockchain.
- Oracle contract address: this is the address that users will send Chainlink requests to, and which your Chainlink node will fulfill them through this contract. For best practice, it should be owned by a secure address in your control, like a hardware or cold wallet, since it has access to your earned LINK funds. You will not need to fund this contract with anything (LINK or ETH). Instead, users will fund the contract with LINK as they send requests to it, and those funds will become available for withdrawal as your node fulfills the requests.

## [Infrastructure as Code (IaC)](https://docs.chain.link/chainlink-nodes/resources/best-security-practices\#infrastructure-as-code-iac)

Running a Chainlink node works well if you template out your infrastructure using tools like Kubernetes or Terraform. The following repositories can assist you with doing that:

- [Pega88's Kubernetes & Terraform setup](https://github.com/Pega88/chainlink-gcp)
- [SDL Chainlink Kubernetes Deployment](https://github.com/mycelium-ethereum/ChainlinkKubernetes)
- [LinkPool's Terraform Provider](https://github.com/linkpoolio/terraform-provider-chainlink)
- [Ansible hardened Chainlink](https://github.com/WilsonBillkia/bane)
- [Terraform module for serverless OCR node on AWS](https://github.com/ChainOrion/terraform-aws-chainlink-node)
- [Terraform module for serverless adapters on AWS](https://github.com/ChainOrion/terraform-aws-chainlink-ea)

## Get the latest Chainlink content straight to your inbox.

Email Address

## Chainlink Node Maintenance
[iframe](https://www.googletagmanager.com/ns.html?id=GTM-N6DQ47T)

Chainlink CCIP is now officially live on Solana. [View lanes and tokens.](https://docs.chain.link/ccip/directory/mainnet/chain/solana-mainnet?utm_medium=referral&utm_source=chainlink-docs&utm_campaign=solana-ccip)

On this page

# [Performing System Maintenance](https://docs.chain.link/chainlink-nodes/resources/performing-system-maintenance\#overview)

You might occasionally need to restart the system that the Chainlink node runs on. To restart without any downtime for completing requests, perform the upgrade as a series of steps that passes database access to a new instance while the first instance is down.

## [Maintenance and image update example](https://docs.chain.link/chainlink-nodes/resources/performing-system-maintenance\#maintenance-and-image-update-example)

First, find the most recent Chainlink image on [Docker Hub](https://hub.docker.com/r/smartcontract/chainlink/) and pull that Docker image. For version 1.11.0:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
docker pull smartcontract/chainlink:1.11.0

```

Then, check what port the existing container is running on:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
docker ps

```

Output:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```plaintext
CONTAINER ID        IMAGE                            COMMAND                  CREATED             STATUS              PORTS                    NAMES
2d203191c1d6        smartcontract/chainlink:latest   "./chainlink-launche…"   26 seconds ago      Up 25 seconds       0.0.0.0:6688->6688/tcp   jovial_shirley

```

Look under the PORTS label to see the ports in use by the running container, in this case, the local port 6688 has been mapped to the application's port 6688, as identified by the `->` arrow. Since we can't use the same local port number twice, we'll need to run the second instance with a different one.

Now start the second instance of the node. The local port option has been modified so that both containers run simultaneously.

SepoliaMainnet

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
cd ~/.chainlink-sepolia && docker run -p 6687:6688 -v ~/.chainlink-sepolia:/chainlink -it
--env-file=.env smartcontract/chainlink local n

```

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
cd ~/.chainlink && docker run -p 6687:6688 -v ~/.chainlink:/chainlink -it --env-file=.env
smartcontract/chainlink local n

```

The log messages on the second node instance inform you that it is waiting for the database lock.

Now you can shut down the first node instance. We'll use the name given earlier and kill the container. Note that your container name will likely be different.

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
docker kill jovial_shirley

```

The output returns the name "jovial\_shirley" (or what your container's name was) and if you look at the log of your second container, you'll notice that it has taken over.

At this point, you're now running the latest image on your secondary container. If you have any system maintenance to perform on your primary machine, you can do so now.

Next, run the container again with the local port 6688 in order to go back to normal operations.

SepoliaMainnet

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
cd ~/.chainlink-sepolia && docker run -p 6688:6688 -v ~/.chainlink-sepolia:/chainlink -it
--env-file=.env smartcontract/chainlink local n

```

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
cd ~/.chainlink && docker run -p 6688:6688 -v ~/.chainlink:/chainlink -it --env-file=.env
smartcontract/chainlink local n

```

When the log messages on the first node indicate that it is waiting for the database lock, shut down the second instance of the node. The original instance automatically obtains a lock and resumes normal operation.

## [Failover node example](https://docs.chain.link/chainlink-nodes/resources/performing-system-maintenance\#failover-node-example)

You might want to run multiple instances of the Chainlink node on the same machine. If one instance goes down, the second instance can automatically pick up requests. Building off the concepts in the previous example, use Docker to have primary and a secondary containers referencing the same database URL.

Use the default `DATABASE_LOCKING_MODE=advisorylock` setting unless you want to test the `lease` or `dual` settings. See [the docs](https://docs.chain.link/chainlink-nodes/v1/configuration) for more information about this configuration variable.

Run the Chainlink node with a name option specified:

SepoliaMainnet

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
cd ~/.chainlink-sepolia && docker run --name chainlink -p 6688:6688 -v
~/.chainlink-sepolia:/chainlink -it --env-file=.env smartcontract/chainlink local n

```

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
cd ~/.chainlink && docker run --name chainlink -p 6688:6688 -v ~/.chainlink:/chainlink -it
--env-file=.env smartcontract/chainlink local n

```

You will now notice that you no longer receive a randomly generated name from Docker:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
docker ps

```

Output (truncated):

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```plaintext
... NAMES
... chainlink

```

This will remain your primary Chainlink container, and should always use port 6688 (unless configured otherwise). For the secondary instance, you will run the container in the same way, but with a different name and a different local port:

SepoliaMainnet

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
cd ~/.chainlink-sepolia && docker run --name secondary -p 6687:6688 -v
~/.chainlink-sepolia:/chainlink -it --env-file=.env smartcontract/chainlink local n

```

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
cd ~/.chainlink && docker run --name secondary -p 6687:6688 -v ~/.chainlink:/chainlink -it
--env-file=.env smartcontract/chainlink local n

```

Notice the `--name secondary` was used for this container and the local port is 6687. Be sure to add this port to your SSH tunnel as well so that you can access the secondary node's GUI if it has become active (it will not function until the primary container goes down).

Running `docker ps` now reveals two named containers running (output truncated):

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```plaintext
... NAMES
... secondary
... chainlink

```

If your primary container goes down, the secondary one automatically takes over. To start the primary container again, simply run:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
docker start -i chainlink

```

This starts the container, but the secondary node still has a lock on the database. To give the primary container access, you can restart the secondary container:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
docker restart secondary -t 0

```

The primary container takes control of the database and resumes operation. You can attach to the secondary container using `docker attach`:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
docker attach secondary

```

However, it does not produce any output while waiting for a lock on the database.

Congratulations! You now have a redundant setup of Chainlink nodes in case the primary container goes down. Get comfortable with the process by passing control of the database back and forth between the `chainlink` and `secondary` containers.

## What's next

- [\> Connecting to a Remote Database](https://docs.chain.link/chainlink-nodes/resources/connecting-to-a-remote-database)

## Get the latest Chainlink content straight to your inbox.

Email Address

## Run Ethereum Clients
[iframe](https://www.googletagmanager.com/ns.html?id=GTM-N6DQ47T)

Chainlink CCIP is now officially live on Solana. [View lanes and tokens.](https://docs.chain.link/ccip/directory/mainnet/chain/solana-mainnet?utm_medium=referral&utm_source=chainlink-docs&utm_campaign=solana-ccip)

On this page

# [Run an Ethereum Client](https://docs.chain.link/chainlink-nodes/resources/run-an-ethereum-client\#overview)

Chainlink nodes must be able to connect to an Ethereum client with an active websocket connection. This is accomplished by running both an execution client and a consensus client. You can run these clients yourself, but running Ethereum clients requires significant storage and network resources. Optionally, you can use [External Services](https://docs.chain.link/chainlink-nodes/resources/run-an-ethereum-client#external-services) that manage these clients for you.

## [Geth](https://docs.chain.link/chainlink-nodes/resources/run-an-ethereum-client\#geth)

You can use the [Geth client](https://geth.ethereum.org/docs/) for the Sepolia testnet and the Ethereum Mainnet. See the [Geth Documentation](https://geth.ethereum.org/docs/interface/peer-to-peer/) for a list of supported networks.

Download the latest version:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
docker pull ethereum/client-go:latest

```

Create a local directory to persist the data:

SepoliaMainnet

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
mkdir ~/.geth-sepolia

```

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
mkdir ~/.geth

```

Run the container:

SepoliaMainnet

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
docker run --name eth -p 8546:8546 -v ~/.geth-sepolia:/geth -it \
ethereum/client-go --sepolia --ws --ipcdisable \
--ws.addr 0.0.0.0 --ws.origins="*" --datadir /geth

```

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
docker run --name eth -p 8546:8546 -v ~/.geth:/geth -it \
ethereum/client-go --ws --ipcdisable \
--ws.addr 0.0.0.0 --ws.origins="*" --datadir /geth

```

Once the Ethereum client is running, you can use `Ctrl + P, Ctrl + Q` to detach from the container without stopping it. You will need to leave the container running for the Chainlink node to connect to it.

If the container was stopped and you need to run it again, you can simply use the following command:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
docker start -i eth

```

Follow Geth's instructions for [Connecting to Consensus Clients](https://geth.ethereum.org/docs/getting-started/consensus-clients). This will require some additional configuration settings for the Docker command that runs Geth.

Return to [Running a Chainlink Node](https://docs.chain.link/chainlink-nodes/v1/running-a-chainlink-node).

## [Nethermind](https://docs.chain.link/chainlink-nodes/resources/run-an-ethereum-client\#nethermind)

You can use the [Nethermind client](https://docs.nethermind.io/) for the Ethereum Mainnet. See the [Nethermind supported network configurations](https://docs.nethermind.io/get-started/installing-nethermind#supported-networks) page for a list of supported networks.

Download the latest version:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
docker pull nethermind/nethermind:latest

```

Create a local directory to persist the data:

SepoliaMainnet

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
mkdir ~/.nethermind-sepolia

```

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
mkdir ~/.nethermind

```

Run the container:

SepoliaMainnet

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
docker run --name eth -p 8545:8545 \
-v ~/.nethermind-sepolia/:/nethermind/data \
-it nethermind/nethermind:latest --config sepolia \
--Init.WebSocketsEnabled true --JsonRpc.Enabled true \
--JsonRpc.Host 0.0.0.0 --NoCategory.CorsOrigins * \
--datadir data

```

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
docker run --name eth -p 8545:8545 \
-v ~/.nethermind/:/nethermind/data \
-it nethermind/nethermind:latest --Sync.FastSync true \
--Init.WebSocketsEnabled true --JsonRpc.Enabled true \
--JsonRpc.Host 0.0.0.0 --NoCategory.CorsOrigins * \
--datadir data

```

After the Ethereum client is running, you can use `Ctrl + P, Ctrl + Q` to detach from the container without stopping it. You will need to leave the container running for the Chainlink node to connect to it.

If the container was stopped and you need to run it again, use the following command to start it:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
docker start -i eth

```

Follow Nethermind's instructions for [Installing and configuring the Consensus Client](https://docs.nethermind.io/nethermind/guides-and-helpers/validator-setup/eth2-validator#setup). This will require some additional configuration settings for the Docker command that runs Nethermind.

Return to [Running a Chainlink Node](https://docs.chain.link/chainlink-nodes/v1/running-a-chainlink-node).

## [External Services](https://docs.chain.link/chainlink-nodes/resources/run-an-ethereum-client\#external-services)

The following services offer Ethereum clients with websockets connectivity known to work with the Chainlink node.

## [Alchemy](https://www.alchemyapi.io/)

Example connection setting:

SepoliaMainnet

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```text
ETH_URL=wss://eth-sepolia.alchemyapi.io/v2/YOUR_PROJECT_ID

```

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```text
ETH_URL=wss://eth-mainnet.alchemyapi.io/v2/YOUR_PROJECT_ID

```

## [Chainstack](https://support.chainstack.com/hc/en-us/articles/900001664463-Setting-up-a-Chainlink-node-with-an-Ethereum-node-provided-by-Chainstack)

Example connection setting:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```text
ETH_URL=wss://user-name:pass-word-pass-word-pass-word@ws-nd-123-456-789.p2pify.com

```

## [Fiews](https://docs.fiews.io/docs/getting-started)

Example connection setting:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```text
ETH_URL=wss://cl-main.fiews.io/v2/YOUR_API_KEY

```

## [GetBlock](https://getblock.io/)

Example connection setting:

SepoliaMainnet

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```text
ETH_URL=wss://eth.getblock.io/sepolia/?api_key=YOUR_API_KEY

```

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```text
ETH_URL=wss://eth.getblock.io/mainnet/?api_key=YOUR_API_KEY

```

## [Infura](https://infura.io/docs/ethereum/wss/introduction.md)

Example connection setting. Replace YOUR\_PROJECT\_ID with the ID Infura provides you on your project settings page.

SepoliaMainnet

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```text
ETH_URL=wss://sepolia.infura.io/ws/v3/YOUR_PROJECT_ID

```

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```text
ETH_URL=wss://mainnet.infura.io/ws/v3/YOUR_PROJECT_ID

```

## [LinkPool](https://docs.linkpool.io/docs/general_public_rpc_nodes)

Example connection setting:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```text
ETH_URL=wss://main-rpc.linkpool.io/ws

```

## [QuikNode](https://www.quiknode.io/)

Example connection setting:

SepoliaMainnet

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```text
ETH_URL=wss://your-node-name.sepolia.quiknode.pro/security-hash/

```

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```text
ETH_URL=wss://your-node-name.quiknode.pro/security-hash/

```

## [Configuring your ETH node](https://docs.chain.link/chainlink-nodes/resources/run-an-ethereum-client\#configuring-your-eth-node)

At a minimum, disable the default RPC gas and txfee caps on your ETH node. This can be done in the TOML file as seen below, or by running go-ethereum with the command line arguments: `--rpc.gascap=0 --rpc.txfeecap=0`.

To learn more about configuring ETH nodes, see the [configuration page](https://docs.chain.link/chainlink-nodes/v1/configuration).

## [Additional Tools](https://docs.chain.link/chainlink-nodes/resources/run-an-ethereum-client\#additional-tools)

- [Chainlink ETH Failover Proxy](https://github.com/Fiews/ChainlinkEthFailover)

## What's next

- [\> Running a Chainlink Node](https://docs.chain.link/chainlink-nodes/v1/running-a-chainlink-node)
- [\> Optimizing Performance](https://docs.chain.link/chainlink-nodes/resources/evm-performance-configuration)

## Get the latest Chainlink content straight to your inbox.

Email Address

## Building External Initiators
[iframe](https://www.googletagmanager.com/ns.html?id=GTM-N6DQ47T)

Chainlink CCIP is now officially live on Solana. [View lanes and tokens.](https://docs.chain.link/ccip/directory/mainnet/chain/solana-mainnet?utm_medium=referral&utm_source=chainlink-docs&utm_campaign=solana-ccip)

On this page

# [Building External Initiators](https://docs.chain.link/chainlink-nodes/external-initiators/building-external-initiators\#overview)

An external initiator can trigger a run for any webhook job that it has been linked to.

The URL for triggering a run is such:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
curl -X POST -H "Content-Type: application/json" --data '{"myKey": "myVal"}' http://localhost:6688/v2/jobs/<job external UUID>/runs

```

You will need to specify two headers:

1. "X-Chainlink-EA-AccessKey"
2. "X-Chainlink-EA-Secret"

## [JSON jobs (REMOVED)](https://docs.chain.link/chainlink-nodes/external-initiators/building-external-initiators\#json-jobs-removed)

We will be using the [Chainlink external initiator](https://github.com/smartcontractkit/external-initiator) repo for reference. You can see some examples of existing initiators in the [blockchain](https://github.com/smartcontractkit/external-initiator/tree/master/blockchain) folder.

External initiators are simple web initiators that can be activated by any job instead of just one. To set one up, you need to have a service similar to an external adapter that sends an `HTTPPost` message runs API call to your chainlink node service. Here is a sample URL for a web job could look like:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
curl -b cookiefile -X POST -H "Content-Type: application/json" --data '{"myKey":"myVal"}' http://localhost:6688/v2/jobs/%s/runs

```

Where `%s` is the jobId.

External initiators make the same API call, with 2 added headers:

1. "X-Chainlink-EA-AccessKey"
2. "X-Chainlink-EA-Secret"

These are keys generated when you register your external initiator with your node.

Triggering a run through an external initiator is as simple as making this API call to your node. All jobs with this EI configured will then be kicked off in this way. A simple external initiator in pseudo code could look like this:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```text
while(True):
    send_api_call_with_external_initiator_access_key_headers()
    sleep(4)

```

And have this job run on the same machine as your node.

## What's next

- [\> Adding External Initiators to Nodes](https://docs.chain.link/chainlink-nodes/external-initiators/external-initiators-in-nodes)

## Get the latest Chainlink content straight to your inbox.

Email Address

[iframe](https://td.doubleclick.net/td/rul/346357746?random=1748840213136&cv=11&fst=1748840213136&fmt=3&bg=ffffff&guid=ON&async=1&gcl_ctr=1&gtm=45be55s2v891173849z8847174275za200zb847174275&gcd=13l3l3l3l1l1&dma=0&tag_exp=101509157~103116026~103200004~103233427~103252644~103252646~103351866~103351868~104481633~104481635~104559073~104559075~104612245~104612247&ptag_exp=101509157~103116026~103200004~103233427~103252644~103252646~103351866~103351868~104481633~104481635~104559073~104559075~104612245~104612247&u_w=1280&u_h=1024&url=https%3A%2F%2Fdocs.chain.link%2Fchainlink-nodes%2Fexternal-initiators%2Fbuilding-external-initiators&_ng=1&label=_duuCKn_k4cYEPL_k6UB&hn=www.googleadservices.com&frm=0&tiba=Building%20External%20Initiators%20%7C%20Chainlink%20Documentation&value=0&bttype=purchase&npa=0&pscdl=noapi&auid=299666616.1748840213&uaa=x86&uab=64&uafvl=Google%2520Chrome%3B137.0.7151.55%7CChromium%3B137.0.7151.55%7CNot%252FA)Brand%3B24.0.0.0&uamb=0&uam=&uap=Linux%20x86_64&uapv=6.6.72&uaw=0&ec_mode=a&fledge=1&capi=1&_tu=Cg&em=tv.1&ct_cookie_present=0)

## MultiWord Job Spec
[iframe](https://www.googletagmanager.com/ns.html?id=GTM-N6DQ47T)

Chainlink CCIP is now officially live on Solana. [View lanes and tokens.](https://docs.chain.link/ccip/directory/mainnet/chain/solana-mainnet?utm_medium=referral&utm_source=chainlink-docs&utm_campaign=solana-ccip)

On this page

# [MultiWord Example Job Spec](https://docs.chain.link/chainlink-nodes/job-specs/multi-word-job\#overview)

This is an example v2 (TOML) job spec for returning multiple responses in 1 Chainlink API Call.Note that the job calls the `fulfillOracleRequest2` function. If you are a node operator, use an [Operator contract](https://github.com/smartcontractkit/chainlink/blob/contracts-v1.3.0/contracts/src/v0.8/operatorforwarder/Operator.sol) with this job.
To test it from a smart contract, see this [Example](https://docs.chain.link/any-api/get-request/examples/multi-variable-responses).

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
type = "directrequest"
schemaVersion = 1
name = "multi-word (TOML)"
maxTaskDuration = "0s"
contractAddress = "YOUR_ORACLE_CONTRACT_ADDRESS"
minIncomingConfirmations = 0
observationSource = """
       decode_log   [type="ethabidecodelog"\
                  abi="OracleRequest(bytes32 indexed specId, address requester, bytes32 requestId, uint256 payment, address callbackAddr, bytes4 callbackFunctionId, uint256 cancelExpiration, uint256 dataVersion, bytes data)"\
                  data="$(jobRun.logData)"\
                  topics="$(jobRun.logTopics)"]
    decode_cbor  [type="cborparse" data="$(decode_log.data)"]
    decode_log -> decode_cbor
    decode_cbor -> btc
    decode_cbor -> usd
    decode_cbor -> eur
    btc          [type="http" method=GET url="$(decode_cbor.urlBTC)" allowunrestrictednetworkaccess="true"]
    btc_parse    [type="jsonparse" path="$(decode_cbor.pathBTC)" data="$(btc)"]
    btc_multiply [type="multiply" input="$(btc_parse)", times="100000"]
    btc -> btc_parse -> btc_multiply
    usd          [type="http" method=GET url="$(decode_cbor.urlUSD)" allowunrestrictednetworkaccess="true"]
    usd_parse    [type="jsonparse" path="$(decode_cbor.pathUSD)" data="$(usd)"]
    usd_multiply [type="multiply" input="$(usd_parse)", times="100000"]
    usd -> usd_parse -> usd_multiply
    eur          [type="http" method=GET url="$(decode_cbor.urlEUR)" allowunrestrictednetworkaccess="true"]
    eur_parse    [type="jsonparse" path="$(decode_cbor.pathEUR)" data="$(eur)"]
    eurs_multiply [type="multiply" input="$(eur_parse)", times="100000"]
    eur -> eur_parse -> eurs_multiply
    btc_multiply -> encode_mwr
    usd_multiply -> encode_mwr
    eurs_multiply -> encode_mwr
    // MWR API does NOT auto populate the requestID.
    encode_mwr [type="ethabiencode"\
                abi="(bytes32 requestId, uint256 _btc, uint256 _usd, uint256 _eurs)"\
                data="{\\"requestId\\": $(decode_log.requestId), \\"_btc\\": $(btc_multiply), \\"_usd\\": $(usd_multiply), \\"_eurs\\": $(eurs_multiply)}"\
                ]
    encode_tx  [type="ethabiencode"\
                abi="fulfillOracleRequest2(bytes32 requestId, uint256 payment, address callbackAddress, bytes4 callbackFunctionId, uint256 expiration, bytes calldata data)"\
                data="{\\"requestId\\": $(decode_log.requestId), \\"payment\\":   $(decode_log.payment), \\"callbackAddress\\": $(decode_log.callbackAddr), \\"callbackFunctionId\\": $(decode_log.callbackFunctionId), \\"expiration\\": $(decode_log.cancelExpiration), \\"data\\": $(encode_mwr)}"\
                ]
    submit_tx  [type="ethtx" to="YOUR_ORACLE_CONTRACT_ADDRESS" data="$(encode_tx)"]
    encode_mwr -> encode_tx -> submit_tx
"""

```

## Get the latest Chainlink content straight to your inbox.

Email Address

## Running a Chainlink Node
[iframe](https://www.googletagmanager.com/ns.html?id=GTM-N6DQ47T)

Chainlink CCIP is now officially live on Solana. [View lanes and tokens.](https://docs.chain.link/ccip/directory/mainnet/chain/solana-mainnet?utm_medium=referral&utm_source=chainlink-docs&utm_campaign=solana-ccip)

On this page

# [Running a Chainlink Node](https://docs.chain.link/chainlink-nodes/v1/running-a-chainlink-node\#overview)

This guide will teach you how to run a Chainlink node locally using [Docker](https://docs.chain.link/chainlink-nodes/v1/running-a-chainlink-node#using-docker). The Chainlink node will be configured to connect to the Ethereum Sepolia.

## [Requirements](https://docs.chain.link/chainlink-nodes/v1/running-a-chainlink-node\#requirements)

- As explained in the [requirements page](https://docs.chain.link/chainlink-nodes/resources/requirements), make sure there are enough resources to run a Chainlink node and a PostgreSQL database.
- Install [Docker Desktop](https://docs.docker.com/get-docker/). You will run the Chainlink node and PostgreSQL in Docker containers.
- Chainlink nodes must be able to connect to an Ethereum client with an active websocket connection. See [Running an Ethereum Client](https://docs.chain.link/chainlink-nodes/resources/run-an-ethereum-client) for details. In this tutorial, you can [use an external service](https://docs.chain.link/chainlink-nodes/resources/run-an-ethereum-client/#external-services) as your client.

## [Using Docker](https://docs.chain.link/chainlink-nodes/v1/running-a-chainlink-node\#using-docker)

### [Run PostgreSQL](https://docs.chain.link/chainlink-nodes/v1/running-a-chainlink-node\#run-postgresql)

1. Run PostgreSQL in a Docker container. You can replace `mysecretpassword` with your own password.



![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)



```shell
docker run --name cl-postgres -e POSTGRES_PASSWORD=mysecretpassword -p 5432:5432 -d postgres

```

2. Confirm that the container is running. Note the `5432` port is [published](https://docs.docker.com/config/containers/container-networking/#published-ports) `0.0.0.0:5432->5432/tcp` and therefore accessible outside of Docker.



![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)



```shell
docker ps -a -f name=cl-postgres

```



If the container is running successfully, the output shows a healthy status:



![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)



```shell
CONTAINER ID   IMAGE      COMMAND                  CREATED         STATUS         PORTS                    NAMES
dc08cfad2a16   postgres   "docker-entrypoint.s…"   3 minutes ago   Up 3 minutes   0.0.0.0:5432->5432/tcp   cl-postgres

```


### [Run Chainlink node](https://docs.chain.link/chainlink-nodes/v1/running-a-chainlink-node\#run-chainlink-node)

#### [Configure your node](https://docs.chain.link/chainlink-nodes/v1/running-a-chainlink-node\#configure-your-node)

1. Create a local directory to hold the Chainlink data:




Sepolia







![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)



```shell
mkdir ~/.chainlink-sepolia

```

2. Run the following as a command to create a `config.toml` file and populate with variables specific to the network you're running on. For a full list of available configuration variables, see the [Node Config](https://docs.chain.link/chainlink-nodes/v1/node-config) page.
Be sure to update the value for `CHANGEME` to the value given by your [external Ethereum provider](https://docs.chain.link/chainlink-nodes/resources/run-an-ethereum-client/#external-services).




Sepolia







![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)



```shell
echo "[Log]
Level = 'warn'

[WebServer]
AllowOrigins = '\*'
SecureCookies = false

[WebServer.TLS]
HTTPSPort = 0

[[EVM]]
ChainID = '11155111'

[[EVM.Nodes]]
Name = 'Sepolia'
WSURL = 'wss://CHANGE_ME'
HTTPURL = 'https://CHANGE_ME'
" > ~/.chainlink-sepolia/config.toml

```

3. Create a `secrets.toml` file with a keystore password and the URL to your database. Update the value for `mysecretpassword` to the chosen password in [Run PostgreSQL](https://docs.chain.link/chainlink-nodes/v1/running-a-chainlink-node#run-postgresql). Specify a complex keystore password. This will be your wallet password that you can use to unlock the keystore file generated for you.




Sepolia







![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)



```shell
echo "[Password]
Keystore = 'mysecretkeystorepassword'
[Database]
URL = 'postgresql://postgres:mysecretpassword@host.docker.internal:5432/postgres?sslmode=disable'
" > ~/.chainlink-sepolia/secrets.toml

```

4. Optionally, you can create an `.api` file with the credentials for the node's API and Operator Interface. The node stores the credentials from the `.api` file in the database only the first time you run the container using the database. The `.api` file cannot override credentials for an existing user in the database.

Create the file in the same directory as your TOML config files and list your API credentials. Change the values for API email and password. The user must be an email address with an `@` character and the password must be 16-50 characters in length.




Sepolia







![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)



```shell
echo "CHANGE_THIS_EXAMPLE_EMAIL
CHANGE_THIS_EXAMPLE_PASSWORD
" > ~/.chainlink-sepolia/.api

```

5. Start the Chainlink Node by running the Docker image.

Change the version number in `smartcontract/chainlink:2.20.0` with the version of the Docker image that you need to run. For most new nodes, use version `2.0.0` or later. Tag versions are available in the [Chainlink Docker hub](https://hub.docker.com/r/smartcontract/chainlink/tags). _The `latest` version does not work._

Chainlink Nodes running `2.0.0` and later require the `-config` and `-secrets` flags after the `node` part of the command.

If you created an `.api` file with your API and Operator UI login credentials, add `-a /chainlink/.api` to the end of the `docker run` command. Otherwise, the node will ask you for these credentials when you start it for the first time. These credentials are stored in the database only when you run a container for the first time against that database. If you need to remove the `.api` file, delete the container, and start it again without `-a /chainlink/.api`.




Sepolia







![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)



```shell
cd ~/.chainlink-sepolia && docker run --platform linux/x86_64/v8 --name chainlink -v ~/.chainlink-sepolia:/chainlink -it -p 6688:6688 --add-host=host.docker.internal:host-gateway smartcontract/chainlink:2.20.0 node -config /chainlink/config.toml -secrets /chainlink/secrets.toml start

```

6. Detach from the container by pressing the Ctrl+P command and then the Ctrl-Q command.

7. Confirm that the container is running. Note that the `6688` port is [published](https://docs.docker.com/config/containers/container-networking/#published-ports) `0.0.0.0:6688->6688/tcp` and is accessible outside of Docker.



![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)



```shell
docker ps -a -f name=chainlink

```



If the container is running, the output shows a healthy status:



![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)



```shell
CONTAINER ID   IMAGE                           COMMAND                  CREATED         STATUS                   PORTS                                       NAMES
867e792d6f78   smartcontract/chainlink:2.20.0   "chainlink node -con…"   2 minutes ago   Up 2 minutes (healthy)   0.0.0.0:6688->6688/tcp, :::6688->6688/tcp   chainlink

```

8. You can now connect to your Chainlink node's UI interface by navigating to [http://localhost:6688](http://localhost:6688/). Use the API
credentials you set up earlier to log in.

If you are using a VPS, you can create an [SSH tunnel](https://www.howtogeek.com/168145/how-to-use-ssh-tunneling/) to your node for `6688:localhost:6688` to enable connectivity to the GUI. Typically this is done with `ssh -i $KEY $USER@$REMOTE-IP -L 6688:localhost:6688 -N`. An SSH tunnel is recommended over opening public-facing ports specific to the Chainlink node. See the [Security and Operation Best Practices](https://docs.chain.link/chainlink-nodes/resources/best-security-practices) page for more details about securing your node.


## [Configure users and roles](https://docs.chain.link/chainlink-nodes/v1/running-a-chainlink-node\#configure-users-and-roles)

You can create several users with different [role-based access tiers](https://docs.chain.link/chainlink-nodes/v1/roles-and-access). This allows you to grant access to several users without granting admin privileges to every user. Role-based access can be configured only by using the CLI.

1. Open an interactive bash shell on the container that is running your node:



![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)



```shell
docker exec -it chainlink /bin/bash

```

2. Log into the Chainlink CLI. The CLI prompts you for the admin credentials that you configured for your node.



![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)



```shell
chainlink admin login

```

3. Add a user with view-only permissions on the node. The CLI prompts you for the new user's credentials.



![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)



```shell
chainlink admin users create --email=operator-ui-view-only@test.com --role=view

```



This user can now log into the UI and query the API, but cannot change any settings or jobs.

4. Confirm the current list of users:



![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)



```shell
chainlink admin users list

```

5. Log out of the CLI. This prevents users with access to the shell from executing admin commands.



![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)



```shell
chainlink admin logout

```

6. Exit from the container.



![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)



```shell
exit

```


To learn how to modify user roles and see the full list of available roles, read the [Role-Based Access Control](https://docs.chain.link/chainlink-nodes/v1/roles-and-access) page.

## What's next

- [\> Fulfilling Requests](https://docs.chain.link/chainlink-nodes/v1/fulfilling-requests)
- [\> Role-Based Access Control](https://docs.chain.link/chainlink-nodes/v1/roles-and-access)
- [\> Requirements](https://docs.chain.link/chainlink-nodes/resources/requirements)
- [\> Optimizing EVM Performance](https://docs.chain.link/chainlink-nodes/resources/evm-performance-configuration)
- [\> Performing System Maintenance](https://docs.chain.link/chainlink-nodes/resources/performing-system-maintenance)
- [\> Miscellaneous](https://docs.chain.link/chainlink-nodes/resources/miscellaneous)
- [\> Security and Operation Best Practices](https://docs.chain.link/chainlink-nodes/resources/best-security-practices)

## Get the latest Chainlink content straight to your inbox.

Email Address

## External Initiators Overview
[iframe](https://www.googletagmanager.com/ns.html?id=GTM-N6DQ47T)

Chainlink CCIP is now officially live on Solana. [View lanes and tokens.](https://docs.chain.link/ccip/directory/mainnet/chain/solana-mainnet?utm_medium=referral&utm_source=chainlink-docs&utm_campaign=solana-ccip)

On this page

# [Introduction](https://docs.chain.link/chainlink-nodes/external-initiators/external-initiators-introduction\#overview)

External initiators allow jobs in a node to be initiated depending on some external condition. The ability to create and add external initiators to Chainlink nodes enables blockchain agnostic cross-chain compatibility.

Initiator Bridges handle the authentication to and from the External Initiator and where to send the messages. When creating a Bridge two parameters are required:

Only the [webhook](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-jobs/#webhook-jobs) job type can be initiated using an External Initiator.

The external initiator must be created before the webhook job, and must be referenced by name (whitelisted) in order for that external initiator to be allowed to trigger the given webhook job.

When the External Initiator is created it generates two pairs of credentials: Outgoing and Incoming. The Outgoing Access Key and Secret are used to authenticate messages sent from the Core to the External Initiator. The Incoming Access Key and Secret are used to authenticate messages sent from the External Initiator to the Core.

Then, once you've created the name, bridge, and have the correct access keys for the URL, you can proceed to use the external initiator as if it's a regular initiator in future job specs.

For how to create an external initiator see [adding external initiators to nodes](https://docs.chain.link/chainlink-nodes/external-initiators/external-initiators-in-nodes).

## What's next

- [\> Building External Initiators](https://docs.chain.link/chainlink-nodes/external-initiators/building-external-initiators)
- [\> Adding External Initiators to Nodes](https://docs.chain.link/chainlink-nodes/external-initiators/external-initiators-in-nodes)

## Get the latest Chainlink content straight to your inbox.

Email Address

## Chainlink Job Migration
[iframe](https://www.googletagmanager.com/ns.html?id=GTM-N6DQ47T)

Chainlink CCIP is now officially live on Solana. [View lanes and tokens.](https://docs.chain.link/ccip/directory/mainnet/chain/solana-mainnet?utm_medium=referral&utm_source=chainlink-docs&utm_campaign=solana-ccip)

On this page

# [Migrating to v2 Jobs](https://docs.chain.link/chainlink-nodes/oracle-jobs/migration-v1-v2\#overview)

Chainlink nodes with version 1.0.0 and later support v2 jobs in TOML format. Support for v1 jobs in JSON format is removed.

## [Comparison between v1 and v2 jobs](https://docs.chain.link/chainlink-nodes/oracle-jobs/migration-v1-v2\#comparison-between-v1-and-v2-jobs)

v1 jobs were intended for extremely targeted use cases, so they opted for simplicity in the job spec over explicitness.

The v2 Job Specs support expanding functionality in Chainlink nodes and prefer explicitness, so they are much more powerful and support advanced capabilities like running tasks in parallel. This change provides the following benefits to node operators:

- Support increased job complexity
- Better performance
- Easier scaling
- Ability to run more offchain computing
- Reliability
- Easier support
- Improved security

### [DAG dependencies and variables](https://docs.chain.link/chainlink-nodes/oracle-jobs/migration-v1-v2\#dag-dependencies-and-variables)

v2 jobs require the author to specify dependencies using [DOT syntax](https://en.wikipedia.org/wiki/DOT_(graph_description_language)). If a task needs data produced by another task, this must be specified using DOT.

To facilitate explicitness, v2 jobs require the author to specify inputs to tasks using `$(variable)` syntax. For example, if an `http` task feeds data into a `jsonparse` task, it must be specified like the following example:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
fetch [type="http" method=GET url="http://chain.link/price_feeds/ethusd"]

// This task consumes the output of the 'fetch' task in its 'data' parameter
parse [type="jsonparse" path="data,result" data="$(fetch)"]

// This is the specification of the dependency
fetch -> parse

```

Task names must be defined before their opening `[` bracket. In this example, the name of the task is `fetch`. The output of each task is stored in the variable corresponding to the name of the task. In some cases, tasks return complex values like maps or arrays. By using dot access syntax, you can access the elements of these values. For example:\
\
![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)\
\
```toml\
// Assume that this task returns the following object:\
//  { "ethusd": 123.45, "btcusd": 678.90 }\
parse [type="jsonparse" path="data" data="$(fetch)"]\
\
// Now, we want to send the ETH/USD price to one bridge and the BTC/USD price to another:\
submit_ethusd [type="bridge" name="ethusd" requestData="{ \\"data\\": { \\"value\\": $(parse.ethusd) }}"]\
submit_btcusd [type="bridge" name="btcusd" requestData="{ \\"data\\": { \\"value\\": $(parse.btcusd) }}"]\
\
parse -> submit_ethusd\
parse -> submit_btcusd\
\
```\
\
### [Quotes](https://docs.chain.link/chainlink-nodes/oracle-jobs/migration-v1-v2\#quotes)\
\
Some tasks, like the `bridge` tasks above, require you to specify a JSON object. Because the keys of JSON objects must be enclosed in double quotes, you must use the alternative `<` angle bracket `>` quotes. Angle brackets also enable multi-line strings, which can be useful when a JSON object parameter is large:\
\
![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)\
\
```toml\
submit_btcusd [type="bridge"\
               name="btcusd"\
               requestData="{\\"data\\":{\\"value\\": $(foo), \\"price\\": $(bar), \\"timestamp\\": $(baz)}}"\
               ]\
\
```\
\
### [Misc. notes](https://docs.chain.link/chainlink-nodes/oracle-jobs/migration-v1-v2\#misc-notes)\
\
- Each job type provides a particular set of variables to its pipeline. See the documentation for each job type to understand which variables are provided.\
- Each task type provides a certain kind of output variable to other tasks that consume it. See the documentation for each task type to understand their output types.\
\
* * *\
\
## [Example Migrations](https://docs.chain.link/chainlink-nodes/oracle-jobs/migration-v1-v2\#example-migrations)\
\
### [Runlog with ETH ABI encoding](https://docs.chain.link/chainlink-nodes/oracle-jobs/migration-v1-v2\#runlog-with-eth-abi-encoding)\
\
**v1 spec**\
\
This spec relies on CBOR-encoded onchain values for the `httpget` URL and `jsonparse` path.\
\
![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)\
\
```json\
{\
  "name": "Get > Bytes32",\
  "initiators": [\
    {\
      "type": "runlog",\
      "params": {\
        "address": "YOUR_ORACLE_CONTRACT_ADDRESS"\
      }\
    }\
  ],\
  "tasks": [\
    {\
      "type": "httpget"\
    },\
    {\
      "type": "jsonparse"\
    },\
    {\
      "type": "ethbytes32"\
    },\
    {\
      "type": "ethtx"\
    }\
  ]\
}\
\
```\
\
Notes:\
\
- In v1, the job ID is randomly generated at creation time. In v2 jobs, the job ID can be manually specified or the Chainlink node will automatically generate it.\
- In v2, the `ethbytes32` task and all of the other ABI encoding tasks are now encapsulated in the `ethabiencode` task with much more flexibility. See the [ETH ABI Encode task](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-tasks/#eth-abi-encode-task) page to learn more.\
\
**Equivalent v2 spec:**\
\
![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)\
\
```toml\
type                = "directrequest"\
schemaVersion       = 1\
name                = "Get > Bytes32"\
contractAddress     = "0x613a38AC1659769640aaE063C651F48E0250454C"\
# Optional externalJobID: Automatically generated if unspecified\
# externalJobID       = "0EEC7E1D-D0D2-476C-A1A8-72DFB6633F47"\
observationSource   = """\
    decode_log   [type="ethabidecodelog"\
                  abi="OracleRequest(bytes32 indexed specId, address requester, bytes32 requestId, uint256 payment, address callbackAddr, bytes4 callbackFunctionId, uint256 cancelExpiration, uint256 dataVersion, bytes data)"\
                  data="$(jobRun.logData)"\
                  topics="$(jobRun.logTopics)"]\
\
    decode_cbor  [type="cborparse" data="$(decode_log.data)"]\
    fetch        [type="http" method=GET url="$(decode_cbor.url)"]\
    parse        [type="jsonparse" path="$(decode_cbor.path)" data="$(fetch)"]\
    encode_data  [type="ethabiencode" abi="(uint256 value)" data="{ \\"value\\": $(parse) }"]\
    encode_tx    [type="ethabiencode"\
                  abi="fulfillOracleRequest(bytes32 requestId, uint256 payment, address callbackAddress, bytes4 callbackFunctionId, uint256 expiration, bytes32 data)"\
                  data="{\\"requestId\\": $(decode_log.requestId), \\"payment\\": $(decode_log.payment), \\"callbackAddress\\": $(decode_log.callbackAddr), \\"callbackFunctionId\\": $(decode_log.callbackFunctionId), \\"expiration\\": $(decode_log.cancelExpiration), \\"data\\": $(encode_data)}"\
                  ]\
    submit_tx    [type="ethtx" to="0x613a38AC1659769640aaE063C651F48E0250454C" data="$(encode_tx)"]\
\
    decode_log -> decode_cbor -> fetch -> parse -> encode_data -> encode_tx -> submit_tx\
"""\
\
```\
\
### [Simple fetch (runlog)](https://docs.chain.link/chainlink-nodes/oracle-jobs/migration-v1-v2\#simple-fetch-runlog)\
\
**v1 spec:**\
\
![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)\
\
```json\
{\
  "initiators": [\
    {\
      "type": "RunLog",\
      "params": {\
        "address": "0x51DE85B0cD5B3684865ECfEedfBAF12777cd0Ff8"\
      }\
    }\
  ],\
  "tasks": [\
    {\
      "type": "HTTPGet",\
      "params": {\
        "get": "https://bitstamp.net/api/ticker/"\
      }\
    },\
    {\
      "type": "JSONParse",\
      "params": {\
        "path": ["last"]\
      }\
    },\
    {\
      "type": "Multiply",\
      "params": {\
        "times": 100\
      }\
    },\
    {\
      "type": "EthUint256"\
    },\
    {\
      "type": "EthTx"\
    }\
  ],\
  "startAt": "2020-02-09T15:13:03Z",\
  "endAt": null,\
  "minPayment": "1000000000000000000"\
}\
\
```\
\
**Equivalent v2 spec:**\
\
![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)\
\
```toml\
type                = "directrequest"\
schemaVersion       = 1\
name                = "Get > Bytes32"\
contractAddress     = "0x613a38AC1659769640aaE063C651F48E0250454C"\
# Optional externalJobID: Automatically generated if unspecified\
# externalJobID       = "0EEC7E1D-D0D2-476C-A1A8-72DFB6633F47"\
observationSource   = """\
    decode_log   [type="ethabidecodelog"\
                  abi="OracleRequest(bytes32 indexed specId, address requester, bytes32 requestId, uint256 payment, address callbackAddr, bytes4 callbackFunctionId, uint256 cancelExpiration, uint256 dataVersion, bytes data)"\
                  data="$(jobRun.logData)"\
                  topics="$(jobRun.logTopics)"]\
\
    fetch       [type="http" method=get url="https://bitstamp.net/api/ticker/"]\
    parse       [type="jsonparse" data="$(fetch)" path="last"]\
    multiply    [type="multiply" input="$(parse)" times=100]\
    encode_data [type="ethabiencode" abi="(uint256 value)" data="{ \\"value\\": $(multiply) }"]\
    encode_tx   [type="ethabiencode"\
                 abi="fulfillOracleRequest(bytes32 requestId, uint256 payment, address callbackAddress, bytes4 callbackFunctionId, uint256 expiration, bytes32 data)"\
                 data="{\\"requestId\\": $(decode_log.requestId), \\"payment\\": $(decode_log.payment), \\"callbackAddress\\": $(decode_log.callbackAddr), \\"callbackFunctionId\\": $(decode_log.callbackFunctionId), \\"expiration\\": $(decode_log.cancelExpiration), \\"data\\": $(encode_data)}"\
                 ]\
    submit_tx [type="ethtx" to="0x613a38AC1659769640aaE063C651F48E0250454C" data="$(encode_tx)"]\
\
    decode_log -> fetch -> parse -> multiply -> encode_data -> encode_tx -> submit_tx\
"""\
\
```\
\
### [Cron](https://docs.chain.link/chainlink-nodes/oracle-jobs/migration-v1-v2\#cron)\
\
**v1 spec:**\
\
![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)\
\
```json\
{\
  "initiators": [\
    {\
      "type": "cron",\
      "params": {\
        "schedule": "CRON_TZ=UTC * */20 * * * *"\
      }\
    }\
  ],\
  "tasks": [\
    {\
      "type": "HttpGet",\
      "params": {\
        "get": "https://example.com/api"\
      }\
    },\
    {\
      "type": "JsonParse",\
      "params": {\
        "path": ["data", "price"]\
      }\
    },\
    {\
      "type": "Multiply",\
      "params": {\
        "times": 100\
      }\
    },\
    {\
      "type": "EthUint256"\
    },\
    {\
      "type": "EthTx"\
    }\
  ]\
}\
\
```\
\
**Equivalent v2 spec:**\
\
![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)\
\
```toml\
type            = "cron"\
schemaVersion   = 1\
schedule        = "CRON_TZ=UTC * */20 * * * *"\
# Optional externalJobID: Automatically generated if unspecified\
# externalJobID   = "0EEC7E1D-D0D2-476C-A1A8-72DFB6633F46"\
observationSource   = """\
    fetch       [type="http" method=GET url="https://example.com/api"]\
    parse       [type="jsonparse" data="$(fetch)" path="data,price"]\
    multiply    [type="multiply" input="$(parse)" times=100]\
    encode_tx   [type="ethabiencode"\
                 abi="submit(uint256 value)"\
                 data="{ \\"value\\": $(multiply) }"]\
    submit_tx   [type="ethtx" to="0x859AAa51961284C94d970B47E82b8771942F1980" data="$(encode_tx)"]\
\
    fetch -> parse -> multiply -> encode_tx -> submit_tx\
"""\
\
```\
\
### [Web (-> Webhook)](https://docs.chain.link/chainlink-nodes/oracle-jobs/migration-v1-v2\#web---webhook)\
\
**v1 spec:**\
\
![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)\
\
```json\
{\
  "initiators": [\
    {\
      "type": "web"\
    }\
  ],\
  "tasks": [\
    {\
      "type": "multiply",\
      "params": {\
        "times": 100\
      }\
    },\
    {\
      "type": "custombridge"\
    }\
  ]\
}\
\
```\
\
**Equivalent v2 spec:**\
\
![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)\
\
```toml\
type            = "webhook"\
schemaVersion   = 1\
# Optional externalJobID: Automatically generated if unspecified\
# externalJobID   = "0EEC7E1D-D0D2-476C-A1A8-72DFB6633F46"\
observationSource   = """\
    multiply       [type="multiply" input="$(jobRun.requestBody)" times=100]\
    send_to_bridge [type="bridge" name="custombridge" requestData="{ \\"data\\": { \\"value\\": $(multiply) }}"]\
\
    multiply -> send_to_bridge\
"""\
\
```\
\
## Get the latest Chainlink content straight to your inbox.\
\
Email Address

## Chainlink Direct Request Job
[iframe](https://www.googletagmanager.com/ns.html?id=GTM-N6DQ47T)

Chainlink CCIP is now officially live on Solana. [View lanes and tokens.](https://docs.chain.link/ccip/directory/mainnet/chain/solana-mainnet?utm_medium=referral&utm_source=chainlink-docs&utm_campaign=solana-ccip)

On this page

# [Existing Job Example specs](https://docs.chain.link/chainlink-nodes/job-specs/direct-request-existing-job\#overview)

This is an example v2 (TOML) job spec for returning gas price using [etherscan](https://docs.etherscan.io/api-endpoints/gas-tracker#get-gas-oracle) in one Chainlink API Call. Note that the job :

- Uses an [external adapter](https://docs.chain.link/chainlink-nodes/external-adapters/external-adapters) to consume the etherscan API: [EtherScan External Adapter](https://github.com/smartcontractkit/external-adapters-js/tree/develop/packages/sources/etherscan). Note that this is done using the [bridge](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-tasks/#bridge-task) task: `type="bridge" name="etherscan"`.
- Calls the `fulfillOracleRequest2` function. If you are a node operator, use an [Operator contract](https://github.com/smartcontractkit/chainlink/blob/contracts-v1.3.0/contracts/src/v0.8/operatorforwarder/Operator.sol) with this job.

To test this job spec from a smart contract, see this [Example](https://docs.chain.link/any-api/get-request/examples/existing-job-request).

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
type = "directrequest"
schemaVersion = 1
name = "Etherscan gas price"
maxTaskDuration = "0s"
contractAddress = "YOUR_ORACLE_CONTRACT_ADDRESS"
minIncomingConfirmations = 0
observationSource = """
    decode_log   [type="ethabidecodelog"\
                  abi="OracleRequest(bytes32 indexed specId, address requester, bytes32 requestId, uint256 payment, address callbackAddr, bytes4 callbackFunctionId, uint256 cancelExpiration, uint256 dataVersion, bytes data)"\
                  data="$(jobRun.logData)"\
                  topics="$(jobRun.logTopics)"]

    etherscanFast  [type="bridge" name="etherscan" requestData="{\\"data\\": {\\"endpoint\\": \\"gasprice\\",  \\"speed\\":\\"fast\\" }}"]
    etherscanAverage  [type="bridge" name="etherscan" requestData="{\\"data\\": {\\"endpoint\\": \\"gasprice\\",  \\"speed\\":\\"medium\\" }}"]
    etherscanSafe  [type="bridge" name="etherscan" requestData="{\\"data\\": {\\"endpoint\\": \\"gasprice\\",  \\"speed\\":\\"safe\\" }}"]

    decode_log -> etherscanFast
    decode_log -> etherscanAverage
    decode_log -> etherscanSafe

    gasPriceFast    [type=jsonparse path="data,result"]
    gasPriceAverage    [type=jsonparse path="data,result"]
    gasPriceSafe    [type=jsonparse path="data,result"]

    etherscanFast -> gasPriceFast
    etherscanAverage -> gasPriceAverage
    etherscanSafe -> gasPriceSafe

    gasPriceFast -> encode_data
    gasPriceAverage -> encode_data
    gasPriceSafe -> encode_data

    encode_data [type=ethabiencode abi="(bytes32 _requestId, uint256 _fastPrice, uint256 _averagePrice, uint256 _safePrice)"\
            data="{\\"_requestId\\": $(decode_log.requestId),\\"_fastPrice\\": $(gasPriceFast),\\"_averagePrice\\": $(gasPriceAverage),\\"_safePrice\\": $(gasPriceSafe)}"]

    encode_tx [type=ethabiencode\
            abi="fulfillOracleRequest2(bytes32 requestId, uint256 payment, address callbackAddress, bytes4 callbackFunctionId, uint256 expiration, bytes calldata data)"\
            data="{\\"requestId\\": $(decode_log.requestId), \\"payment\\": $(decode_log.payment), \\"callbackAddress\\": $(decode_log.callbackAddr), \\"callbackFunctionId\\": $(decode_log.callbackFunctionId), \\"expiration\\": $(decode_log.cancelExpiration), \\"data\\": $(encode_data)}"]

    submit_tx [type=ethtx to="YOUR_ORACLE_CONTRACT_ADDRESS" data="$(encode_tx)"]
    encode_data -> encode_tx -> submit_tx
"""

```

## Get the latest Chainlink content straight to your inbox.

Email Address

[iframe](https://td.doubleclick.net/td/rul/346357746?random=1748840216120&cv=11&fst=1748840216120&fmt=3&bg=ffffff&guid=ON&async=1&gcl_ctr=1&gtm=45be55s2h1v891173849z8847174275za200zb847174275&gcd=13l3l3l3l1l1&dma=0&tag_exp=101509157~103116026~103200004~103233427~103252644~103252646~103351866~103351868~104481633~104481635~104559073~104559075~104612245~104612247~103308614&ptag_exp=101509157~103116026~103200004~103233427~103252644~103252646~103351869~103351871~104481633~104481635~104559073~104559075~104612245~104612247&u_w=1280&u_h=1024&url=https%3A%2F%2Fdocs.chain.link%2Fchainlink-nodes%2Fjob-specs%2Fdirect-request-existing-job&_ng=1&label=_duuCKn_k4cYEPL_k6UB&hn=www.googleadservices.com&frm=0&tiba=Existing%20Job%20Example%20specs%20%7C%20Chainlink%20Documentation&value=0&bttype=purchase&npa=0&pscdl=noapi&auid=81223064.1748840216&uaa=x86&uab=64&uafvl=Google%2520Chrome%3B137.0.7151.55%7CChromium%3B137.0.7151.55%7CNot%252FA)Brand%3B24.0.0.0&uamb=0&uam=&uap=Linux%20x86_64&uapv=6.6.72&uaw=0&ec_mode=a&fledge=1&capi=1&_tu=Cg&em=tv.1&ct_cookie_present=0)

## GET > Uint256 Job Spec
[iframe](https://www.googletagmanager.com/ns.html?id=GTM-N6DQ47T)

Chainlink CCIP is now officially live on Solana. [View lanes and tokens.](https://docs.chain.link/ccip/directory/mainnet/chain/solana-mainnet?utm_medium=referral&utm_source=chainlink-docs&utm_campaign=solana-ccip)

On this page

# [GET > Uint256 Example Job Spec](https://docs.chain.link/chainlink-nodes/job-specs/direct-request-get-uint256\#overview)

This is an example v2 (TOML) job spec for calling any public API, retrieving a number , removing its decimals then returning _uint256_ in one Chainlink API Call. Note that the job calls the `fulfillOracleRequest2` function. If you are a node operator, use an [Operator contract](https://github.com/smartcontractkit/chainlink/blob/contracts-v1.3.0/contracts/src/v0.8/operatorforwarder/Operator.sol) with this job.
To test it from a smart contract, see this [Example](https://docs.chain.link/any-api/get-request/examples/single-word-response).

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
type = "directrequest"
schemaVersion = 1
name = "Get > Uint256 - (TOML)"
maxTaskDuration = "0s"
contractAddress = "YOUR_ORACLE_CONTRACT_ADDRESS"
minIncomingConfirmations = 0
observationSource = """
    decode_log   [type="ethabidecodelog"\
                  abi="OracleRequest(bytes32 indexed specId, address requester, bytes32 requestId, uint256 payment, address callbackAddr, bytes4 callbackFunctionId, uint256 cancelExpiration, uint256 dataVersion, bytes data)"\
                  data="$(jobRun.logData)"\
                  topics="$(jobRun.logTopics)"]

    decode_cbor  [type="cborparse" data="$(decode_log.data)"]
    fetch        [type="http" method=GET url="$(decode_cbor.get)" allowUnrestrictedNetworkAccess="true"]
    parse        [type="jsonparse" path="$(decode_cbor.path)" data="$(fetch)"]

    multiply     [type="multiply" input="$(parse)" times="$(decode_cbor.times)"]

    encode_data  [type="ethabiencode" abi="(bytes32 requestId, uint256 value)" data="{ \\"requestId\\": $(decode_log.requestId), \\"value\\": $(multiply) }"]
    encode_tx    [type="ethabiencode"\
                  abi="fulfillOracleRequest2(bytes32 requestId, uint256 payment, address callbackAddress, bytes4 callbackFunctionId, uint256 expiration, bytes calldata data)"\
                  data="{\\"requestId\\": $(decode_log.requestId), \\"payment\\":   $(decode_log.payment), \\"callbackAddress\\": $(decode_log.callbackAddr), \\"callbackFunctionId\\": $(decode_log.callbackFunctionId), \\"expiration\\": $(decode_log.cancelExpiration), \\"data\\": $(encode_data)}"\
                  ]
    submit_tx    [type="ethtx" to="YOUR_ORACLE_CONTRACT_ADDRESS" data="$(encode_tx)"]

    decode_log -> decode_cbor -> fetch -> parse -> multiply -> encode_data -> encode_tx -> submit_tx
"""

```

## Get the latest Chainlink content straight to your inbox.

Email Address

[iframe](https://td.doubleclick.net/td/rul/346357746?random=1748840216189&cv=11&fst=1748840216189&fmt=3&bg=ffffff&guid=ON&async=1&gcl_ctr=1&gtm=45be55t0h2v891173849z8847174275za200zb847174275&gcd=13l3l3l3l1l1&dma=0&tag_exp=101509157~103103155~103103157~103116026~103200004~103233427~103252644~103252646~103351869~103351871~104481633~104481635~104559073~104559075~104612245~104612247&ptag_exp=101509157~103116026~103200004~103233427~103252644~103252646~103351869~103351871~104481633~104481635~104559073~104559075~104612245~104612247&u_w=1280&u_h=1024&url=https%3A%2F%2Fdocs.chain.link%2Fchainlink-nodes%2Fjob-specs%2Fdirect-request-get-uint256&_ng=1&label=_duuCKn_k4cYEPL_k6UB&hn=www.googleadservices.com&frm=0&tiba=GET%20%3E%20Uint256%20Example%20Job%20Spec%20%7C%20Chainlink%20Documentation&value=0&bttype=purchase&npa=0&pscdl=noapi&auid=1296953750.1748840216&uaa=x86&uab=64&uafvl=Google%2520Chrome%3B137.0.7151.55%7CChromium%3B137.0.7151.55%7CNot%252FA)Brand%3B24.0.0.0&uamb=0&uam=&uap=Linux%20x86_64&uapv=6.6.72&uaw=0&ec_mode=a&fledge=1&capi=1&_tu=Cg&em=tv.1&ct_cookie_present=0)

## Connecting Chainlink to Database
[iframe](https://www.googletagmanager.com/ns.html?id=GTM-N6DQ47T)

Chainlink CCIP is now officially live on Solana. [View lanes and tokens.](https://docs.chain.link/ccip/directory/mainnet/chain/solana-mainnet?utm_medium=referral&utm_source=chainlink-docs&utm_campaign=solana-ccip)

On this page

# [Connecting to a Remote Database](https://docs.chain.link/chainlink-nodes/resources/connecting-to-a-remote-database\#overview)

This guide show you how to set up a PostgreSQL database and connect your Chainlink node to it. Alternatively, you can follow the guides below:

- [Amazon AWS](https://aws.amazon.com/getting-started/tutorials/create-connect-postgresql-db/)
- [Azure](https://docs.microsoft.com/en-us/azure/postgresql/quickstart-create-server-database-portal)
- [Docker](https://docs.docker.com/samples/postgres/)
- [Google Cloud](https://cloud.google.com/community/tutorials/setting-up-postgres)

## [Obtain information about your database](https://docs.chain.link/chainlink-nodes/resources/connecting-to-a-remote-database\#obtain-information-about-your-database)

In order to connect to a remote database, you must obtain information about the database and the server. Note the following database details so you can use them to configure your Chainlink node later:

- Server hostname or IP
- Port
- Username
- Password
- Database name

The user must be the owner of the desired database. On first run, the migrations will create the tables necessary for the Chainlink node.

## [Set Your DATABASE\_URL environment variable](https://docs.chain.link/chainlink-nodes/resources/connecting-to-a-remote-database\#set-your-database_url-environment-variable)

Below is an example for setting the `DATABASE_URL` environment variable for your Chainlink Node's `.env` configuration file:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```text
DATABASE_URL=postgresql://[USERNAME]:[PASSWORD]@[SERVER]:[PORT]/[DATABASE]?sslmode=[SSL_MODE]

```

Change the following placeholders to their real values:

- `[USERNAME]`: The username for the database owner account.
- `[PASSWORD]`: The password for the database owner account.
- `[SERVER]`: The hostname or IP address of the database server.
- `[PORT]`: The port that the database is listening on. The default port for PostgreSQL is `5432`.
- `[DATABASE]`: The name of the database to use for the Chainlink node.
- `[SSL_MODE]`: If you are testing on a database that does not have SSL enabled, you can specify `disable` so that you don't need to go through the process of configuring SSL on your database. On a production node, set this value to `require` or `verify-full`. This requires an encrypted connection between your Chainlink node and the database. See the [PostgreSQL documentation](https://www.postgresql.org/docs/current/libpq-ssl.html#LIBPQ-SSL-PROTECTION) to learn about the available SSL modes.

## What's next

- [\> Configuring Chainlink](https://docs.chain.link/chainlink-nodes/v1/configuration)

## Get the latest Chainlink content straight to your inbox.

Email Address

[iframe](https://td.doubleclick.net/td/rul/346357746?random=1748840216120&cv=11&fst=1748840216120&fmt=3&bg=ffffff&guid=ON&async=1&gcl_ctr=1&gtm=45be55s2v891173849z8847174275za200zb847174275&gcd=13l3l3l3l1l1&dma=0&tag_exp=101509157~103116026~103200004~103233427~103252644~103252646~103351869~103351871~104481633~104481635~104559073~104559075~104573694~104612245~104612247&ptag_exp=101509157~102938614~103116026~103200004~103233427~103252644~103252646~103351866~103351868~104481633~104481635~104559073~104559075~104611962~104611964~104612245~104612247&u_w=1280&u_h=1024&url=https%3A%2F%2Fdocs.chain.link%2Fchainlink-nodes%2Fresources%2Fconnecting-to-a-remote-database&_ng=1&label=_duuCKn_k4cYEPL_k6UB&hn=www.googleadservices.com&frm=0&tiba=Connecting%20to%20a%20Remote%20Database%20%7C%20Chainlink%20Documentation&value=0&bttype=purchase&npa=0&pscdl=noapi&auid=1021430416.1748840216&uaa=x86&uab=64&uafvl=Google%2520Chrome%3B137.0.7151.55%7CChromium%3B137.0.7151.55%7CNot%252FA)Brand%3B24.0.0.0&uamb=0&uam=&uap=Linux%20x86_64&uapv=6.6.72&uaw=0&ec_mode=a&fledge=1&capi=1&_tu=Cg&em=tv.1&ct_cookie_present=0)

## Int256 API Job Spec
[iframe](https://www.googletagmanager.com/ns.html?id=GTM-N6DQ47T)

Chainlink CCIP is now officially live on Solana. [View lanes and tokens.](https://docs.chain.link/ccip/directory/mainnet/chain/solana-mainnet?utm_medium=referral&utm_source=chainlink-docs&utm_campaign=solana-ccip)

On this page

# [GET > Int256 Example Job Spec](https://docs.chain.link/chainlink-nodes/job-specs/direct-request-get-int256\#overview)

This is an example v2 (TOML) job spec for calling any public API, retrieving a number , removing its decimals then returning _int256_ in one Chainlink API Call. Note that the job calls the `fulfillOracleRequest2` function. If you are a node operator, use an [Operator contract](https://github.com/smartcontractkit/chainlink/blob/contracts-v1.3.0/contracts/src/v0.8/operatorforwarder/Operator.sol) with this job.

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
type = "directrequest"
schemaVersion = 1
name = "Get > Int256 - (TOML)"
maxTaskDuration = "0s"
contractAddress = "YOUR_ORACLE_CONTRACT_ADDRESS"
minIncomingConfirmations = 0
observationSource = """
    decode_log   [type="ethabidecodelog"\
                  abi="OracleRequest(bytes32 indexed specId, address requester, bytes32 requestId, uint256 payment, address callbackAddr, bytes4 callbackFunctionId, uint256 cancelExpiration, uint256 dataVersion, bytes data)"\
                  data="$(jobRun.logData)"\
                  topics="$(jobRun.logTopics)"]

    decode_cbor  [type="cborparse" data="$(decode_log.data)"]
    fetch        [type="http" method=GET url="$(decode_cbor.get)" allowUnrestrictedNetworkAccess="true"]
    parse        [type="jsonparse" path="$(decode_cbor.path)" data="$(fetch)"]

    multiply     [type="multiply" input="$(parse)" times="$(decode_cbor.times)"]

    encode_data  [type="ethabiencode" abi="(bytes32 requestId, int256 value)" data="{ \\"requestId\\": $(decode_log.requestId), \\"value\\": $(multiply) }"]
    encode_tx    [type="ethabiencode"\
                  abi="fulfillOracleRequest2(bytes32 requestId, uint256 payment, address callbackAddress, bytes4 callbackFunctionId, uint256 expiration, bytes calldata data)"\
                  data="{\\"requestId\\": $(decode_log.requestId), \\"payment\\":   $(decode_log.payment), \\"callbackAddress\\": $(decode_log.callbackAddr), \\"callbackFunctionId\\": $(decode_log.callbackFunctionId), \\"expiration\\": $(decode_log.cancelExpiration), \\"data\\": $(encode_data)}"\
                  ]
    submit_tx    [type="ethtx" to="YOUR_ORACLE_CONTRACT_ADDRESS" data="$(encode_tx)"]

    decode_log -> decode_cbor -> fetch -> parse -> multiply -> encode_data -> encode_tx -> submit_tx
"""

```

## Get the latest Chainlink content straight to your inbox.

Email Address

## Chainlink GET Bool Spec
[iframe](https://www.googletagmanager.com/ns.html?id=GTM-N6DQ47T)

Chainlink CCIP is now officially live on Solana. [View lanes and tokens.](https://docs.chain.link/ccip/directory/mainnet/chain/solana-mainnet?utm_medium=referral&utm_source=chainlink-docs&utm_campaign=solana-ccip)

On this page

# [GET > Bool Example Job Spec](https://docs.chain.link/chainlink-nodes/job-specs/direct-request-get-bool\#overview)

This is an example v2 (TOML) job spec for calling any public API, parsing the result then returning a _bool_ in one Chainlink API Call. Note that the job calls the `fulfillOracleRequest2` function. If you are a node operator, use an [Operator contract](https://github.com/smartcontractkit/chainlink/blob/contracts-v1.3.0/contracts/src/v0.8/operatorforwarder/Operator.sol) with this job.

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
type = "directrequest"
schemaVersion = 1
name = "Get > Bool - (TOML)"
maxTaskDuration = "0s"
contractAddress = "YOUR_ORACLE_CONTRACT_ADDRESS"
minIncomingConfirmations = 0
observationSource = """
    decode_log   [type="ethabidecodelog"\
                  abi="OracleRequest(bytes32 indexed specId, address requester, bytes32 requestId, uint256 payment, address callbackAddr, bytes4 callbackFunctionId, uint256 cancelExpiration, uint256 dataVersion, bytes data)"\
                  data="$(jobRun.logData)"\
                  topics="$(jobRun.logTopics)"]

    decode_cbor  [type="cborparse" data="$(decode_log.data)"]
    fetch        [type="http" method=GET url="$(decode_cbor.get)" allowUnrestrictedNetworkAccess="true"]
    parse        [type="jsonparse" path="$(decode_cbor.path)" data="$(fetch)"]
    encode_data  [type="ethabiencode" abi="(bytes32 requestId, bool value)" data="{ \\"requestId\\": $(decode_log.requestId), \\"value\\": $(parse) }"]
    encode_tx    [type="ethabiencode"\
                  abi="fulfillOracleRequest2(bytes32 requestId, uint256 payment, address callbackAddress, bytes4 callbackFunctionId, uint256 expiration, bytes calldata data)"\
                  data="{\\"requestId\\": $(decode_log.requestId), \\"payment\\":   $(decode_log.payment), \\"callbackAddress\\": $(decode_log.callbackAddr), \\"callbackFunctionId\\": $(decode_log.callbackFunctionId), \\"expiration\\": $(decode_log.cancelExpiration), \\"data\\": $(encode_data)}"\
                  ]
    submit_tx    [type="ethtx" to="YOUR_ORACLE_CONTRACT_ADDRESS" data="$(encode_tx)"]

    decode_log -> decode_cbor -> fetch -> parse -> encode_data -> encode_tx -> submit_tx
"""

```

## Get the latest Chainlink content straight to your inbox.

Email Address

## Chainlink API Job Spec
[iframe](https://www.googletagmanager.com/ns.html?id=GTM-N6DQ47T)

Chainlink CCIP is now officially live on Solana. [View lanes and tokens.](https://docs.chain.link/ccip/directory/mainnet/chain/solana-mainnet?utm_medium=referral&utm_source=chainlink-docs&utm_campaign=solana-ccip)

On this page

# [GET > Bytes Example Job Spec](https://docs.chain.link/chainlink-nodes/job-specs/direct-request-get-bytes\#overview)

This is an example v2 (TOML) job spec for returning _bytes_ in one Chainlink API Call. Note that the job calls the `fulfillOracleRequest2` function. If you are a node operator, use an [Operator contract](https://github.com/smartcontractkit/chainlink/blob/contracts-v1.3.0/contracts/src/v0.8/operatorforwarder/Operator.sol) with this job.
To test it from a smart contract, see this [Example](https://docs.chain.link/any-api/get-request/examples/large-responses).

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```toml
type = "directrequest"
schemaVersion = 1
name = "Get > Bytes"
maxTaskDuration = "0s"
contractAddress = "YOUR_ORACLE_CONTRACT_ADDRESS"
minIncomingConfirmations = 0
observationSource = """
    decode_log   [type="ethabidecodelog"\
                  abi="OracleRequest(bytes32 indexed specId, address requester, bytes32 requestId, uint256 payment, address callbackAddr, bytes4 callbackFunctionId, uint256 cancelExpiration, uint256 dataVersion, bytes data)"\
                  data="$(jobRun.logData)"\
                  topics="$(jobRun.logTopics)"]

    decode_cbor  [type="cborparse" data="$(decode_log.data)"]
    fetch        [type="http" method=GET url="$(decode_cbor.get)" allowUnrestrictedNetworkAccess="true"]
    parse        [type="jsonparse" path="$(decode_cbor.path)" data="$(fetch)"]
    encode_large [type="ethabiencode"\
                abi="(bytes32 requestId, bytes _data)"\
                data="{\\"requestId\\": $(decode_log.requestId), \\"_data\\": $(parse)}"\
                ]
    encode_tx  [type="ethabiencode"\
                abi="fulfillOracleRequest2(bytes32 requestId, uint256 payment, address callbackAddress, bytes4 callbackFunctionId, uint256 expiration, bytes calldata data)"\
                data="{\\"requestId\\": $(decode_log.requestId), \\"payment\\":   $(decode_log.payment), \\"callbackAddress\\": $(decode_log.callbackAddr), \\"callbackFunctionId\\": $(decode_log.callbackFunctionId), \\"expiration\\": $(decode_log.cancelExpiration), \\"data\\": $(encode_large)}"\
                ]

    submit_tx    [type="ethtx" to="YOUR_ORACLE_CONTRACT_ADDRESS" data="$(encode_tx)"]

    decode_log -> decode_cbor -> fetch -> parse  -> encode_large -> encode_tx -> submit_tx
"""

```

This is an example legacy v1 job spec for returning large responses in one Chainlink API Call.

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```json
{
  "name": "large-word",
  "initiators": [\
    {\
      "id": 9,\
      "jobSpecId": "7a97ff84-93ec-406d-9062-1b2531f9251a",\
      "type": "runlog",\
      "params": {\
        "address": "0xc57B33452b4F7BB189bB5AfaE9cc4aBa1f7a4FD8"\
      }\
    }\
  ],
  "tasks": [\
    {\
      "jobSpecId": "7a97ff8493ec406d90621b2531f9251a",\
      "type": "httpget"\
    },\
    {\
      "jobSpecId": "7a97ff8493ec406d90621b2531f9251a",\
      "type": "jsonparse"\
    },\
    {\
      "jobSpecId": "7a97ff8493ec406d90621b2531f9251a",\
      "type": "resultcollect"\
    },\
    {\
      "jobSpecId": "7a97ff8493ec406d90621b2531f9251a",\
      "type": "ethtx",\
      "confirmations": 1,\
      "params": {\
        "abiEncoding": ["bytes32", "bytes"]\
      }\
    }\
  ]
}

```

## Get the latest Chainlink content straight to your inbox.

Email Address

## External Initiators Guide
[iframe](https://www.googletagmanager.com/ns.html?id=GTM-N6DQ47T)

Chainlink CCIP is now officially live on Solana. [View lanes and tokens.](https://docs.chain.link/ccip/directory/mainnet/chain/solana-mainnet?utm_medium=referral&utm_source=chainlink-docs&utm_campaign=solana-ccip)

On this page

# [Adding External Initiators to Nodes](https://docs.chain.link/chainlink-nodes/external-initiators/external-initiators-in-nodes\#overview)

## [Creating an external initiator](https://docs.chain.link/chainlink-nodes/external-initiators/external-initiators-in-nodes\#creating-an-external-initiator)

To create an external initiator you must use the remote API. You can do this yourself, like so:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```text
POST http://<your chainlink node>/v2/external_initiators -d <PAYLOAD>

```

where payload is a JSON blob that contains:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```json
{
  "name": <MANDATORY UNIQUE NAME>,
  "url": <OPTIONAL EXTERNAL INITIATOR URL>
}

```

If a URL is provided, Chainlink will notify this URL of added and deleted jobs that can be triggered by this external initiator. This allows the external initiator to program in certain actions e.g. subscribing/unsubscribing to logs based on the job, etc.

On creation:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```text
POST <URL> -d {"jobId": <job external UUID>, "type": <name of external initiator>, "params": <optional arbitrary JSON specified at job creation time>}

```

On deletion:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```text
DELETE <URL>/<job external UUID>

```

You can use the chainlink client for convenience to access this API.

Enter the [Chainlink nodes CLI](https://docs.chain.link/chainlink-nodes/resources/miscellaneous/#execute-commands-running-docker) and run the following command

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
chainlink initiators create <NAME> <URL>

```

`NAME`: The name you want to use for your external initiator.
`URL`: The URL of your jobs endpoint. ie: `http://172.17.0.1:8080/jobs`

This will give you the environment variables you need to run your external initiator. Copy the output. It will look something like this:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```plaintext
║ ei_name  ║ http://localhost:8080/jobs ║ a4846e85727e46b48889c6e28b555696 ║ dnNfNhiiCTm1o6l+hGJVfCtRSSuDfZbj1VO4BkZG3E+b96lminE7yQHj2KALMAIk ║ iWt64+Q9benOf5JuGwJtQnbByN9rtHwSlElOVpHVTvGTP5Zb2Guwzy6w3wflwyYt ║ 56m38YkeCymYU0kr4Yg6x3e98CyAu+37y2+kMO2AL9lRMjA3hRA1ejFdG9UfFCAE

```

Be sure to save these values, since the secrets cannot be shown again.

You now can use `ei_name` as an initiator in your jobspec.

Set a new `.env` file, and add the respective values

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```text
EI_DATABASEURL=postgresql://$USERNAME:$PASSWORD@$SERVER:$PORT/$DATABASE
EI_CHAINLINKURL=http://localhost:6688
EI_IC_ACCESSKEY=<INSERT KEY>
EI_IC_SECRET=<INSERT KEY>
EI_CI_ACCESSKEY=<INSERT KEY>
EI_CI_SECRET=<INSERT KEY>

```

At the time of writing, the output should be in order. For example, in from the output above, `EI_IC_ACCESSKEY=a4846e85727e46b48889c6e28b555696` and so on.

Start your EI.

Whatever code you used to run your external initiator, pass it the new headers created for the access headers, and then start your service. An easy way to do this is by having it read from the `.env` file you just created. Check out the [Conflux External initiator](https://github.com/Conflux-Network-Global/demo-cfx-chainlink) for an example.

You'll want to test that your job is running properly. Meeting the criteria of your EI and then checking to see if a sample job kicks off is the best way to test this.

To try a real-life example, feel free to follow along with the [Conflux EI demo](https://www.youtube.com/watch?v=J8oJEp4qz5w).

[Additional external initiator reference](https://github.com/smartcontractkit/chainlink/wiki/External-Initiators)

## [Deleting an external initiator](https://docs.chain.link/chainlink-nodes/external-initiators/external-initiators-in-nodes\#deleting-an-external-initiator)

To delete an external initiator you must use the remote API. You can do this yourself, like so:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```text
DELETE http://<your chainlink node>/v2/external_initiators/<external initiator name>

```

You can alternatively use the chainlink client for convenience:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
chainlink initiators destroy <NAME>

```

## [Listing external initiators](https://docs.chain.link/chainlink-nodes/external-initiators/external-initiators-in-nodes\#listing-external-initiators)

To see your installed external initiators:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```text
GET http://<your chainlink node>/v2/external_initiators?size=100&page=1

```

Or, using the chainlink client:

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```shell
chainlink initiators list

```

## Get the latest Chainlink content straight to your inbox.

Email Address

[iframe](https://td.doubleclick.net/td/rul/346357746?random=1748840216121&cv=11&fst=1748840216121&fmt=3&bg=ffffff&guid=ON&async=1&gcl_ctr=1&gtm=45be55s2h1v891173849z8847174275za200zb847174275&gcd=13l3l3l3l1l1&dma=0&tag_exp=101509157~102938614~103116026~103200004~103233427~103252644~103252646~103351866~103351868~104481633~104481635~104559073~104559075~104612245~104612247&ptag_exp=101509157~103116026~103200004~103211513~103233427~103252644~103252646~103351869~103351871~104481633~104481635~104559073~104559075~104612245~104612247&u_w=1280&u_h=1024&url=https%3A%2F%2Fdocs.chain.link%2Fchainlink-nodes%2Fexternal-initiators%2Fexternal-initiators-in-nodes&_ng=1&label=_duuCKn_k4cYEPL_k6UB&hn=www.googleadservices.com&frm=0&tiba=Adding%20External%20Initiators%20to%20Nodes%20%7C%20Chainlink%20Documentation&value=0&bttype=purchase&npa=0&pscdl=noapi&auid=323864652.1748840216&uaa=x86&uab=64&uafvl=Google%2520Chrome%3B137.0.7151.55%7CChromium%3B137.0.7151.55%7CNot%252FA)Brand%3B24.0.0.0&uamb=0&uam=&uap=Linux%20x86_64&uapv=6.6.72&uaw=0&ec_mode=a&fledge=1&capi=1&_tu=Cg&em=tv.1&ct_cookie_present=0)

## GET > String Job Spec
[iframe](https://www.googletagmanager.com/ns.html?id=GTM-N6DQ47T)

Chainlink CCIP is now officially live on Solana. [View lanes and tokens.](https://docs.chain.link/ccip/directory/mainnet/chain/solana-mainnet?utm_medium=referral&utm_source=chainlink-docs&utm_campaign=solana-ccip)

On this page

# [GET > String Example Job Spec](https://docs.chain.link/chainlink-nodes/job-specs/direct-request-get-string\#overview)

This is an example v2 (TOML) job spec for returning a _string_ in one Chainlink API Call. Note that the job calls the `fulfillOracleRequest2` function. If you are a node operator, use an [Operator contract](https://github.com/smartcontractkit/chainlink/blob/contracts-v1.3.0/contracts/src/v0.8/operatorforwarder/Operator.sol) with this job.
To test it from a smart contract, see this [Example](https://docs.chain.link/any-api/get-request/examples/array-response).

![copy to clipboard](https://docs.chain.link/assets/icons/copyIcon.svg)

```solidity
# THIS IS EXAMPLE CODE THAT USES HARDCODED VALUES FOR CLARITY.
# THIS IS EXAMPLE CODE THAT USES UN-AUDITED CODE.
# DO NOT USE THIS CODE IN PRODUCTION.

type = "directrequest"
# evmChainID for Sepolia Testnet
evmChainID = "11155111"
schemaVersion = 1
name = "Get > String"
contractAddress = "YOUR_ORACLE_CONTRACT_ADDRESS"
maxTaskDuration = "0s"
minIncomingConfirmations = 0
observationSource = """
    decode_log   [type="ethabidecodelog"\
                  abi="OracleRequest(bytes32 indexed specId, address requester, bytes32 requestId, uint256 payment, address callbackAddr, bytes4 callbackFunctionId, uint256 cancelExpiration, uint256 dataVersion, bytes data)"\
                  data="$(jobRun.logData)"\
                  topics="$(jobRun.logTopics)"]

    decode_cbor  [type="cborparse" data="$(decode_log.data)"]
    fetch        [type="http" method=GET url="$(decode_cbor.get)" allowUnrestrictedNetworkAccess="true"]
    parse        [type="jsonparse" path="$(decode_cbor.path)" data="$(fetch)"]
    encode_data  [type="ethabiencode" abi="(bytes32 requestId, string value)" data="{ \\"requestId\\": $(decode_log.requestId), \\"value\\": $(parse) }"]
    encode_tx    [type="ethabiencode"\
                  abi="fulfillOracleRequest2(bytes32 requestId, uint256 payment, address callbackAddress, bytes4 callbackFunctionId, uint256 expiration, bytes calldata data)"\
                  data="{\\"requestId\\": $(decode_log.requestId), \\"payment\\":   $(decode_log.payment), \\"callbackAddress\\": $(decode_log.callbackAddr), \\"callbackFunctionId\\": $(decode_log.callbackFunctionId), \\"expiration\\": $(decode_log.cancelExpiration), \\"data\\": $(encode_data)}"\
                  ]
    submit_tx    [type="ethtx" to="YOUR_ORACLE_CONTRACT_ADDRESS" data="$(encode_tx)"]

    decode_log -> decode_cbor -> fetch -> parse -> encode_data -> encode_tx -> submit_tx
"""

```

