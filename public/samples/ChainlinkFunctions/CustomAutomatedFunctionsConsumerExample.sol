// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import {AutomationCompatibleInterface} from "@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol";
import {FunctionsClient} from "@chainlink/contracts/src/v0.8/functions/v1_0_0/FunctionsClient.sol";

import {FunctionsRequest} from "@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsRequest.sol";
import {ConfirmedOwner} from "@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol";

/**
 * @title Functions contract used for Automation.
 * @notice This contract is a demonstration of using Functions and Automation.
 * @notice NOT FOR PRODUCTION USE
 */
contract CustomAutomatedFunctionsConsumerExample is FunctionsClient, AutomationCompatibleInterface, ConfirmedOwner {
  uint256 public lastBlockNumber;
  bytes public request;
  uint64 public subscriptionId;
  uint32 public gasLimit;
  bytes32 public donID;
  bytes32 public s_lastRequestId;
  bytes public s_lastResponse;
  bytes public s_lastError;
  uint256 public s_upkeepCounter;
  uint256 public s_requestCounter;
  uint256 public s_responseCounter;

  error UnexpectedRequestID(bytes32 requestId);

  event Response(bytes32 indexed requestId, bytes response, bytes err);
  event RequestRevertedWithErrorMsg(string reason);
  event RequestRevertedWithoutErrorMsg(bytes data);

  constructor(
    address router
  ) FunctionsClient(router) ConfirmedOwner(msg.sender) {}

  /**
   * @notice Checks if upkeep is needed based on the difference between the current and the last block number.
   * @dev This function checks if the current block number has incremented since the last recorded block number and
   * returns a boolean indicating if upkeep is needed.
   * @return upkeepNeeded A boolean indicating if upkeep is needed (true if the current block number has incremented
   * since the last recorded block number).
   * @return performData An empty bytes value since no additional data is needed for the upkeep in this implementation.
   */
  function checkUpkeep(
    bytes calldata /* checkData */
  ) external view override returns (bool upkeepNeeded, bytes memory performData) {
    upkeepNeeded = block.number - lastBlockNumber > 0; // Check if the current block number has incremented since the
      // last recorded block number
      // We don't use the checkData in this example. The checkData is defined when the Upkeep was registered.
    return (upkeepNeeded, ""); // Return an empty bytes value for performData
  }

  /**
   * @notice Send a pre-encoded CBOR request if the current block number has incremented since the last recorded block
   * number.
   */
  function performUpkeep(
    bytes calldata /* performData */
  ) external override {
    if (block.number - lastBlockNumber > 0) {
      lastBlockNumber = block.number;
      s_upkeepCounter = s_upkeepCounter + 1;
      try i_router.sendRequest(
        subscriptionId, request, FunctionsRequest.REQUEST_DATA_VERSION, gasLimit, donID
      ) returns (
        bytes32 requestId
      ) {
        s_lastRequestId = requestId;
        s_requestCounter = s_requestCounter + 1;
        emit RequestSent(requestId);
      } catch Error(string memory reason) {
        emit RequestRevertedWithErrorMsg(reason);
      } catch (bytes memory data) {
        emit RequestRevertedWithoutErrorMsg(data);
      }
    }
    // We don't use the performData in this example. The performData is generated by the Automation Node's call to your
    // checkUpkeep function
  }

  /// @notice Update the request settings
  /// @dev Only callable by the owner of the contract
  /// @param _request The new encoded CBOR request to be set. The request is encoded offchain
  /// @param _subscriptionId The new subscription ID to be set
  /// @param _gasLimit The new gas limit to be set
  /// @param _donID The new job ID to be set
  function updateRequest(
    bytes memory _request,
    uint64 _subscriptionId,
    uint32 _gasLimit,
    bytes32 _donID
  ) external onlyOwner {
    request = _request;
    subscriptionId = _subscriptionId;
    gasLimit = _gasLimit;
    donID = _donID;
  }

  /**
   * @notice Store latest result/error
   * @param requestId The request ID, returned by sendRequest()
   * @param response Aggregated response from the user code
   * @param err Aggregated error from the user code or from the execution pipeline
   * Either response or error parameter will be set, but never both
   */
  function fulfillRequest(
    bytes32 requestId,
    bytes memory response,
    bytes memory err
  ) internal override {
    if (s_lastRequestId != requestId) {
      revert UnexpectedRequestID(requestId);
    }
    s_lastResponse = response;
    s_lastError = err;
    s_responseCounter = s_responseCounter + 1;
    emit Response(requestId, s_lastResponse, s_lastError);
  }
}
